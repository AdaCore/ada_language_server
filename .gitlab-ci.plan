def build_(qualifier={}):
    with defaults(qualifier=qualifier):
        anod_build("als")
        anod_build("vscode-extension")


def test_als_(qualifier={}):
    with defaults(qualifier=qualifier):
        # Install the component built in the preceding CI build job
        anod_install("als")
        anod_test("als")


def test_als_cov_(qualifier={}):
    with defaults(qualifier=qualifier | {"coverage": True}):
        # We don't install 'als' because in coverage mode, 'als' can't be installed and
        # has to be built instead.
        anod_test("als")


def test_vscode_extension_(qualifier={}):
    with defaults(qualifier=qualifier):
        # Install the component built in the preceding CI build job
        anod_install("vscode-extension")
        anod_test("vscode-extension", qualifier=qualifier | {"coverage": True})


def build_test_gs_(qualifier={}):
    with defaults(qualifier=qualifier):
        # Install the component built in the preceding CI build job
        anod_install("als")
        # Test gps. This will automatically rebuild gps based on the ALS changes
        anod_test("gps")


# Edge

edge_qualifier = {"edge": True}


def build_edge():
    build_(edge_qualifier)


def test_als_edge():
    test_als_(edge_qualifier)


def test_als_cov_edge():
    test_als_cov_(edge_qualifier)


def test_vscode_extension_edge():
    test_vscode_extension_(edge_qualifier)


def build_test_gs_edge():
    build_test_gs_(edge_qualifier)


# Integration testsuite (no edge version)


def test_integration_testsuite():
    # The two components below have been built by the build job of the CI
    anod_install("als")
    anod_install("vscode-extension")
    # Install gps component to avoid it getting rebuilt. We are only interested in
    # vscode tests in the integration-testsuite, not gps.
    anod_install("gps")
    # Run the subset of integration-testsuite that uses VS Code
    anod_test(
        "integration-testsuite",
        qualifier={"run-tools": "vscode", "cleanup-mode": "none"},
    )
