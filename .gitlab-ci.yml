variables:
   # The common part of the URL for cloning from within a CI
   GIT_CLONE_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}

stages:
  - build_and_test

.detect-branches:
  #  Detects source and target branches.
  #    ADACORE_CI_SOURCE_BRANCH is set to source branch (merge request, pull)
  #    ADACORE_CI_TARGET_BRANCH is set to target branch of merge request, or 'master'/'edge' for pull
  #    ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX is set to '-edge' when target repository is 'edge'
  #    ADACORE_CI_ANOD_EDGE_QUALIFIER is set to '--qualifier=edge' when target repository is 'edge'
  #    ADACORE_CI_SUBPROJECTS_ROOT is set to '/tmp' and may be overritten by script
  - |
      if [[ -n "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ]]; then
        ADACORE_CI_TARGET_BRANCH="$CI_MERGE_REQUEST_TARGET_BRANCH_NAME";
      elif [[ "x$CI_COMMIT_BRANCH" == "xedge" ]]; then
        ADACORE_CI_TARGET_BRANCH="edge";
      else
        ADACORE_CI_TARGET_BRANCH="master";
      fi;
      if [[ -n "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" ]]; then
        ADACORE_CI_SOURCE_BRANCH="$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME";
      else
        ADACORE_CI_SOURCE_BRANCH="$CI_COMMIT_BRANCH";
      fi;
      if [[ "$ADACORE_CI_TARGET_BRANCH" == "edge" ]]; then
        ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX="-edge";
        ADACORE_CI_ANOD_EDGE_QUALIFIER="--qualifier=edge"
      else
        ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX="";
        ADACORE_CI_ANOD_EDGE_QUALIFIER=""
      fi
      ADACORE_CI_SUBPROJECTS_ROOT=/tmp
      echo "Source branch: $ADACORE_CI_SOURCE_BRANCH"
      echo "Target branch: $ADACORE_CI_TARGET_BRANCH"
      echo "Name suffix:   $ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX"
      echo "Qualifier:     $ADACORE_CI_ANOD_EDGE_QUALIFIER"
      echo "Subprojects:   $ADACORE_CI_SUBPROJECTS_ROOT"

.checkout:
  #  Variables:
  #    ADACODE_CI_SUBPROJECTS_ROOT  - root directory to checkout repositories.
  #    ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH - path component of the repository's URL.
  #    ADACORE_CI_SUBPROJECT_NAME - name of the directory for subproject.
  - |
    git -C $ADACORE_CI_SUBPROJECTS_ROOT clone $GIT_CLONE_BASE/$ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH $ADACORE_CI_SUBPROJECT_NAME
    if `git -C $ADACORE_CI_SUBPROJECTS_ROOT -C $ADACORE_CI_SUBPROJECT_NAME show-ref $ADACORE_CI_SOURCE_BRANCH > /dev/null`; then
      git -C $ADACORE_CI_SUBPROJECTS_ROOT -C $ADACORE_CI_SUBPROJECT_NAME checkout $ADACORE_CI_SOURCE_BRANCH;
    elif `git -C $ADACORE_CI_SUBPROJECTS_ROOT -C $ADACORE_CI_SUBPROJECT_NAME show-ref $ADACORE_CI_TARGET_BRANCH > /dev/null`; then
      git -C $ADACORE_CI_SUBPROJECTS_ROOT -C $ADACORE_CI_SUBPROJECT_NAME checkout $ADACORE_CI_TARGET_BRANCH;
    fi
    anod vcs --sandbox-dir /it/wave --add-repo $ADACORE_CI_SUBPROJECT_NAME $ADACORE_CI_SUBPROJECTS_ROOT/$ADACORE_CI_SUBPROJECT_NAME

# Build and test with ANOD
# TODO: add a build and test based on Alire in parallel to this.
build_and_test:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: build_and_test
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master' && $CI_COMMIT_TITLE =~ /Merge branch.*/
    - if: $CI_COMMIT_BRANCH == 'edge' && $CI_COMMIT_TITLE =~ /Merge branch.*/
  script:
    - . ~/.aws_container_credentials
    - export PATH=/it/e3/bin:$PATH
    - !reference [.detect-branches]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/spawn
      ADACORE_CI_SUBPROJECT_NAME=spawn
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/vss
      ADACORE_CI_SUBPROJECT_NAME=vss
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/markdown
      ADACORE_CI_SUBPROJECT_NAME=markdown
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/gnatdoc
      ADACORE_CI_SUBPROJECT_NAME=gnatdoc$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/gnatstudio-internal
      ADACORE_CI_SUBPROJECT_NAME=gnatstudio-internal$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX
    - !reference [.checkout]

    - if [[ "$ADACORE_CI_TARGET_BRANCH" == "edge" ]]; then
        BUILD_SPACE_SUFFIX="_edge";
      fi

    - |
      # Setup the 'anod vcs' for this repo
      cd /it/wave
      anod vcs --add-repo ada_language_server$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX $CI_PROJECT_DIR

      # Build & test using anod
      cd /it/wave
    - anod build als $ADACORE_CI_ANOD_EDGE_QUALIFIER --minimal
    - anod test als $ADACORE_CI_ANOD_EDGE_QUALIFIER --minimal

      # Process the report
    - e3-testsuite-report
       --failure-exit-code 1
       --xunit-output $CI_PROJECT_DIR/xunit_output.xml
       x86_64-linux/als${BUILD_SPACE_SUFFIX}-test/results/new/ || FAILED=true

    - anod install lsif-ada
    - ( eval `anod printenv lsif-ada`;
        eval `anod printenv stable-gnat`;
        eval `anod printenv ada_libfswatch`;
        eval `anod printenv stable-templates_parser`;
        eval `anod printenv stable-langkit_support`;
        eval `anod printenv stable-libgpr2 --qualifier=bare`;
        eval `anod printenv stable-libadalang`;
        eval `anod printenv stable-libadalang-tools`;
        export GPR_PROJECT_PATH=/it/wave/x86_64-linux/als/src/subprojects/gnatdoc/gnat:$GPR_PROJECT_PATH;
        export GPR_PROJECT_PATH=/it/wave/x86_64-linux/als/src/subprojects/VSS/gnat:$GPR_PROJECT_PATH;
        cd /it/wave/x86_64-linux/als/src;
        lsif-ada gnat/lsp_server.gpr > $CI_PROJECT_DIR/dump.lsif )

    - if [ ! -z ${FAILED+x} ]; then echo "There was at least one testcase failure" && exit 1; fi

  artifacts:
     when: always  #  Upload on errors too
     reports:
       junit: xunit_output.xml
       lsif: dump.lsif
