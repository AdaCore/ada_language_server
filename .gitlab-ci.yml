stages:
  - build
  - test
  - optional
  - check

include:
  # Issue check
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/check-issue@~latest

  # pre-commit
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/pre-commit@~latest
    inputs:
      on-diff: true
      stage: check

  # Build
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/build@~latest
    inputs:
      anod-args: run build_$ACI_TRACK
      cpus: 16
      disk: 80
      image: systemgtk
      windows: true
      windows-cpus: 8
      # 8GB of memory leads to heap exhaustion during compilation. We need more.
      windows-mem: 16
      save-component: true

  # Testing of the ALS
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      job-name: als
      anod-args: run test_als_$ACI_TRACK
      image: systemgtk
      disk: 80
      windows: true

  # Testing of the ALS with coverage
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      job-name: als-cov
      anod-args: run test_als_cov_$ACI_TRACK --latest
      image: systemgtk
      disk: 80
      # This job needs to rebuild ALS in coverage mode, so it doesn't need to
      # depend on the build job. The following will get it to run in parallel
      # with the build job.
      needs: []
      stage: test

  # Testing of the VSCode extension
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      job-name: vscode-extension
      anod-args: run test_vscode_extension_$ACI_TRACK
      image: systemgtk
      windows: true

  # Integration testsuite
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      job-name: integration-testsuite
      # Here we would like to use --latest as to reduce issues from unavailable
      # components, but we can't because it breaks the transfer of built
      # components between jobs using anod-copy-components.
      anod-args: run test_integration_testsuite
      image: systemgtk
      cpus: 4
      disk: 80
      windows: true
    rules:
      # integration-testsuite cannot work with edge builds
      - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_TARGET_BRANCH_NAME == 'edge'
        when: never

  # Optional testing of GNAT Studio
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      job-name: gs
      anod-args: run build_test_gs_$ACI_TRACK
      image: systemgtk
      disk: 80
      stage: optional
      windows: true
      rules:
        - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
          when: manual
          allow_failure: true

als-cov:linux:
  variables:
    RUNNER_AFTER_SCRIPT_TIMEOUT: 10m
  after_script:
    # Source the env prepared by generic_anod_ci
    - cat /tmp/ci_env.sh
    - . /tmp/ci_env.sh

    - ALS_BUILD_SPACE=$(anod info test als $ACI_TRACK_QUALIFIER -Q coverage --show working_dir)
    - RESULTS_DIR=$ALS_BUILD_SPACE/results/new

    # Include Anod logs
    - cp -rv $ANOD_DEFAULT_SANDBOX_DIR/log $CI_PROJECT_DIR/anod-logs

    # Include coverage report
    - mkdir -v $CI_PROJECT_DIR/coverage

      # save coverage results
    - cp -v $RESULTS_DIR/coverage-cobertura/cobertura.xml $CI_PROJECT_DIR/coverage
    - cp -r $RESULTS_DIR/coverage-dhtml $CI_PROJECT_DIR/coverage/dhtml
    - cp -r $RESULTS_DIR/coverage-xml $CI_PROJECT_DIR/coverage/xml

    # display coverage stats for global reporting
    - echo_coverage_stats --coverage-file $RESULTS_DIR/coverage-xml/index.xml

    # export to gitlab pages
    - |
      if [[ $CI_PIPELINE_SOURCE = "merge_request_event" ]]; then
        target_subdir=MRs/$CI_MERGE_REQUEST_IID
      else
        target_subdir=$CI_COMMIT_BRANCH
      fi

    - target_subdir=$target_subdir/ada-coverage
    - publish-pages $CI_PROJECT_DIR/coverage/dhtml/ --target-subdir $target_subdir --expires 30
  coverage: '/^Stmt Coverage:\s+(\d+\.\d+\%) \(\d+ \/ \d+\)$/'
  artifacts:
    when: always #  Upload on errors too
    reports:
      junit: xunit-*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura.xml
    paths:
      - anod-logs/
      # Also archive coverage reports as files for other use
      - coverage/cobertura.xml
      - coverage/xml/

vscode-extension:linux:
  after_script:
    # Source the env prepared by generic_anod_ci
    - cat /tmp/ci_env.sh
    - . /tmp/ci_env.sh

    - VSCODE_BUILD_SPACE=$(anod info test vscode-extension -Q coverage $ACI_TRACK_QUALIFIER --show working_dir)

    # Include Anod logs
    - cp -rv $ANOD_DEFAULT_SANDBOX_DIR/log $CI_PROJECT_DIR/anod-logs

    # Copy coverage reports
    - cp -r $VSCODE_BUILD_SPACE/test/integration/vscode/ada/coverage $CI_PROJECT_DIR

    # export to gitlab pages
    - |
      if [[ $CI_PIPELINE_SOURCE = "merge_request_event" ]]; then
        target_subdir=MRs/$CI_MERGE_REQUEST_IID
      else
        target_subdir=$CI_COMMIT_BRANCH
      fi
    - target_subdir=$target_subdir/ts-coverage
    - publish-pages $CI_PROJECT_DIR/coverage/ --target-subdir $target_subdir --expires 30

    # Compute coverage percentage
    - line_rate=$(cat $CI_PROJECT_DIR/coverage/cobertura-coverage.xml | grep -o 'line-rate="\([^"]\+\)"' | head -1 | grep -o '[0-9.]\+')
    - line_perc=$(python -c "print($line_rate * 100)")
    - >
      echo "Line Coverage: $line_perc"

    # The Cobertura report coming from the VS Code test infra has a <source>
    # element specifying the root path of all sources.
    #
    # This needs to be replaced with the CI_PROJECT_DIR in order for GitLab to
    # understand it.
    #
    # In this sed command we use '|' instead of '/' as a separator for the 's'
    # command to avoid interpreting path separators in the pattern and
    # replacement.
    - sed -e "s|$VSCODE_BUILD_SPACE/test|$CI_PROJECT_DIR|" -i $CI_PROJECT_DIR/coverage/cobertura-coverage.xml
  coverage: '/^Line Coverage:\s+(\d+\.\d+)$/'
  artifacts:
    when: always #  Upload on errors too
    reports:
      junit: xunit-*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - anod-logs/
      - coverage/cobertura-coverage.xml

als:windows:
  variables:
    # In GitLab CI tests timeout more often on Windows, so we multiply
    # testsuite timeouts by the following factor
    ALS_WAIT_FACTOR: "2"

vscode-extension:windows:
  variables:
    MOCHA_TIMEOUT: "30000"
