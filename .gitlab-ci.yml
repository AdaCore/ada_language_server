variables:
   # The common part of the URL for cloning from within a CI
   GIT_CLONE_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}

stages:
  - build_and_test


# Build and test with ANOD
# TODO: add a build and test based on Alire in parallel to this.
build_and_test:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: build_and_test
  interruptible: true
  script:
    - . ~/.aws_container_credentials
    - export PATH=/it/e3/bin:$PATH

    # Check whether we're in an MR targeting 'edge' or commiting to
    # `something/edge` branch then setup some variables.
    - TARGET_BRANCH="master"
    - if [[ "x$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" = "xedge" ||
            "$CI_COMMIT_BRANCH" =~ .*/edge ]];
      then
          echo "Targeting the edge branch." ;
          REPO_SUFFIX="-edge" ;
          BUILD_SPACE_SUFFIX="_edge" ;
          QUALIFIER="edge" ;
          TARGET_BRANCH="edge" ;
      fi

    # Setup the 'anod vcs' for this repo
    - cd /it/wave
    - anod vcs --add-repo ada_language_server${REPO_SUFFIX} $CI_PROJECT_DIR

    # Figure out if we're on a sync branch
    - BRANCH=master
    - if [[ $CI_COMMIT_BRANCH =~ ^sync/ ]]; then
         BRANCH=$CI_COMMIT_BRANCH;
      elif [[ $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^sync/ ]]; then
         BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME;
      fi

    # Setup the 'anod vcs' for the other repos, if we're on
    # a "sync" branch.
    - for subproject in vss spawn gnatdoc ; do
         echo "for subproject $subproject ..." ;
         cd /tmp ;
         git clone $GIT_CLONE_BASE/eng/ide/$subproject ;
         cd $subproject ;
         if `git show-ref $BRANCH > /dev/null` ; then
             echo "... checking out $BRANCH"
             git checkout $BRANCH ;
             cd /it/wave ;
             anod vcs --add-repo $subproject /tmp/$subproject ;
         else
             echo "... checking out $TARGET_BRANCH"
             git checkout $TARGET_BRANCH ;
         fi ;
      done ;

    # Build & test using anod
    - cd /it/wave
    - anod build als --qualifier=$QUALIFIER --minimal
    - anod test als  --qualifier=$QUALIFIER --minimal

    # Process the report
    - e3-testsuite-report
       --failure-exit-code 1
       --xunit-output $CI_PROJECT_DIR/xunit_output.xml
       x86_64-linux/als${BUILD_SPACE_SUFFIX}-test/results/new/ || FAILED=true

    - anod install lsif-ada
    - ( eval `anod printenv lsif-ada`;
        eval `anod printenv stable-gnat`;
        eval `anod printenv ada_libfswatch`;
        eval `anod printenv stable-templates_parser`;
        eval `anod printenv stable-langkit_support`;
        eval `anod printenv stable-libgpr2 --qualifier=bare`;
        eval `anod printenv stable-libadalang`;
        eval `anod printenv stable-libadalang-tools`;
        export GPR_PROJECT_PATH=/it/wave/x86_64-linux/als/src/subprojects/gnatdoc/gnat:$GPR_PROJECT_PATH;
        export GPR_PROJECT_PATH=/it/wave/x86_64-linux/als/src/subprojects/VSS/gnat:$GPR_PROJECT_PATH;
        cd /it/wave/x86_64-linux/als/src;
        lsif-ada gnat/lsp_server.gpr > $CI_PROJECT_DIR/dump.lsif ||
        touch $CI_PROJECT_DIR/dump.lsif )

    - if [ ! -z ${FAILED+x} ]; then echo "There was at least one testcase failure" && exit 1; fi

  artifacts:
     when: always  #  Upload on errors too
     reports:
       junit: xunit_output.xml
       lsif: dump.lsif
