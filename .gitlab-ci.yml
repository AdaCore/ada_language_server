variables:
  # The common part of the URL for cloning from within a CI
  GIT_CLONE_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}

stages:
  - build_and_test
  - run_downstream_ci

.basic-setup:
  # Temporary: clone the specific branch of ci-fragments
  # TODO: remove the next 4 lines when this version of ci-fragments is available in the image
  - cd /tmp
  - git clone $GIT_CLONE_BASE/eng/it/ci-fragments -b topic/generic_ci_phase_2 --depth 1
  - export PATH=/tmp/ci-fragments:$PATH
  - cd -
  # Use generic_anod_ci here.
  - generic_anod_ci
  - cat /tmp/ci_env.sh
  - . /tmp/ci_env.sh

# Build and test with ANOD
# TODO: add a build and test based on Alire in parallel to this.
build_and_test:
  services:
    - image:sandbox
    - cpu:8
    - mem:16
  stage: build_and_test
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
    - if: $CI_COMMIT_BRANCH == 'master' && $CI_COMMIT_TITLE =~ /Merge branch.*/
    - if: $CI_COMMIT_BRANCH == 'edge' && $CI_COMMIT_TITLE =~ /Merge branch.*/
  script:
    - !reference [.basic-setup]

    # Build & test using anod
    - anod build als $ACI_TRACK_QUALIFIER --minimal

    # We pass --latest here because the vscode-extension will try to download
    # the Windows binary (it's a multi-platform extension), and this binary
    # might not be available right away.
    - anod build vscode-extension $ACI_TRACK_QUALIFIER --minimal --latest
    - anod test als $ACI_TRACK_QUALIFIER --minimal

    # TODO: it would be nice to have a simpler way of getting this info
    - BUILD_SPACE=`anod eval als --primitive test build_space_name $ACI_TRACK_QUALIFIER | tr -d "'"`
    - SB_BASE=$ANOD_DEFAULT_SANDBOX_DIR/x86_64-linux/$BUILD_SPACE

    # Process the report
    - e3-testsuite-report
      --failure-exit-code 1
      --xunit-output $CI_PROJECT_DIR/xunit_output.xml
      $SB_BASE/results/new/ || FAILED=true

    # Build the lsif report
    - anod install lsif-ada
    - ( cd $ANOD_DEFAULT_SANDBOX_DIR ;
      eval `anod printenv lsif-ada`;
      eval `anod printenv stable-gnat`;
      eval `anod printenv ada_libfswatch`;
      eval `anod printenv stable-templates_parser`;
      eval `anod printenv stable-langkit_support`;
      eval `anod printenv stable-libgpr2 --qualifier=bare`;
      eval `anod printenv stable-libadalang`;
      eval `anod printenv stable-libadalang-tools`;
      export GPR_PROJECT_PATH=` pwd `/x86_64-linux/als/src/subprojects/gnatdoc/gnat:$GPR_PROJECT_PATH;
      export GPR_PROJECT_PATH=` pwd `/x86_64-linux/als/src/subprojects/VSS/gnat:$GPR_PROJECT_PATH;
      cd $ANOD_DEFAULT_SANDBOX_DIR/x86_64-linux/als/src;
      lsif-ada gnat/lsp_server.gpr > $CI_PROJECT_DIR/dump.lsif 2>/dev/null ||
      touch $CI_PROJECT_DIR/dump.lsif )

    - if [ ! -z ${FAILED+x} ]; then echo "There was at least one testcase failure" && exit 1; fi

  artifacts:
    when: always #  Upload on errors too
    reports:
      junit: xunit_output.xml
      lsif: dump.lsif

.run_ci_common: &run_ci_common
  stage: run_downstream_ci
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
  trigger:
    strategy: depend
  inherit:
    variables: false
  variables:
    ACI_UPSTREAM_PROJECT_PATH: $CI_PROJECT_PATH
    ACI_UPSTREAM_REF_NAME: $CI_COMMIT_REF_NAME
    ACI_UPSTREAM_SOURCE_BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    ACI_UPSTREAM_TARGET_BRANCH: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME

run_gs_ci:
  <<: *run_ci_common
  trigger:
    project: eng/ide/gnatstudio
