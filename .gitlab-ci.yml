stages:
  - build_and_test
  - run_downstream_ci

.basic-setup:
  # Use generic_anod_ci here.
  - generic_anod_ci
  - cat /tmp/ci_env.sh
  - . /tmp/ci_env.sh

# Build and test with ANOD
# TODO: add a build and test based on Alire in parallel to this.
build_and_test:
  services:
    - image:systemgtk
    - cpu:8
  stage: build_and_test
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
  script:
    - !reference [.basic-setup]

    - echo -e "\e[0Ksection_start:`date +%s`:build_als[collapsed=true]\r\e[0Kanod build als"
    - anod build als $ACI_TRACK_QUALIFIER --minimal
    - echo -e "\e[0Ksection_end:`date +%s`:build_als\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:build_vscode[collapsed=true]\r\e[0Kanod build vscode-extension"
    # We pass --latest here because the vscode-extension will try to download
    # the Windows binary (it's a multi-platform extension), and this binary
    # might not be available right away.
    - anod build vscode-extension $ACI_TRACK_QUALIFIER --minimal --latest
    - echo -e "\e[0Ksection_end:`date +%s`:build_vscode\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:test_als[collapsed=true]\r\e[0Kanod test als"
    # Run ALS tests
    - anod test als $ACI_TRACK_QUALIFIER --minimal

    # TODO: it would be nice to have a simpler way of getting this info
    - ALS_BUILD_SPACE_NAME=`anod eval als --primitive test build_space_name $ACI_TRACK_QUALIFIER | tr -d "'"`
    - ALS_BUILD_SPACE=$ANOD_DEFAULT_SANDBOX_DIR/x86_64-linux/$ALS_BUILD_SPACE_NAME
    - echo -e "\e[0Ksection_end:`date +%s`:test_als\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:test_vscode[collapsed=true]\r\e[0Kanod test vscode-extension"
    # Run VSCode tests
    - anod test vscode-extension --qualifier=$ACI_TRACK_QUALIFIER --minimal
    - VSCODE_BUILD_SPACE_NAME=`anod eval --primitive test --qualifier=$ACI_TRACK_QUALIFIER vscode-extension build_space_name | tr -d "'"`
    - VSCODE_BUILD_SPACE=$ANOD_DEFAULT_SANDBOX_DIR/x86_64-linux/$VSCODE_BUILD_SPACE_NAME
    - echo -e "\e[0Ksection_end:`date +%s`:test_vscode\r\e[0K"

    # Job artifacts must be produced in the project directory, so we do it at
    # the end of the job to avoid changing Anod checkouts halfway through the
    # job and triggering useless rebuilds.
    - echo -e "\e[0Ksection_start:`date +%s`:prepare_artifacts[collapsed=true]\r\e[0KPrepare job artifacts"
    # Process the als test report
    - e3-testsuite-report
      --failure-exit-code 1
      --xunit-output $CI_PROJECT_DIR/als_xunit_output.xml
      $ALS_BUILD_SPACE/results/new/ || FAILED=true
    # Process the vscode-extension test report
    - e3-testsuite-report
      --failure-exit-code 1
      --xunit-output $CI_PROJECT_DIR/vscode_xunit_output.xml
      $VSCODE_BUILD_SPACE/results/new/ || FAILED=true
    # Include Anod logs
    - cp -r $ANOD_DEFAULT_SANDBOX_DIR/log $CI_PROJECT_DIR/anod-logs
    - echo -e "\e[0Ksection_end:`date +%s`:prepare_artifacts\r\e[0K"

    - if [ ! -z ${FAILED+x} ]; then echo "There was at least one testcase failure" && exit 1; fi

  artifacts:
    when: always #  Upload on errors too
    reports:
      junit: [als_xunit_output.xml, vscode_xunit_output.xml]
    paths:
      - anod-logs/

.run_ci_common: &run_ci_common
  stage: run_downstream_ci
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
      allow_failure: true
  trigger:
    strategy: depend
  inherit:
    variables: false
  variables:
    ACI_UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    ACI_UPSTREAM_MERGE_REQUEST_IID: $CI_MERGE_REQUEST_IID

run_gs_ci:
  <<: *run_ci_common
  trigger:
    project: eng/ide/gnatstudio
