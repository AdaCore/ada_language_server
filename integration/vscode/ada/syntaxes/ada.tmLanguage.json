{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Ada",
    "comment": "Ada grammar file",
    "scopeName": "source.ada",
    "fileTypes": ["adb", "adc", "ads"],
    "patterns": [
        {
            "name": "comment.line.ada",
            "begin": "--",
            "end": "[\\n\\r]",
            "patterns": [
                {
                    "include": "#gnatdoc_tag"
                }
            ]
        },
        {
            "name": "constant.numeric.ada",
            "patterns": [
                {
                    "include": "#based_literal"
                },
                {
                    "include": "#decimal_literal"
                }
            ]
        },
        {
            "name": "constant.character.ada",
            "match": "'.'"
        },
        {
            "name": "variable.other.constant.ada",
            "match": "\\b(?i:(null|True|False))\\b"
        },
        {
            "name": "keyword.other.ada",
            "match": "\\b(?i:(abort|abstract|all|array|at|begin|body|case|constant|declare|delta|digits|do|else|elsif|end|exception|for|generic|if|interface|is|limited|loop|new|of|others|overriding|package|private|protected|range|record|renames|return|reverse|select|separate|some|subtype|synchronized|tagged|task|then|type|use|when|while|with))\\b"
        },
        {
            "name": "keyword.control.ada",
            "match": "\\b(?i:(accept|delay|entry|exit|goto|pragma|raise|requeue|terminate|until))\\b"
        },
        {
            "name": "entity.name.operator.ada",
            "match": "\\b(?i:(abs|and|mod|not|or|rem|xor))\\b"
        },
        {
            "name": "storage.modifier.ada",
            "match": "\\b(?i:(access|aliased|in|out))\\b"
        },
        {
            "include": "#string-literal"
        },
        {
            "name": "entity.name.operator.assignment.ada",
            "match": ":="
        },
        {
            "name": "entity.name.operator.ada",
            "match": "=>|\\.\\.|\\*\\*|/=|>=|<=|<>|&|\\*|\\+|\\-|\\.|/|<|=|>|\\|"
        },
        {
            "name": "meta.declaration.subprogram.ada",
            "match": "(?i)(function|procedure)\\s+(?:((?:\\w|\\d|_)+)|(\".*\"))",
            "captures": {
                "1": { "name": "keyword.other.ada" },
                "2": { "name": "entity.name.function.ada" },
                "3": { "patterns": [{ "include": "#string-literal" }] }
            }
        },
        {
            "name": "meta.declaration.object.ada",
            "match": "\\b((?:\\w|\\d|_)+(?:\\s*,\\s*(?:\\w|\\d|_)+)*)\\s*(:(?!=))",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#object-identifier"
                        },
                        { "name": "punctuation.ada", "match": "," }
                    ]
                },
                "2": { "name": "punctuation.ada" }
            }
        },
        { "name": "punctuation.ada", "match": "[;,]" },
        {
            "include": "#identifier"
        }
    ],
    "repository": {
        "decimal_literal": {
            "name": "constant.numeric.ada",
            "match": "\\d[0-9_]*(\\.\\d[0-9_]*)?([eE]([-+])?\\d[0-9_]*)?",
            "captures": {
                "3": {
                    "name": "keyword.operator.plus.exponent"
                }
            }
        },
        "based_literal": {
            "name": "constant.numeric.ada",
            "match": "\\d[0-9_]*#[0-9a-fA-F][0-9a-fA-F_]*(\\.[0-9a-fA-F][0-9a-fA-F_]*)?#([eE][-+]?\\d[0-9_]*)?"
        },
        "string-literal": {
            "name": "string.quoted.double.ada",
            "begin": "\"",
            "end": "\"(?=[^\"])",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\"\""
                }
            ]
        },
        "identifier": {
            "name": "entity.name.label.ada",
            "match": "[\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}](\\p{Pc}?[\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}])*"
        },
        "object-identifier": {
            "name": "variable.name.ada",
            "match": "[\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}](\\p{Pc}?[\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}])*"
        },
        "gnatdoc_tag": {
            "match": "\\s*(@)(?:(description|format|group|noformat|private|return|summary)|(enum|exception|field|formal|image|param|value)\\s+(\\S*))",
            "captures": {
                "1": { "name": "punctuation.definition.tag.ada" },
                "2": { "name": "entity.name.tag.ada" },
                "3": { "name": "entity.name.tag.ada" },
                "4": { "name": "entity.name.variable.ada" }
            }
        }
    }
}
