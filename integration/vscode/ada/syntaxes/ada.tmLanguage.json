{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ada",
	"foldingStartMarker": "\\bbegin\\b",
	"foldingStopMarker": "\\bend\\b",
	"patterns": [
		{ "include": "#comment" },
		{ "include": "#import" },
      { "include": "#aspect" },
      { "include": "#exception_declaration" },
      { "include": "#raise_statement" },
		{ "include": "#assignment" },
		{ "include": "#attribute" },
		{ "include": "#goto" },
		{ "include": "#label" },
		{ "include": "#pragma" },
      { "include": "#punctuation" },
		{ "include": "#return" },
		{ "include": "#subroutine" },
		{ "include": "#type" },
		{ "include": "#keyword" },
		{ "include": "#value" }
	],
	"repository": {
		"aggregate": {
         "name": "meta.aggregate.ada",
         "begin": "\\(",
         "end": "\\)",
         "captures": {
            "0": {
               "patterns": [
                  { "include": "#punctuation" }
               ]
            }
         },
         "patterns": [
            { "include": "#argument" },
            { "include": "#attribute" },
            { "include": "#punctuation" }
         ]
		},
		"arguments": {
         "name": "meta.arguments.ada",
         "begin": "\\(",
         "end": "\\)",
         "captures": {
            "0": {
               "patterns": [
                  { "include": "#punctuation" }
               ]
            }
         },
         "patterns": [
            { "include": "#arguments" },
            { "include": "#argument" }
         ]
		},
		"argument": {
			"patterns": [
				{
					"name": "meta.argument.ada",
					"match": "(\\w|_)+\\s*=>\\s*(new\\s+)?(\\w|_)+('(\\w|_)+)?",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.positional-name.ada",
									"match": "\\b(\\w|_)+\\s*=>",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#punctuation" },
												{
													"name": "variable.parameter.ada",
													"match": "\\b(\\w|_)+\\b"
												}
											]
										}
									}
								},
								{ "include": "#value" },
								{ "include": "#attribute" },
								{ "include": "#keyword" }
							]
						}
					}
				},
				{
					"name": "meta.argument.ada",
					"match": "(\\w|_)+\\s*=>\\s*\"(\\\\.|[^\"])*\"",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.positional-name.ada",
									"match": "\\b(\\w|_)+\\s*=>",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#punctuation" },
												{
													"name": "variable.parameter.ada",
													"match": "\\b(\\w|_)+\\b"
												}
											]
										}
									}
								},
								{ "include": "#value" },
								{ "include": "#keyword" }
							]
						}
					}
				},
				{
					"name": "meta.argument.ada",
					"match": "\\b((\\w|_)+\\s*,\\s*)*(\\w|_)+\\s*:\\s*((not\\s+)?null\\s+)?access\\s+(constant\\s+)?(\\w|\\.|_)+(\\((\\\\.|[^\\)])*\\))?(\\s*:=\\s*(\\w|\\.|_|')+)?",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.type.annotation.access.ada",
									"match": ":\\s*((not\\s+)?null\\s+)?access\\s+(constant\\s+)?(\\w|\\.|_)+(\\((\\\\.|[^\\)])*\\))?(\\s*:=\\s*(\\w|\\.|_|')+)?",
									"captures": {
										"0": {
											"patterns": [
												{
													"name": "meta.type.annotation.default.ada",
													"match": ":=\\s*(\\w|\\.|_|')+\\b",
													"captures": {
														"0": {
															"patterns": [
																{ "include": "#punctuation" },
																{ "include": "#attribute" },
																{ "include": "#value" }
															]
														}
													}
												},
												{
													"name": "storage.type.ada",
													"match": "(?i)\\b(function|procedure)\\b"
												},
												{ "include": "#arguments" },
												{ "include": "#attribute" },
												{ "include": "#keyword" },
												{ "include": "#punctuation" },
												{ "include": "#subtype_mark" }
											]
										}
									}
								},
								{
									"name": "variable.parameter.ada",
									"match": "\\b((\\w|_)+\\s*,\\s*)*(\\w|_)+\\b",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#punctuation" }
											]
										}
									}
								}
							]
						}
					}
				},
				{
					"name": "meta.argument.ada",
					"match": "\\b((\\w|_)+\\s*,\\s*)*(\\w|_)+\\s*:\\s*(aliased\\s+)?(in\\s+)?(out\\s+)?(\\w|\\.|_)+('(\\w|_)+)?(\\s*:=\\s*(\\w|\\.|_|')+)?",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.type.annotation.ada",
									"match": ":\\s*(aliased\\s+)?(in\\s+)?(out\\s+)?(\\w|\\.|_)+('(\\w|_)+)?(\\s*:=\\s*(\\w|\\.|_|')+)?",
									"captures": {
										"0": {
											"patterns": [
												{
													"name": "meta.type.annotation.default.ada",
													"match": ":=\\s*(\\w|\\.|_|')+\\b",
													"captures": {
														"0": {
															"patterns": [
																{ "include": "#punctuation" },
																{ "include": "#attribute" },
																{ "include": "#value" }
															]
														}
													}
												},
												{ "include": "#attribute" },
												{ "include": "#keyword" },
												{ "include": "#punctuation" },
												{ "include": "#subtype_mark" }
											]
										}
									}
								},
								{
									"name": "variable.parameter.ada",
									"match": "\\b((\\w|_)+\\s*,\\s*)*(\\w|_)+\\b",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#punctuation" }
											]
										}
									}
								}
							]
						}
					}
				},
				{
					"name": "meta.argument.numeric.ada",
					"match": "([0-9]+#)?([0-9A-Fa-f]|_)+#?",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#value" }
							]
						}
					}
				},
				{
					"name": "meta.argument.ada",
					"match": "\\b(\\w|\\.|_)+\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#value" },
								{ "include": "#keyword" }
							]
						}
					}
				},
				{
					"name": "meta.argument.ada",
					"match": "'.'",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#value" }
							]
						}
					}
				},
				{
					"name": "meta.argument.ada",
					"match": "\".*\"",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#value" }
							]
						}
					}
				}
			]
		},
		"aspect": {
         "name": "meta.aspect.ada",
         "begin": "(?i)\\b(with)(?!\\s+(procedure|function))\\b",
         "end": "(?i)(?:\\b(is)\\b|(;))",
         "beginCaptures": {
            "1": { "name": "keyword.ada" }
         },
         "endCaptures": {
            "1": { "name": "keyword.ada" },
            "2": { "name": "punctuation.ada" }
         },
         "patterns": [
            { "include": "#comment" },
            {
               "name": "keyword.control.directive.ada",
               "match": "(?i)\\b(address|alignment|all_calls_remote|asynchronous|atomic|atomic_components|attach_handler|bit_order|component_size|convention|constant_indexing|cpu|default_component_value|default_iterator|default_storage_pool|default_value|dispatching_domain|dynamic_predicate|elaborate_body|export|external_name|external_tag|implicit_dereference|import|independent|independent_components|inline|input|iterator_element|interrupt_handler|interrupt_priority|link_name|machine_radix|no_return|output|pack|post|pre|preelaborate|priority|pure|read|relative_deadline|remote_call_interface|remote_types|size|shared_passive|small|static_predicate|storage_size|storage_pool|stream_size|synchronization|type_invariant|unchecked_union|variable_indexing|volatile|volatile_components|write)\\b"
            },
            {
               "name": "keyword.control.directive.ada",
               "match": "(?i)\\b(ada_2005|ada_2012|favor_top_level|inline_always|object_size|persistent_bss|pure_function|remote_access_type|shared|suppress_debug_info|test_case|universal_aliasing|unmodified|unreferenced|unreferenced_objects|value_size|warnings)\\b"
            },
            { "include": "#attribute" },
            { "include": "#keyword" },
            { "include": "#value" },
            { "include": "#punctuation" }
         ]
		},
		"assignment": {
			"patterns": [
				{
					"name": "meta.assignment.constant.ada",
					"match": "\\b((\\w|_)+\\s*,\\s*)*(\\w|_)+\\s*:\\s*constant(\\s+(\\w|\\.|_)+('(\\w|_)+)?)?\\s*:=.*;",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.type.annotation.ada",
									"match": "(?i):\\s*constant(\\s+(\\w|\\.|_)+('(\\w|_)+)?)?\\b",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#attribute" },
												{ "include": "#keyword" },
												{ "include": "#subtype_mark" }
											]
										}
									}
								},
								{
									"name": "meta.assignment.expression.ada",
									"begin": ":=",
									"end": ";",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#punctuation" }
											]
										}
									},
									"patterns": [
										{ "include": "#attribute" },
										{ "include": "#value" },
										{ "include": "#type" },
										{ "include": "#punctuation" },
										{ "include": "#keyword" }
									]
								},
								{
									"name": "variable.name.ada",
									"match": "\\b\\w((\\w|\\d|_)*\\w)?\\b"
								}
							]
						}
					}
				},
				{
					"name": "meta.assignment.variable.ada",
					"match": "\\b((\\w|_)+\\s*,\\s*)*(\\w|_)+\\s*:\\s*(access\\s+|aliased\\s+)?(\\w|\\.|_)+('(\\w|_)+)?(\\s*:=.*)?;",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.type.annotation.ada",
									"match": ":\\s*(access\\s+|aliased\\s+)?(\\w|\\.|_)+('(\\w|_)+)?\\b",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#attribute" },
												{ "include": "#keyword" },
												{ "include": "#subtype_mark" }
											]
										}
									}
								},
								{
									"name": "meta.assignment.expression.ada",
									"begin": ":=",
									"end": ";",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#punctuation" }
											]
										}
									},
									"patterns": [
										{ "include": "#attribute" },
										{ "include": "#value" },
										{ "include": "#type" },
										{ "include": "#punctuation" },
										{ "include": "#keyword" }
									]
								},
								{
									"name": "variable.name.ada",
									"match": "\\b\\w((\\w|\\d|_)*\\w)?\\b"
								}
							]
						}
					}
				}
			]
		},
		"attribute": {
         "name": "meta.attribute.ada",
         "match": "(')((?:\\w|\\d|_)+)\\b",
         "captures": {
            "1": { "name": "punctuation.ada" },
            "2": { "name": "entity.other.attribute-name.ada" }
         }
      },
      "based_literal": {
         "name": "constant.numeric.ada",
         "match": "(?i)(\\d(?:(_)?\\d)*#)[0-9a-f](?:(_)?[0-9a-f])*(?:(\\.)[0-9a-f](?:(_)?[0-9a-f])*)?(#)([eE](?:\\+|\\-)?\\d(?:_?\\d)*)?",
         "captures": {
            "1": { "name": "constant.numeric.base.ada" },
            "2": { "name": "punctuation.ada" },
            "3": { "name": "punctuation.ada" },
            "4": { "name": "punctuation.radix-point.ada" },
            "5": { "name": "punctuation.ada" },
            "6": { "name": "constant.numeric.base.ada" },
            "7": { "patterns": [ { "include": "#exponent_part" } ] }
         }
      },
		"case": {
         "name": "meta.control.case.ada",
         "begin": "(?i)\\bcase\\s+(\\w|\\.|_)+\\s+is\\b",
         "end": "(?i)\\bend\\s+case;",
         "captures": {
            "0": {
               "patterns": [
                  { "include": "#keyword" },
                  { "include": "#punctuation" },
                  {
                     "name": "variable.name.ada",
                     "match": "\\b(\\w|\\.|_)+\\b"
                  }
               ]
            }
         },
         "patterns": [
            {
               "name": "meta.control.case.when.ada",
               "match": "(?i)\\bwhen\\s+((\\w|_)+\\s*\\|\\s*)*(\\w|_)+\\s*=>",
               "captures": {
                  "0": {
                     "patterns": [
                        { "include": "#keyword" },
                        { "include": "#punctuation" }
                     ]
                  }
               }
            },
            { "include": "#property" },
            { "include": "#punctuation" }
         ]
      },
      "character_literal": {
			"name": "string.quoted.single.ada",
			"match": "'.'",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "punctuation.definition.string.ada",
							"match": "'"
						}
					]
				}
			}
		},
		"comment": {
			"patterns": [
            { "include": "#comment-section" },
            { "include": "#comment-doc" },
            { "include": "#comment-line" }
			]
      },
      "comment-doc": {
         "name": "comment.block.documentation.gnatdoc",
         "match": "(--)(@)(\\w+)\\s+(.*)$",
         "captures": {
            "1": { "name": "comment.line.double-dash.ada" },
            "2": { "name": "punctuation.definition.tag.gnatdoc" },
            "3": { "name": "entity.name.tag.gnatdoc" },
            "4": { "name": "comment.line.double-dash.ada" }
         }
      },
      "comment-line": {
         "name": "comment.line.double-dash.ada",
         "match": "--.*$"
      },
      "comment-section": {
         "name": "comment.line.double-dash.ada",
         "match": "--\\s*((?:\\w|\\d|\\.|_)+)\\s*--$",
         "captures": {
            "1": { "name": "entity.name.section.ada" }
         }
      },
      "decimal_literal": {
			"name": "constant.numeric.ada",
			"match": "\\d(?:(_)?\\d)*(?:(\\.)\\d(?:(_)?\\d)*)?([eE](?:\\+|\\-)?\\d(?:_?\\d)*)?",
			"captures": {
            "1": { "name": "punctuation.ada" },
            "2": { "name": "punctuation.radix-point.ada"},
            "3": { "name": "punctuation.ada" },
				"4": { "patterns": [ { "include": "#exponent_part" } ] }
			}
		},
		"discriminant": {
			"patterns": [
				{
					"name": "meta.type.array.index.ada",
					"match": "\\((\\w|\\d|\\.|_)+\\s*\\.\\.\\s*(\\w|\\d|\\.|_)+\\)",
					"captures": {
						"0" : {
							"patterns": [
								{ "include": "#value" },
								{
									"name": "variable.ada",
									"match": "\\b(\\w|\\.|_)+\\b"
								},
								{ "include": "#punctuation" }
							]
						}
					}
				},
				{
					"name": "meta.type.discriminant.ada",
					"match": "\\((\\\\.|[^)])*\\)",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.argument.ada",
									"match": "<>",
									"captures": {
										"0": {
											"patterns": [
												{
													"name": "keyword.modifier.unknown.ada",
													"match": "<>"
												}
											]
										}
									}
								},
								{ "include": "#argument" },
								{ "include": "#punctuation" }
							]
						}
					}
				}
			]
		},
		"exception_declaration": {
         "name": "meta.declaration.exception.ada",
         "match": "(?i)\\b((?:\\w|\\d|_)+)\\s*(:)\\s*(exception)\\b",
         "captures": {
            "1": { "name": "entity.name.exception.ada" },
            "2": { "name": "punctuation.ada" },
            "3": { "name": "entity.name.type.ada" }
         }
      },
      "exponent_part": {
         "match": "([eE])(\\+|\\-)?\\d(?:(_)?\\d)*",
         "captures": {
            "1": { "name": "punctuation.exponent-mark.ada" },
            "2": { "name": "keyword.operator.unary.ada" },
            "3": { "name": "punctuation.ada" }
         }
      },
      "expression": {
         "name": "meta.expression.ada"
      },
		"goto": {
         "name": "meta.statement.goto.ada",
         "match": "(?i)\\b(goto)\\s+((?:\\w|\\d|_)+)\\s*(;)",
         "captures": {
            "1": { "name": "keyword.control.goto.ada" },
            "2": { "name": "entity.name.label.ada" },
            "3": { "name": "punctuation.ada" }
         }
		},
		"import": {
			"patterns": [
				{
					"name": "meta.import.package.ada",
					"match": "(?i)\\bwith\\s+(\\w|\\.|_)+(\\s*,\\s*(\\w|\\.|_)+)?\\s*;",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#keyword" },
								{ "include": "#punctuation" }
							]
						}
					}
				},
				{
					"name": "meta.import.subroutine.ada",
					"match": "(?i)\\bwith(\\\\.|[^;])*;",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#subroutine" },
								{ "include": "#keyword" }
							]
						}
					}
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.ada",
					"match": "(?i)\\b(abort|abs|accept|all|and|at|begin|body|declare|delay|end|entry|exception|function|generic|in|is|mod|new|not|null|of|or|others|out|overriding|package|pragma|procedure|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|then|type|use|when|with|xor)\\b"
				},
				{
					"name": "keyword.control.ada",
					"match": "(?i)\\b(case|do|else|elsif|exit|for|goto|if|loop|raise|return|terminate|until|while)\\b"
				},
				{
					"name": "storage.modifier.ada",
					"match": "(?i)\\b(abstract|access|aliased|array|constant|delta|digits|interface|limited|protected|synchronized|tagged|task)\\b"
				},
				{
					"name": "storage.visibility.ada",
					"match": "(?i)\\b(private)\\b"
				},
				{
					"name": "keyword.modifier.unknown.ada",
					"match": "<>"
				},
				{
					"name": "keyword.operator.arithmetic.ada",
					"match": "(\\+|-|\\*|/)"
				},
				{
					"name": "keyword.operator.assignment.ada",
					"match": ":="
				},
				{
					"name": "keyword.operator.logic.ada",
					"match": "(=|/=|<|>|<=|>=)"
				},
				{
					"name": "keyword.operator.concatenation.ada",
					"match": "\\&"
				}
			]
		},
		"label": {
         "name": "meta.label.ada",
         "match": "(<<)((?:\\w|\\d|_)+)(>>)",
         "captures": {
            "1": { "name": "punctuation.label.ada" },
            "2": { "name": "entity.name.label.ada" },
            "3": { "name": "punctuation.label.ada" }
         }
		},
		"pragma": {
			"name": "meta.pragma.ada",
			"begin": "(?i)\\b(pragma)\\s+((?:\\w|\\d|_)+)\\b",
         "end": "(;)",
         "beginCaptures": {
            "1": { "name": "keyword.ada" },
            "2": { "name": "keyword.control.directive.ada" }
         },
         "endCaptures": {
            "1": { "name": "punctuation.ada" }
         },
			"patterns": [
				{ "include": "#arguments" }
			]
		},
		"property": {
			"patterns": [
				{
					"name": "meta.property.ada",
					"match": "\\b(\\w|_)+\\s*:\\s*(access\\s+(all\\s+|constant\\s+)?|aliased\\s+|constant\\s+)?(\\w|\\.|_)+('\\w+)?(\\s*\\((\\\\.|[^)])*\\))?(\\s*range\\s+\\S+\\s*\\.\\.\\s*\\S+)?\\s*(:=\\s*((\\w|\\d|\\.|_)|\".*\"|'.')+\\s*)?;",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.type.annotation.ada",
									"match": ":\\s*(access\\s+(all\\s+|constant\\s+)?|aliased\\s+|constant\\s+)?(\\w|\\.|_)+('\\w+)?(\\s*\\((\\\\.|[^)])*\\))?(\\s*range\\s+\\S+\\s*\\.\\.\\s*\\S+)?",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#attribute" },
												{ "include": "#keyword" },
												{
													"match": "\\b((?:\\w|\\.|_)+)(\\s*\\((\\\\.|[^)])*\\))?",
													"captures": {
                                          "1": { "patterns": [ { "include": "#subtype_mark" } ] },
														"2": { "patterns": [ { "include": "#discriminant" } ] }
													}
												}
											]
										}
									}
								},
								{
									"name": "meta.property.default.ada",
									"match": ":=\\s*((\\w|\\d|\\.|_)|\".*\"|'.')+('\\w+)?\\s*;",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#attribute" },
												{ "include": "#value" }
											]
										}
									}
								},
								{
									"name": "variable.property.ada",
									"match": "\\b(\\w|_)+\\b"
								}
							]
						}
					}
				},
				{
					"name": "meta.property.ada",
					"match": "\\b(\\w|_)+\\s*:\\s*(access\\s+(all\\s+|constant\\s+)?|aliased\\s+|constant\\s+)?(\\w|\\.|_)+('\\w+)?(\\s*\\((\\\\.|[^)])*\\))?(\\s*range\\s+\\S+\\s*\\.\\.\\s*\\S+)?\\s*(:=\\s*\\((\\\\.|[^)])*\\))?;",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.type.annotation.ada",
									"match": ":\\s*(access\\s+(all\\s+|constant\\s+)?|aliased\\s+|constant\\s+)?(\\w|\\.|_)+('\\w+)?(\\s*\\((\\\\.|[^)])*\\))?(\\s*range\\s+\\S+\\s*\\.\\.\\s*\\S+)?",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#attribute" },
												{ "include": "#keyword" },
												{
													"match": "\\b((?:\\w|\\.|_)+)(\\s*\\((\\\\.|[^)])*\\))?",
													"captures": {
                                          "1": { "patterns": [ { "include": "#subtype_mark" } ] },
														"2": { "patterns": [ { "include": "#discriminant" } ] }
													}
												}
											]
										}
									}
								},
								{
									"name": "meta.property.default.ada",
									"match": ":=\\s*\\((\\\\.|[^)])*\\);",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#aggregate" }
											]
										}
									}
								},
								{
									"name": "variable.property.ada",
									"match": "\\b(\\w|_)+\\b"
								}
							]
						}
					}
				}
			]
		},
      "punctuation": {
         "patterns": [
            {
               "name": "punctuation.delimiter.ada",
               "match": "(=>|\\||'|[()]|\\.|,)"
            },
            {
               "name": "punctuation.underline.ada",
               "match": "_"
            },
            {
               "name": "punctuation.terminator.ada",
               "match": ";"
            }
         ]
      },
      "raise_statement": {
         "name": "meta.statement.raise.ada",
         "patterns": [
            {
               "match": "(?i)\\b(raise)\\s*(;)",
               "captures": {
                  "1": { "name": "keyword.control.ada" },
                  "2": { "name": "punctuation.ada" }
               }
            },
            {
               "begin": "(?i)\\braise\\b",
               "end": ";",
               "beginCaptures": {
                  "0": { "name": "keyword.control.ada" }
               },
               "endCaptures": {
                  "0": { "name": "punctuation.ada" }
               },
               "patterns": [
                  {
                     "begin": "(?i)\\bwith\\b",
                     "end": "(?=;)",
                     "beginCaptures": {
                        "0": { "name": "keyword.ada" }
                     },
                     "patterns": [
                        { "include": "#expression" }
                     ]
                  },
                  {
                     "name": "entity.name.exception.ada",
                     "match": "\\b(\\w|\\d|_)+\\b"
                  }
               ]
            }
         ]
      },
      "raise_expression": {
         "name": "meta.expression.raise.ada",
         "begin": "(?i)\\braise\\b",
         "end": "(?=;)",
         "beginCaptures": {
            "0": { "name": "keyword.control.ada" }
         },
         "patterns": [
            {
               "begin": "(?i)\\bwith\\b",
               "end": "(?=(;|\\))",
               "beginCaptures": {
                  "0": { "name": "keyword.ada" }
               },
               "patterns": [
                  { "include": "#expression" }
               ]
            },
            {
               "name": "entity.name.exception.ada",
               "match": "\\b(\\w|\\d|_)+\\b"
            }
         ]
      },
		"return": {
         "name": "meta.return-block.ada",
         "begin": "(?i)\\breturn\\s+(\\w|\\.|_)+\\s*:\\s*(\\w|\\.|_)+\\s+do\\b",
         "end": "(?i)\\bend\\s+return;?",
         "captures": {
            "0": {
               "patterns": [
                  { "include": "#argument" },
                  { "include": "#keyword" }
               ]
            }
         },
         "patterns": [
            { "include": "#keyword" }
         ]
      },
      "string_literal": {
			"name": "string.quoted.double.ada",
			"match": "(\").*?(\")",
			"captures": {
				"1": {
					"name": "punctuation.definition.string.ada"
				},
				"2": {
					"name": "punctuation.definition.string.ada"
				}
			}
		},
		"subroutine": {
			"patterns": [
				{
					"name": "meta.procedure.ada",
					"match": "(?i)\\bprocedure\\s+((\\w|_)+\\.)*(\\w|_)+(\\s*\\((\\\\.|[^\\)])*\\))?(\\s+renames\\s+(\\w|\\.|_)+)?(\\s+with\\s+(\\\\.|[^;])*)?\\s*(is|;)",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.rename.ada",
									"match": "\\brenames\\s+(\\w|\\.|_)+\\b",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#keyword" },
												{
													"name": "entity.name.function.ada",
													"match": "\\b(\\w|\\.|_)+\\b"
												}
											]
										}
									}
								},
								{ "include": "#aspect" },
								{ "include": "#keyword" },
								{ "include": "#arguments" },
								{
									"name": "entity.name.procedure.ada",
									"match": "\\b(\\w|_)+\\b"
								}
							]
						}
					}
				},
				{
					"name": "meta.function.ada",
					"match": "(?i)\\bfunction\\s+((\\w|_)+\\.)*(\\w|_)+(\\s*\\((\\\\.|[^\\)])*\\))?\\s+return\\s+(\\w|\\.|_)+('Class)?(\\s+renames\\s+(\\w|\\.|_)+('(\\w|_)+)?)?(\\s+with\\s+(\\\\.|[^;])*)?\\s*(is|;)",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.return-type.ada",
									"match": "\\breturn\\s+(\\w|\\.|_)+\\b",
									"captures": {
										"0": {
											"patterns": [
												{
													"name": "keyword.ada",
													"match": "(?i)\\breturn\\b"
												},
												{ "include": "#subtype_mark" }
											]
										}
									}
								},
								{
									"name": "meta.rename.ada",
									"match": "\\brenames\\s+(\\w|\\.|_)+('(\\w|_)+)?\\b",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#attribute" },
												{ "include": "#keyword" },
												{
													"name": "entity.name.function.ada",
													"match": "\\b(\\w|\\.|_)+\\b"
												}
											]
										}
									}
								},
								{ "include": "#attribute" },
								{ "include": "#aspect" },
								{ "include": "#keyword" },
								{ "include": "#arguments" },
								{
									"name": "entity.name.function.ada",
									"match": "\\b(\\w|_)+\\b"
								}
							]
						}
					}
				},
				{
					"name": "meta.function.expression.ada",
					"match": "(?i)\\bfunction\\s+(\\w|_)+(\\s*\\((\\\\.|[^\\)])*\\))?\\s+return\\s+(\\w|\\.|_)+('Class)?\\s+is\\s+\\((\\\\.|[^)])*\\)\\s*(is|;)",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.return-type.ada",
									"match": "\\breturn\\s+(\\w|\\.|_)+\\b",
									"captures": {
										"0": {
											"patterns": [
												{
													"name": "keyword.ada",
													"match": "(?i)\\breturn\\b"
												},
                                    { "include": "#subtype_mark" }
											]
										}
									}
								},
								{ "include": "#attribute" },
								{ "include": "#aspect" },
								{ "include": "#keyword" },
								{ "include": "#arguments" },
								{
									"name": "entity.name.function.ada",
									"match": "\\b(\\w|_)+\\b"
								}
							]
						}
					}
				},
				{
					"name": "meta.instantiation.ada",
					"match": "(?i)\\b(procedure|function)\\s+(\\w|_)+\\s+is\\s+new\\s+(\\w|\\.|_)+(\\s*\\((\\\\.|[^\\)])*\\))?(\\s+with\\s+(\\\\.|[^;])*)?",
					"captures": {
						"0": {
							"patterns": [
									{ "include": "#aspect" },
									{ "include": "#keyword" },
									{ "include": "#arguments" },
									{
										"name": "entity.name.function.ada",
										"match": "\\b(\\w|\\.|_)+\\b"
									}
							]
						}
					}
				},
				{
					"name": "meta.operator.ada",
					"match": "(?i)\\bfunction\\s+\"..?.?\"\\s*\\((\\\\.|[^\\)])*\\)\\s+return\\s+(\\w|\\.|_)+('Class)?(\\s+renames\\s+(\\w|\\.|_)+)?(\\s+with\\s+(\\\\.|[^;])*)?\\s*(is|;)",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.return-type.ada",
									"match": "\\breturn\\s+(\\w|\\.|_)+\\b",
									"captures": {
										"0": {
											"patterns": [
												{
													"name": "keyword.ada",
													"match": "(?i)\\breturn\\b"
												},
												{ "include": "#subtype_mark" }
											]
										}
									}
								},
								{
									"name": "meta.rename.ada",
									"match": "\\brenames\\s+(\\w|\\.|_)+\\b",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#keyword" },
												{
													"name": "entity.name.function.ada",
													"match": "\\b(\\w|\\.|_)+\\b"
												}
											]
										}
									}
								},
								{ "include": "#attribute" },
								{ "include": "#aspect" },
								{ "include": "#arguments" },
								{ "include": "#keyword" },
								{
									"name": "entity.name.operator.ada",
									"match": "\"..?.?\""
								}
							]
						}
					}
				},
				{
					"name": "meta.operator.ada",
					"match": "(?i)\\bend\\s+\"..?.?\"",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "entity.name.operator.ada",
									"match": "\"..?.?\""
								}
							]
						}
					}
				},
				{
					"name": "meta.operator.expression.ada",
					"match": "(?i)\\bfunction\\s+\"..?.?\"(\\s*\\((\\\\.|[^\\)])*\\))?\\s+return\\s+(\\w|\\.|_)+('Class)\\s+is\\s+\\((\\\\.|[^)])*\\)\\s*(is|;)",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.return-type.ada",
									"match": "\\breturn\\s+(\\w|\\.|_)+\\b",
									"captures": {
										"0": {
											"patterns": [
												{
													"name": "keyword.ada",
													"match": "(?i)\\breturn\\b"
												},
												{ "include": "#subtype_mark" }
											]
										}
									}
								},
								{ "include": "#attribute" },
								{ "include": "#aspect" },
								{ "include": "#keyword" },
								{ "include": "#arguments" },
								{
									"name": "entity.name.operator.ada",
									"match": "\"..?.?\""
								}
							]
						}
					}
				},
				{
					"name": "meta.operator.instantiation.ada",
					"match": "(?i)\\bfunction\\s+\"..?.?\"(\\s*\\((\\\\.|[^\\)])*\\))?\\s+is\\s+new\\s+(\\w|\\.|_)+\\((\\\\.|[^\\)])*\\)(\\s+with\\s+(\\\\.|[^;])*)?\\s*(is|;)",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.instantiation.ada",
									"match": "(?i)\\bis\\s+new\\s+(\\w|\\.|_)+(\\((\\\\.|[^\\)])*\\))?",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#keyword" },
												{ "include": "#punctuation" }
											]
										}
									}
								},
								{ "include": "#aspect" },
								{ "include": "#arguments" },
								{ "include": "#keyword" },
								{
									"name": "entity.name.operator.ada",
									"match": "\"..?.?\""
								}
							]
						}
					}
				}
			]
      },
      "subtype_mark": {
			"name": "entity.name.type.ada",
         "match": "\\b(?:\\w|\\d|\\.|_)+\\b"
		},
		"type": {
			"patterns": [
				{
					"name": "meta.type.declaration.record.ada",
					"begin": "(?i)\\btype\\s+(\\w|_)+(\\s*\\(.*\\))?\\s+is\\s+((abstract\\s+)?tagged\\s+)?(limited\\s+)?record\\b",
					"end": "(?i)\\bend\\s+record\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#discriminant" },
								{ "include": "#keyword" },
								{ "include": "#subtype_mark" }
							]
						}
					},
					"patterns": [
						{ "include": "#comment" },
						{ "include": "#property" },
						{ "include": "#case" }
					]
				},
				{
					"name": "meta.type.declaration.record.ada",
					"match": "(?i)\\btype\\s+(\\w|_)+(\\s*\\(.*\\))?\\s+is\\s+(abstract\\s+)?new\\s+(\\w|\\.|_)+(\\s+and\\s+(\\w|\\.|_)+)?\\s+with\\s+(limited\\s+)?null\\s+record;",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#discriminant" },
								{ "include": "#keyword" },
								{ "include": "#subtype_mark" }
							]
						}
					}
				},
				{
					"name": "meta.type.declaration.record.ada",
					"begin": "(?i)\\btype\\s+(\\w|_)+(\\s*\\(.*\\))?\\s+is\\s+(abstract\\s+)?new\\s+(\\w|\\.|_)+(\\s+and\\s+(\\w|\\.|_)+)?\\swith\\s+(limited\\s+)?record\\b",
					"end": "(?i)\\bend\\s+record\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#discriminant" },
								{ "include": "#keyword" },
								{ "include": "#subtype_mark" }
							]
						}
					},
					"patterns": [
						{ "include": "#property" },
						{ "include": "#case" }
					]
				},
				{
					"name": "meta.type.declaration.array.ada",
					"match": "(?i)\\btype\\s+(\\w|_)+\\s+is\\s+array\\s*\\(.*\\)\\s*of\\s+(access\\s+((all|constant)\\s+)?|aliased\\s+)?(\\w|\\.|_)+\\b",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "meta.type.declaration.array.index.ada",
									"match": "\\(.*\\)",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#keyword" },
												{ "include": "#subtype_mark" }
											]
										}
									}
								},
								{
									"name": "meta.type.declaration.array.of.ada",
									"match": "(?i)\\bof\\s+(\\w|\\.|_)+\\b",
									"captures": {
										"0": {
											"patterns": [
												{ "include": "#keyword" },
												{ "include": "#subtype_mark" }
											]
										}
									}
								},
								{ "include": "#keyword" },
								{ "include": "#subtype_mark" }
							]
						}
					}
				},
				{
					"name": "meta.type.declaration.access.ada",
					"match": "(?i)\\btype\\s+(\\w|_)+\\s+is\\s+access(\\s+all)?\\s+(\\w|\\.|_)+\\b",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "storage.modifier.ada",
									"match": "\\baccess(\\s+all)?\\b"
								},
								{ "include": "#keyword" },
								{ "include": "#subtype_mark" }
							]
						}
					}
				},
				{
					"name": "meta.type.declaration.ada",
					"match": "(?i)\\btype\\s+(\\w|_)+(\\s*\\(.*\\))?\\s+is(\\s+(abstract\\s+)?new\\s+(\\w|\\.|_)+(\\s+and\\s+(\\w|\\.|_)+)?)?\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#discriminant" },
								{ "include": "#keyword" },
								{ "include": "#subtype_mark" }
							]
						}
					}
				},
				{
					"name": "meta.type.declaration.subtype.ada",
					"match": "(?i)\\bsubtype\\s+(\\w|_)+\\s+is\\s+(\\w|\\.|_)+(\\s+with\\s+(\\\\.|[^;])*)?",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#aspect" },
								{ "include": "#keyword" },
								{ "include": "#subtype_mark" }
							]
						}
					}
				},
				{
					"name": "meta.type.aggregate.ada",
					"match": "\\b(\\w|\\.|_)+'\\(.*\\)",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#aggregate" },
								{ "include": "#subtype_mark" }
							]
						}
					}
				}
			]
		},
		"value": {
			"patterns": [
				{ "include": "#based_literal" },
				{ "include": "#decimal_literal" },
				{ "include": "#character_literal" },
				{ "include": "#string_literal" }
			]
		}
	},
	"scopeName": "source.ada"
}
