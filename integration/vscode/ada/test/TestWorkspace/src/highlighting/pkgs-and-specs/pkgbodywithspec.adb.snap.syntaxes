>package body PkgBodyWithSpec is
#^^^^^^^ source.ada keyword.other.ada
#       ^ source.ada
#        ^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada keyword.other.ada
>   Global1 : Integer := 0;
#^^^ source.ada
#   ^^^^^^^ source.ada entity.name.label.ada
#          ^^^ source.ada
#             ^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
#                       ^ source.ada
#                        ^ source.ada constant.numeric.ada
#                         ^^ source.ada
>
>   procedure Proc1 (Arg1, Arg2 : Integer) is
#^^^ source.ada
#   ^^^^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^ source.ada entity.name.label.ada
#                  ^^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^^^ source.ada entity.name.label.ada
#                              ^^^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^^ source.ada
#                                          ^^ source.ada keyword.other.ada
>      Y : Integer := Arg1 + Arg2 + Global1;
#^^^^^^ source.ada
#      ^ source.ada entity.name.label.ada
#       ^^^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.assignment.ada
#                    ^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^ source.ada
#                            ^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^ source.ada
#                                   ^^^^^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      null;
#^^^^^^ source.ada
#      ^^^^ source.ada variable.other.constant.ada
#          ^^ source.ada
>   end Proc1;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^ source.ada entity.name.label.ada
#            ^^ source.ada
>
>   function Expr_Fct (Arg1, Arg2 : Integer) return Integer
#^^^ source.ada
#   ^^^^^^^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^^ source.ada
#                      ^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^ source.ada
#                            ^^^^ source.ada entity.name.label.ada
#                                ^^^ source.ada
#                                   ^^^^^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
#                                            ^^^^^^ source.ada keyword.other.ada
#                                                  ^ source.ada
#                                                   ^^^^^^^ source.ada entity.name.label.ada
>   is (Arg1 + Arg2 + Global1);
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
#     ^^ source.ada
#       ^^^^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^ source.ada entity.name.operator.ada
#             ^ source.ada
#              ^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^^^ source.ada entity.name.label.ada
#                            ^^^ source.ada
>
>   procedure Proc2 (Arg1, Arg2 : Integer) is
#^^^ source.ada
#   ^^^^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^ source.ada entity.name.label.ada
#                  ^^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^^^ source.ada entity.name.label.ada
#                              ^^^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^^ source.ada
#                                          ^^ source.ada keyword.other.ada
>      function Nested_Expr_Fct (Arg3, Arg4 : Integer) return Integer
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada entity.name.label.ada
#                                          ^^^ source.ada
#                                             ^^^^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
#                                                      ^^^^^^ source.ada keyword.other.ada
#                                                            ^ source.ada
#                                                             ^^^^^^^ source.ada entity.name.label.ada
>      is (Arg1 + Arg2 + Arg3 + Arg4 + Global1);
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^ source.ada entity.name.operator.ada
#                ^ source.ada
#                 ^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^ source.ada
#                               ^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^^^^ source.ada entity.name.label.ada
#                                             ^^^ source.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      null;
#^^^^^^ source.ada
#      ^^^^ source.ada variable.other.constant.ada
#          ^^ source.ada
>   end Proc2;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^ source.ada entity.name.label.ada
#            ^^ source.ada
>
>end PkgBodyWithSpec;
#^^^ source.ada keyword.other.ada
#   ^ source.ada
#    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^^ source.ada
>