>------------------------------------------------------------------------------
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>--                         Language Server Protocol                         --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>--                                                                          --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>--                     Copyright (C) 2018-2019, AdaCore                     --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>--                                                                          --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- This is free software;  you can redistribute it  and/or modify it  under --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- terms of the  GNU General Public License as published  by the Free Soft- --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- sion.  This software is distributed in the hope  that it will be useful, --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- License for  more details.  You should have  received  a copy of the GNU --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- General  Public  License  distributed  with  this  software;   see  file --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- COPYING3.  If not, go to http://www.gnu.org/licenses for a complete copy --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>-- of the license.                                                          --
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>------------------------------------------------------------------------------
#^^ source.ada comment.line.ada
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>with Ada.Characters.Handling; use Ada.Characters.Handling;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
#                             ^ source.ada
#                              ^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada punctuation.ada
>with Ada.Characters.Latin_1;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>with Ada.Strings.Wide_Wide_Unbounded;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>with Ada.Strings.UTF_Encoding;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
>with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada punctuation.ada
#                           ^ source.ada
#                            ^^^ source.ada keyword.other.ada
#                               ^ source.ada
#                                ^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada punctuation.ada
>with Ada.Directories;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada punctuation.ada
>with Ada.Unchecked_Deallocation;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>
>with GNAT.OS_Lib; use GNAT.OS_Lib;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^ source.ada entity.name.label.ada
#         ^ source.ada entity.name.operator.ada
#          ^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada punctuation.ada
#                 ^ source.ada
#                  ^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>with GNAT.Strings;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^ source.ada entity.name.label.ada
#         ^ source.ada entity.name.operator.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada punctuation.ada
>with GNATCOLL.JSON;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^ source.ada entity.name.label.ada
#                  ^ source.ada punctuation.ada
>with GNATCOLL.Utils;             use GNATCOLL.Utils;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada punctuation.ada
#                    ^^^^^^^^^^^^^ source.ada
#                                 ^^^ source.ada keyword.other.ada
#                                    ^ source.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada punctuation.ada
>with GNATCOLL.VFS_Utils;         use GNATCOLL.VFS_Utils;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada punctuation.ada
#                        ^^^^^^^^^ source.ada
#                                 ^^^ source.ada keyword.other.ada
#                                    ^ source.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada punctuation.ada
>
>with LSP.Ada_Documents; use LSP.Ada_Documents;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
#                       ^ source.ada
#                        ^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>with LSP.Ada_Contexts;  use LSP.Ada_Contexts;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
#                      ^^ source.ada
#                        ^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada punctuation.ada
>with LSP.Ada_Handlers.Named_Parameters_Commands;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
>with LSP.Commands;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada punctuation.ada
>with LSP.Common;       use LSP.Common;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada punctuation.ada
#                ^^^^^^^ source.ada
#                       ^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>with LSP.Errors;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada punctuation.ada
>with LSP.Lal_Utils;    use LSP.Lal_Utils;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada punctuation.ada
#                   ^^^^ source.ada
#                       ^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
>with LSP.Messages.Client_Requests;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>with LSP.Messages.Server_Notifications;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>with LSP.Types;        use LSP.Types;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^ source.ada entity.name.label.ada
#        ^ source.ada entity.name.operator.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada punctuation.ada
#               ^^^^^^^^ source.ada
#                       ^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>
>with Langkit_Support.Slocs;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada punctuation.ada
>with Langkit_Support.Text;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>
>with Libadalang.Analysis;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>with Libadalang.Common;    use Libadalang.Common;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
#                       ^^^^ source.ada
#                           ^^^ source.ada keyword.other.ada
#                              ^ source.ada
#                               ^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
>with Libadalang.Doc_Utils;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>
>with URIs;
#^^^^ source.ada keyword.other.ada
#    ^ source.ada
#     ^^^^ source.ada entity.name.label.ada
#         ^ source.ada punctuation.ada
>
>package body LSP.Ada_Handlers is
#^^^^^^^ source.ada keyword.other.ada
#       ^ source.ada
#        ^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^^ source.ada keyword.other.ada
>
>   type Cancel_Countdown is mod 128;
#^^^ source.ada
#   ^^^^ source.ada keyword.other.ada
#       ^ source.ada
#        ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada
#                         ^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^^^ source.ada constant.numeric.ada
#                                   ^ source.ada punctuation.ada
>   --  Counter to restrict frequency of Request.Canceled checks
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   Allow_Incremental_Text_Changes : constant GNATCOLL.Traces.Trace_Handle :=
#^^^ source.ada
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                 ^ source.ada meta.declaration.object.ada
#                                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                                   ^ source.ada
#                                    ^^^^^^^^ source.ada keyword.other.ada
#                                            ^ source.ada
#                                             ^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada entity.name.operator.ada
#                                                             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                         ^ source.ada
#                                                                          ^^ source.ada entity.name.operator.assignment.ada
>     GNATCOLL.Traces.Create ("ALS.ALLOW_INCREMENTAL_TEXT_CHANGES",
#^^^^^ source.ada
#     ^^^^^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^ source.ada string.quoted.double.ada
#                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                                ^ source.ada string.quoted.double.ada
#                                                                 ^ source.ada punctuation.ada
>                             GNATCOLL.Traces.Off);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^ source.ada punctuation.ada
>   --  Trace to activate the support for incremental text changes.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  This will be made active by default once it's been field-tested.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   Is_Parent : constant LSP.Messages.AlsReferenceKind_Set :=
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#            ^ source.ada meta.declaration.object.ada
#             ^ source.ada meta.declaration.object.ada punctuation.ada
#              ^ source.ada
#               ^^^^^^^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^^ source.ada entity.name.operator.assignment.ada
>     (Is_Server_Side => True,
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^ source.ada variable.other.constant.ada
#                            ^ source.ada punctuation.ada
>      As_Flags => (LSP.Messages.Parent => True, others => False));
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada
#                                       ^^ source.ada entity.name.operator.ada
#                                         ^ source.ada
#                                          ^^^^ source.ada variable.other.constant.ada
#                                              ^ source.ada punctuation.ada
#                                               ^ source.ada
#                                                ^^^^^^ source.ada keyword.other.ada
#                                                      ^ source.ada
#                                                       ^^ source.ada entity.name.operator.ada
#                                                         ^ source.ada
#                                                          ^^^^^ source.ada variable.other.constant.ada
#                                                               ^^ source.ada
#                                                                 ^ source.ada punctuation.ada
>   Is_Child : constant LSP.Messages.AlsReferenceKind_Set :=
#^^^ source.ada
#   ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada keyword.other.ada
#                      ^ source.ada
#                       ^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^ source.ada entity.name.operator.assignment.ada
>     (Is_Server_Side => True,
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^ source.ada variable.other.constant.ada
#                            ^ source.ada punctuation.ada
>      As_Flags => (LSP.Messages.Child => True, others => False));
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^ source.ada variable.other.constant.ada
#                                             ^ source.ada punctuation.ada
#                                              ^ source.ada
#                                               ^^^^^^ source.ada keyword.other.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.ada
#                                                        ^ source.ada
#                                                         ^^^^^ source.ada variable.other.constant.ada
#                                                              ^^ source.ada
#                                                                ^ source.ada punctuation.ada
>   --  Convenient constants
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   Line_Feed : constant Character := Ada.Characters.Latin_1.LF;
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#            ^ source.ada meta.declaration.object.ada
#             ^ source.ada meta.declaration.object.ada punctuation.ada
#              ^ source.ada
#               ^^^^^^^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.assignment.ada
#                                    ^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^ source.ada entity.name.label.ada
#                                                              ^ source.ada punctuation.ada
>
>   function "+" (Text : Ada.Strings.UTF_Encoding.UTF_8_String)
#^^^ source.ada
#   ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#           ^ source.ada meta.declaration.subprogram.ada
#            ^ source.ada meta.declaration.subprogram.ada string.quoted.double.ada
#             ^^ source.ada meta.declaration.subprogram.ada string.quoted.double.ada
#               ^^ source.ada
#                 ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                     ^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^^ source.ada
>     return LSP.Types.LSP_String renames
#^^^^^ source.ada
#     ^^^^^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada keyword.other.ada
>       LSP.Types.To_LSP_String;
#^^^^^^^ source.ada
#       ^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
>
>   procedure Send_Imprecise_Xref_Message
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self     : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^ source.ada storage.modifier.ada
#                       ^ source.ada
#                        ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>      URI      : LSP.Messages.DocumentUri;
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
>      Position : LSP.Messages.Position;
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Msg_Type : LSP.Messages.MessageType);
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^ source.ada punctuation.ada
>   --  Send a message of the given Msg_Type to the LSP client to warn the user
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  of a possible imprecise result while computing xrefs on the given
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  node.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^ source.ada comment.line.ada
>
>   subtype Context_Access is LSP.Ada_Context_Sets.Context_Access;
#^^^ source.ada
#   ^^^^^^^ source.ada keyword.other.ada
#          ^ source.ada
#           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada keyword.other.ada
#                            ^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada punctuation.ada
>
>   procedure Imprecise_Resolve_Name
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self       : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^ source.ada storage.modifier.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
>      In_Context : Context_Access;
#^^^^^^ source.ada
#      ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>      Position   : LSP.Messages.TextDocumentPositionParams'Class;
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada punctuation.ada
>      Definition : out Libadalang.Analysis.Defining_Name;
#^^^^^^ source.ada
#      ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada punctuation.ada
>      Msg_Type   : LSP.Messages.MessageType := LSP.Messages.Log);
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^ source.ada entity.name.operator.assignment.ada
#                                              ^ source.ada
#                                               ^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>   --  If node at given Position is a name, then resolve it.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  Send a message in case of a possible imprecise result.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  See description of Msg_Type in Send_Imprecise_Xref_Message comments.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   function To_File (URI : LSP.Messages.DocumentUri) return Virtual_File is
#^^^ source.ada
#   ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#           ^ source.ada meta.declaration.subprogram.ada
#            ^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                   ^^ source.ada
#                     ^^^ source.ada meta.declaration.object.ada variable.name.ada
#                        ^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^^ source.ada
#                                                     ^^^^^^ source.ada keyword.other.ada
#                                                           ^ source.ada
#                                                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^^ source.ada keyword.other.ada
>     (Create (+(URIs.Conversions.To_File (To_UTF_8_String (URI)))));
#^^^^^^ source.ada
#      ^^^^^^ source.ada entity.name.label.ada
#            ^^ source.ada
#              ^ source.ada entity.name.operator.ada
#               ^ source.ada
#                ^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^^ source.ada
#                                          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^^ source.ada
#                                                           ^^^ source.ada entity.name.label.ada
#                                                              ^^^^^ source.ada
#                                                                   ^ source.ada punctuation.ada
>   --  Utility conversion function
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Show_Message
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^ source.ada storage.modifier.ada
#                   ^ source.ada
#                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      Text : String;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada punctuation.ada
>      Mode : LSP.Messages.MessageType := LSP.Messages.Error);
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.assignment.ada
#                                        ^ source.ada
#                                         ^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^ source.ada punctuation.ada
>   --  Convenience function to send a message to the user.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   function Get_Unique_Progress_Token
#^^^ source.ada
#   ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#           ^ source.ada meta.declaration.subprogram.ada
#            ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self      : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^ source.ada storage.modifier.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
>      Operation : String := "") return LSP_Number_Or_String;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada
#                         ^^ source.ada entity.name.operator.assignment.ada
#                           ^ source.ada
#                            ^ source.ada string.quoted.double.ada
#                             ^ source.ada string.quoted.double.ada
#                              ^^ source.ada
#                                ^^^^^^ source.ada keyword.other.ada
#                                      ^ source.ada
#                                       ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada punctuation.ada
>   --  Return an unique token for indicating progress
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Index_Files (Self : access Message_Handler);
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                        ^^ source.ada
#                          ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                              ^ source.ada meta.declaration.object.ada
#                               ^ source.ada meta.declaration.object.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^ source.ada storage.modifier.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>   --  Index all loaded files in each context. Emit progresormation.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Unchecked_Free is new Ada.Unchecked_Deallocation
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                           ^ source.ada
#                            ^^ source.ada keyword.other.ada
#                              ^ source.ada
#                               ^^^ source.ada keyword.other.ada
#                                  ^ source.ada
#                                   ^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>     (LSP.Ada_Documents.Document, Internal_Document_Access);
#^^^^^^ source.ada
#      ^^^ source.ada entity.name.label.ada
#         ^ source.ada entity.name.operator.ada
#          ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
#                                 ^ source.ada
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>
>   procedure Release_Project_Info (Self : access Message_Handler);
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                 ^^ source.ada
#                                   ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                       ^ source.ada meta.declaration.object.ada
#                                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                                         ^ source.ada
#                                          ^^^^^^ source.ada storage.modifier.ada
#                                                ^ source.ada
#                                                 ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada
#                                                                 ^ source.ada punctuation.ada
>   --  Release the memory associated to project information in Self
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   function Contexts_For_URI
#^^^ source.ada
#   ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#           ^ source.ada meta.declaration.subprogram.ada
#            ^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^ source.ada storage.modifier.ada
#                   ^ source.ada
#                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      URI  : LSP.Messages.DocumentUri)
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^^ source.ada
>      return LSP.Ada_Context_Sets.Context_Lists.List;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
>   --  Return a list of contexts that are suitable for the given URI:
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  a list of all contexts where the file is known to be part of the
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  project tree, or is a runtime file for this project. If the file
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  is not known to any project, return an empty list.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  The result should not be freed.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Reload_Implicit_Project_Dirs (Self : access Message_Handler);
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                         ^^ source.ada
#                                           ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                               ^ source.ada meta.declaration.object.ada
#                                                ^ source.ada meta.declaration.object.ada punctuation.ada
#                                                 ^ source.ada
#                                                  ^^^^^^ source.ada storage.modifier.ada
#                                                        ^ source.ada
#                                                         ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^ source.ada punctuation.ada
>   --  Reload as project source dirs the directories in
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  Self.Project_Dirs_Loaded.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   ---------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Project loading --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ---------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   --  The heuristics that is used for loading a project is the following:
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
>   --     * if a project (and optionally a scenario) was specified by
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --       the user via the workspace/didChangeConfiguration request,
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --       attempt to use this. If this fails to load, report an error
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --       but do not attempt to load another project.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --     => This case is handled by a call to Load_Project in
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --        On_DidChangeConfiguration_Notification.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
>   --     * if no project was specified by the user, then look in the Root
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --       directory, mimicking the behavior of gprbuild:
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --           * if there are zero .gpr files in this directory, load the
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --             implicit project
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --           * if there is exactly one .gpr file in this directory, load
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --             it, returning an error if this failed
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --           * if there are more than one .gpr files in this directory,
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --             display an error
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --      => These cases are handled by Ensure_Project_Loaded
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
>   --  At any point where requests are made, Self.Contexts should
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  contain one or more contexts, each one containing a non-aggregate
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  project hierarchy.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
>   --  The attempt to load a project should be done in reaction to
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  On_DidChangeConfiguration_Notification. However, the IDEs that
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  are not configured specifically for this language server might
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  not pass a .gpr file to didChangeConfiguration: for these IDEs,
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  we fallback to loading the project the first time an editor is
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  open or a request on non-openned file.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Ensure_Project_Loaded
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^ source.ada storage.modifier.ada
#                   ^ source.ada
#                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      Root : LSP.Types.LSP_String := LSP.Types.Empty_LSP_String);
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.assignment.ada
#                                    ^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>   --  This function makes sure that the contexts in Self are properly
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  initialized and a project is loaded. If they are not initialized,
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  initialize them. Use custom Root directory if provided.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Load_Implicit_Project (Self : access Message_Handler);
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                  ^^ source.ada
#                                    ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                        ^ source.ada meta.declaration.object.ada
#                                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                                          ^ source.ada
#                                           ^^^^^^ source.ada storage.modifier.ada
#                                                 ^ source.ada
#                                                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^ source.ada punctuation.ada
>   --  Load the implicit project
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Load_Project
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self     : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^ source.ada storage.modifier.ada
#                       ^ source.ada
#                        ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>      GPR      : Virtual_File;
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>      Scenario : LSP.Types.LSP_Any;
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada punctuation.ada
>      Charset  : String);
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^ source.ada punctuation.ada
>   --  Attempt to load the given project file, with the scenario provided.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --  This unloads all currently loaded project contexts.
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   ----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Contexts_For_URI --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   function Contexts_For_URI
#^^^ source.ada
#   ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#           ^ source.ada meta.declaration.subprogram.ada
#            ^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^ source.ada storage.modifier.ada
#                   ^ source.ada
#                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      URI  : LSP.Messages.DocumentUri)
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^^ source.ada
>      return LSP.Ada_Context_Sets.Context_Lists.List
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      File : constant Virtual_File := To_File (URI);
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.assignment.ada
#                                     ^ source.ada
#                                      ^^^^^^^ source.ada entity.name.label.ada
#                                             ^^ source.ada
#                                               ^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^ source.ada punctuation.ada
>
>      function Is_A_Source (Self : LSP.Ada_Contexts.Context) return Boolean is
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                          ^^ source.ada
#                            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                ^ source.ada meta.declaration.object.ada
#                                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                                  ^ source.ada
#                                   ^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^^^^^ source.ada entity.name.label.ada
#                                                           ^^ source.ada
#                                                             ^^^^^^ source.ada keyword.other.ada
#                                                                   ^ source.ada
#                                                                    ^^^^^^^ source.ada entity.name.label.ada
#                                                                           ^ source.ada
#                                                                            ^^ source.ada keyword.other.ada
>        (Self.Is_Part_Of_Project (File));
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^ source.ada entity.name.label.ada
#                                      ^^ source.ada
#                                        ^ source.ada punctuation.ada
>      --  Return True if File is a source of the project held by Context
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      --  If the file does not exist on disk, assume this is a file
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  being created and, as a special convenience in this case,
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  assume it could belong to any project.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      if not File.Is_Regular_File
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>      --  If the file is a runtime file for the loaded project environment,
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  all projects can see it.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>        or else Self.Project_Predefined_Sources.Contains (File)
#^^^^^^^^ source.ada
#        ^^ source.ada entity.name.operator.ada
#          ^ source.ada
#           ^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^^ source.ada
#                                                          ^^^^ source.ada entity.name.label.ada
#                                                              ^^ source.ada
>      then
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         return Self.Contexts.Each_Context;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  List contexts where File is a source of the project hierarchy
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      return Self.Contexts.Each_Context (Is_A_Source'Unrestricted_Access);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^^ source.ada
#                                         ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada
#                                                     ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^ source.ada punctuation.ada
>   end Contexts_For_URI;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada punctuation.ada
>
>   -----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Get_Open_Document --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function Get_Open_Document
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self  : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^ source.ada storage.modifier.ada
#                    ^ source.ada
#                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>      URI   : LSP.Messages.DocumentUri;
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Force : Boolean := False)
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^^^^^ source.ada variable.other.constant.ada
#                              ^^ source.ada
>      return LSP.Ada_Documents.Document_Access is
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^ source.ada keyword.other.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Self.Ensure_Project_Loaded;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>
>      if Self.Open_Documents.Contains (URI) then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^^ source.ada
#                                       ^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
#                                            ^^^^ source.ada keyword.other.ada
>         return LSP.Ada_Documents.Document_Access
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Self.Open_Documents.Element (URI));
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^ source.ada entity.name.label.ada
#                                       ^^ source.ada
#                                         ^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^ source.ada punctuation.ada
>      elsif Force then
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^^^ source.ada keyword.other.ada
>         declare
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
>            Document : constant Internal_Document_Access :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                    ^ source.ada meta.declaration.object.ada
#                     ^ source.ada meta.declaration.object.ada punctuation.ada
#                      ^ source.ada
#                       ^^^^^^^^ source.ada keyword.other.ada
#                               ^ source.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^ source.ada entity.name.operator.assignment.ada
>              new LSP.Ada_Documents.Document (Self.Trace);
#^^^^^^^^^^^^^^ source.ada
#              ^^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Document.Initialize (URI, Empty_LSP_String);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^^ source.ada
#                                 ^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>            return LSP.Ada_Documents.Document_Access (Document);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
#                                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         return null;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada variable.other.constant.ada
#                    ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>   end Get_Open_Document;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>
>   ---------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Send_Imprecise_Xref_Message --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ---------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Send_Imprecise_Xref_Message
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self     : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^ source.ada storage.modifier.ada
#                       ^ source.ada
#                        ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>      URI      : LSP.Messages.DocumentUri;
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
>      Position : LSP.Messages.Position;
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Msg_Type : LSP.Messages.MessageType)
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      File : constant GNATCOLL.VFS.Virtual_File := To_File (URI);
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.assignment.ada
#                                                  ^ source.ada
#                                                   ^^^^^^^ source.ada entity.name.label.ada
#                                                          ^^ source.ada
#                                                            ^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Self.Server.On_Show_Message
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        ((Msg_Type,
#^^^^^^^^^^ source.ada
#          ^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada punctuation.ada
>         "Imprecise fallback used to compute cross-references on entity at:"
#^^^^^^^^^ source.ada
#         ^ source.ada string.quoted.double.ada
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                                           ^ source.ada string.quoted.double.ada
>         & To_LSP_String
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.operator.ada
#          ^ source.ada
#           ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Line_Feed & "   " & File.Display_Base_Name)
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^ source.ada string.quoted.double.ada
#                            ^ source.ada string.quoted.double.ada
#                             ^ source.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
>         & To_LSP_String
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.operator.ada
#          ^ source.ada
#           ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Line_Feed & "   line:" & Position.line'Img)
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^^^^^^ source.ada string.quoted.double.ada
#                                 ^ source.ada string.quoted.double.ada
#                                  ^ source.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^ source.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
>         & To_LSP_String
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.operator.ada
#          ^ source.ada
#           ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Line_Feed & "   column:" & Position.character'Img)));
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^^^^^^^^ source.ada string.quoted.double.ada
#                                   ^ source.ada string.quoted.double.ada
#                                    ^ source.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^ source.ada
#                                       ^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^^^ source.ada entity.name.label.ada
#                                                             ^^^ source.ada
#                                                                ^ source.ada punctuation.ada
>   end Send_Imprecise_Xref_Message;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada punctuation.ada
>
>   ----------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Imprecise_Resolve_Name --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ----------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Imprecise_Resolve_Name
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self       : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^ source.ada storage.modifier.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
>      In_Context : Context_Access;
#^^^^^^ source.ada
#      ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>      Position   : LSP.Messages.TextDocumentPositionParams'Class;
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada punctuation.ada
>      Definition : out Libadalang.Analysis.Defining_Name;
#^^^^^^ source.ada
#      ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada punctuation.ada
>      Msg_Type   : LSP.Messages.MessageType := LSP.Messages.Log)
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^ source.ada entity.name.operator.assignment.ada
#                                              ^ source.ada
#                                               ^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use type Libadalang.Analysis.Name;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>
>      Name_Node : constant Libadalang.Analysis.Name :=
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada entity.name.operator.assignment.ada
>        LSP.Lal_Utils.Get_Node_As_Name
#^^^^^^^^ source.ada
#        ^^^ source.ada entity.name.label.ada
#           ^ source.ada entity.name.operator.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>          (In_Context.Get_Node_At
#^^^^^^^^^^^ source.ada
#           ^^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^ source.ada entity.name.label.ada
>             (Get_Open_Document (Self, Position.textDocument.uri),
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^^ source.ada
#                                 ^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
#                                      ^ source.ada
#                                       ^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada entity.name.operator.ada
#                                                             ^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada
#                                                                 ^ source.ada punctuation.ada
>              Position));
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^ source.ada punctuation.ada
>
>      Imprecise  : Boolean;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Name_Node = Libadalang.Analysis.No_Name then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^^^ source.ada keyword.other.ada
>         return;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Definition := LSP.Lal_Utils.Resolve_Name
#^^^^^^ source.ada
#      ^^^^^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^^ source.ada entity.name.operator.assignment.ada
#                   ^ source.ada
#                    ^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Name_Node,
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada punctuation.ada
>         Self.Trace,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada punctuation.ada
>         Imprecise => Imprecise);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^ source.ada punctuation.ada
>
>      --  If we used the imprecise fallback to get to the definition, log it
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      if Imprecise then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
>         Self.Send_Imprecise_Xref_Message
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (URI      => Position.textDocument.uri,
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^^^^^^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>            Position => Position.position,
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
>            Msg_Type => Msg_Type);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>   end Imprecise_Resolve_Name;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>   --------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Release_Project_Info --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Release_Project_Info (Self : access Message_Handler) is
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                 ^^ source.ada
#                                   ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                       ^ source.ada meta.declaration.object.ada
#                                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                                         ^ source.ada
#                                          ^^^^^^ source.ada storage.modifier.ada
#                                                ^ source.ada
#                                                 ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                ^^ source.ada
#                                                                  ^^ source.ada keyword.other.ada
>      use GNATCOLL.Projects;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Self.Project_Tree /= null then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^ source.ada
#                              ^^^^ source.ada variable.other.constant.ada
#                                  ^ source.ada
#                                   ^^^^ source.ada keyword.other.ada
>         Self.Project_Tree.Unload;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>         Free (Self.Project_Tree);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      if Self.Project_Environment /= null then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.ada
#                                    ^ source.ada
#                                     ^^^^ source.ada variable.other.constant.ada
#                                         ^ source.ada
#                                          ^^^^ source.ada keyword.other.ada
>         Free (Self.Project_Environment);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      Self.Project_Predefined_Sources.Clear;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
>      Self.Project_Dirs_Loaded.Clear;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>   end Release_Project_Info;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>   -------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^ source.ada comment.line.ada
>   -- Cleanup --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^ source.ada comment.line.ada
>   -------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Cleanup (Self : access Message_Handler) is
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                    ^^ source.ada
#                      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                          ^ source.ada meta.declaration.object.ada
#                           ^ source.ada meta.declaration.object.ada punctuation.ada
#                            ^ source.ada
#                             ^^^^^^ source.ada storage.modifier.ada
#                                   ^ source.ada
#                                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^^ source.ada
#                                                     ^^ source.ada keyword.other.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      --  Cleanup documents
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      for Document of Self.Open_Documents loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^^^^ source.ada keyword.other.ada
>         Unchecked_Free (Document);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^^ source.ada
#                         ^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>      Self.Open_Documents.Clear;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>
>      --  Cleanup contexts
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Self.Contexts.Cleanup;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>      --  Cleanup project and environment
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Self.Release_Project_Info;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>   end Cleanup;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada punctuation.ada
>
>   -----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Exit_Notification --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding procedure On_Exit_Notification (Self : access Message_Handler) is
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                       ^ source.ada meta.declaration.subprogram.ada
#                        ^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                            ^^ source.ada
#                                              ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                                  ^ source.ada meta.declaration.object.ada
#                                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                                    ^ source.ada
#                                                     ^^^^^^ source.ada storage.modifier.ada
#                                                           ^ source.ada
#                                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                           ^^ source.ada
#                                                                             ^^ source.ada keyword.other.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Self.Server.Stop;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>   end On_Exit_Notification;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>   ----------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Reload_Implicit_Project_Dirs --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ----------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Reload_Implicit_Project_Dirs (Self : access Message_Handler) is
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                         ^^ source.ada
#                                           ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                               ^ source.ada meta.declaration.object.ada
#                                                ^ source.ada meta.declaration.object.ada punctuation.ada
#                                                 ^ source.ada
#                                                  ^^^^^^ source.ada storage.modifier.ada
#                                                        ^ source.ada
#                                                         ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                        ^^ source.ada
#                                                                          ^^ source.ada keyword.other.ada
>      Attr  : GNAT.Strings.String_List
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^ source.ada entity.name.label.ada
>        (1 .. Natural (Self.Project_Dirs_Loaded.Length));
#^^^^^^^^^ source.ada
#         ^ source.ada constant.numeric.ada
#          ^ source.ada
#           ^^ source.ada entity.name.operator.ada
#             ^ source.ada
#              ^^^^^^^ source.ada entity.name.label.ada
#                     ^^ source.ada
#                       ^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
#                                                        ^ source.ada punctuation.ada
>      Index : Natural := 1;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^ source.ada constant.numeric.ada
#                          ^ source.ada punctuation.ada
>      use GNATCOLL.Projects;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      for Dir of Self.Project_Dirs_Loaded loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^^^^ source.ada keyword.other.ada
>         Attr (Index) := new String'(Dir.Display_Full_Name);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^^ source.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^^^ source.ada keyword.other.ada
#                            ^ source.ada
#                             ^^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>         Index := Index + 1;
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.assignment.ada
#                 ^ source.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^ source.ada constant.numeric.ada
#                           ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      Set_Attribute
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Self.Project_Tree.Root_Project,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>         Source_Dirs_Attribute,
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
>         Attr);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^ source.ada punctuation.ada
>      Self.Project_Tree.Recompute_View;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>
>      for J in Attr'Range loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada storage.modifier.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^^ source.ada keyword.other.ada
>         GNAT.Strings.Free (Attr (J));
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^ source.ada entity.name.label.ada
#                          ^^ source.ada
#                            ^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>   end Reload_Implicit_Project_Dirs;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Load_Implicit_Project --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Load_Implicit_Project (Self : access Message_Handler) is
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                  ^^ source.ada
#                                    ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                        ^ source.ada meta.declaration.object.ada
#                                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                                          ^ source.ada
#                                           ^^^^^^ source.ada storage.modifier.ada
#                                                 ^ source.ada
#                                                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                 ^^ source.ada
#                                                                   ^^ source.ada keyword.other.ada
>      C    : constant Context_Access := new Context (Self.Trace);
#^^^^^^ source.ada
#      ^ source.ada meta.declaration.object.ada variable.name.ada
#       ^^^^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.assignment.ada
#                                       ^ source.ada
#                                        ^^^ source.ada keyword.other.ada
#                                           ^ source.ada
#                                            ^^^^^^^ source.ada entity.name.label.ada
#                                                   ^^ source.ada
#                                                     ^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>      Attr : GNAT.Strings.String_List (1 .. 1);
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^^ source.ada
#                                       ^ source.ada constant.numeric.ada
#                                        ^ source.ada
#                                         ^^ source.ada entity.name.operator.ada
#                                           ^ source.ada
#                                            ^ source.ada constant.numeric.ada
#                                             ^ source.ada
#                                              ^ source.ada punctuation.ada
>      use GNATCOLL.Projects;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      --  Unload all the contexts
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Self.Contexts.Cleanup;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>      Self.Trace.Trace ("Loading the implicit project");
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                     ^ source.ada string.quoted.double.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>
>      Self.Implicit_Project_Loaded := True;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.assignment.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada variable.other.constant.ada
#                                          ^ source.ada punctuation.ada
>      Self.Release_Project_Info;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>      Initialize (Self.Project_Environment);
#^^^^^^ source.ada
#      ^^^^^^^^^^ source.ada entity.name.label.ada
#                ^^ source.ada
#                  ^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^ source.ada punctuation.ada
>      Self.Project_Tree := new Project_Tree;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.assignment.ada
#                          ^ source.ada
#                           ^^^ source.ada keyword.other.ada
#                              ^ source.ada
#                               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
>      C.Initialize;
#^^^^^^ source.ada
#      ^ source.ada entity.name.label.ada
#       ^ source.ada entity.name.operator.ada
#        ^^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada punctuation.ada
>
>      --  Note: we would call Load_Implicit_Project here, but this has
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  two problems:
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --    - there is a bug under Windows where the files returned by
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --      Source_Files have an extraneous directory separator
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --    - the implicit project relies on the current working
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --      of the ALS, which imposes a restriction on clients, and
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --      is an extra pitfall for developers of this server
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
>      --  Instead, use Load_Empty_Project and set the source dir and
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  language manually: this does not have these inconvenients.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      Load_Empty_Project
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Self.Project_Tree.all, Self.Project_Environment);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^ source.ada keyword.other.ada
#                              ^ source.ada punctuation.ada
#                               ^ source.ada
#                                ^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^ source.ada punctuation.ada
>      Attr := (1 => new String'("Ada"));
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada
#           ^^ source.ada entity.name.operator.assignment.ada
#             ^^ source.ada
#               ^ source.ada constant.numeric.ada
#                ^ source.ada
#                 ^^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^ source.ada string.quoted.double.ada
#                                 ^^^ source.ada string.quoted.double.ada
#                                    ^ source.ada string.quoted.double.ada
#                                     ^^ source.ada
#                                       ^ source.ada punctuation.ada
>      Set_Attribute
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Self.Project_Tree.Root_Project, Languages_Attribute, Attr);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
#                                        ^ source.ada
#                                         ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada punctuation.ada
#                                                             ^ source.ada
#                                                              ^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada
#                                                                   ^ source.ada punctuation.ada
>      GNAT.Strings.Free (Attr (1));
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^ source.ada entity.name.label.ada
#                       ^^ source.ada
#                         ^^^^ source.ada entity.name.label.ada
#                             ^^ source.ada
#                               ^ source.ada constant.numeric.ada
#                                ^^ source.ada
#                                  ^ source.ada punctuation.ada
>
>      --  When there is no .gpr, create a project which loads the
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  root directory in the workspace.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      Self.Project_Dirs_Loaded.Include (Self.Root);
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^ source.ada entity.name.label.ada
#                                      ^^ source.ada
#                                        ^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^ source.ada punctuation.ada
>      Self.Reload_Implicit_Project_Dirs;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>      C.Load_Project (Self.Project_Tree,
#^^^^^^ source.ada
#      ^ source.ada entity.name.label.ada
#       ^ source.ada entity.name.operator.ada
#        ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^^ source.ada
#                      ^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>                      Self.Project_Tree.Root_Project,
#^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                      ^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
>                      "iso-8859-1");
#^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                      ^ source.ada string.quoted.double.ada
#                       ^^^^^^^^^^ source.ada string.quoted.double.ada
#                                 ^ source.ada string.quoted.double.ada
#                                  ^ source.ada
#                                   ^ source.ada punctuation.ada
>
>      for File of Self.Project_Environment.Predefined_Source_Files loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada
#                                                                   ^^^^ source.ada keyword.other.ada
>         Self.Project_Predefined_Sources.Include (File);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^ source.ada entity.name.label.ada
#                                                ^^ source.ada
#                                                  ^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      Self.Contexts.Prepend (C);
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^ source.ada punctuation.ada
>   end Load_Implicit_Project;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Ensure_Project_Loaded --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Ensure_Project_Loaded
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^ source.ada storage.modifier.ada
#                   ^ source.ada
#                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      Root : LSP.Types.LSP_String := LSP.Types.Empty_LSP_String)
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.assignment.ada
#                                    ^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      GPRs_Found : Natural := 0;
#^^^^^^ source.ada
#      ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^ source.ada constant.numeric.ada
#                               ^ source.ada punctuation.ada
>      Files      : File_Array_Access;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>      GPR        : Virtual_File;
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^^^^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if not Self.Contexts.Is_Empty then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^^^ source.ada keyword.other.ada
>         --  Rely on the fact that there is at least one context initialized
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  as a guarantee that the initialization has been done.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         return;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  If we never passed through Initialize, this might be empty:
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  initialize it now
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      if Self.Root = No_File and then not LSP.Types.Is_Empty (Root) then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^^ source.ada entity.name.operator.ada
#                                ^ source.ada
#                                 ^^^^ source.ada keyword.other.ada
#                                     ^ source.ada
#                                      ^^^ source.ada entity.name.operator.ada
#                                         ^ source.ada
#                                          ^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^^^^^^ source.ada entity.name.label.ada
#                                                            ^^ source.ada
#                                                              ^^^^ source.ada entity.name.label.ada
#                                                                  ^^ source.ada
#                                                                    ^^^^ source.ada keyword.other.ada
>         Self.Root := Create (+To_UTF_8_String (Root));
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.assignment.ada
#                     ^ source.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^^ source.ada
#                                                ^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
#                                                      ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Self.Trace.Trace ("Project loading ...");
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                            ^ source.ada string.quoted.double.ada
#                                             ^ source.ada
#                                              ^ source.ada punctuation.ada
>      Self.Trace.Trace ("Root : " & To_UTF_8_String
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^^^^^ source.ada string.quoted.double.ada
#                                ^ source.ada string.quoted.double.ada
#                                 ^ source.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^ source.ada
#                                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                        (+Self.Root.Display_Full_Name));
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^ source.ada punctuation.ada
>
>      --  We're going to look for a project in Root: list all the files
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  in this directory, looking for .gpr files.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      Files := Self.Root.Read_Dir (Files_Only);
#^^^^^^ source.ada
#      ^^^^^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada entity.name.operator.assignment.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^ source.ada entity.name.label.ada
#                                 ^^ source.ada
#                                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^ source.ada punctuation.ada
>      if Files /= null then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^^ source.ada variable.other.constant.ada
#                      ^ source.ada
#                       ^^^^ source.ada keyword.other.ada
>         for X of Files.all loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^^ source.ada keyword.other.ada
>            if Ends_With (+X.Base_Name, ".gpr") then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^ source.ada entity.name.label.ada
#                        ^^ source.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
#                                       ^ source.ada
#                                        ^ source.ada string.quoted.double.ada
#                                         ^^^^ source.ada string.quoted.double.ada
#                                             ^ source.ada string.quoted.double.ada
#                                              ^^ source.ada
#                                                ^^^^ source.ada keyword.other.ada
>               GPRs_Found := GPRs_Found + 1;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.assignment.ada
#                            ^ source.ada
#                             ^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^ source.ada
#                                          ^ source.ada constant.numeric.ada
#                                           ^ source.ada punctuation.ada
>               exit when GPRs_Found > 1;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.control.ada
#                   ^ source.ada
#                    ^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^ source.ada constant.numeric.ada
#                                       ^ source.ada punctuation.ada
>               GPR := X;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.assignment.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.label.ada
#                       ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>         Unchecked_Free (Files);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^^ source.ada
#                         ^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  What we do depends on the number of .gpr files found:
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      if GPRs_Found = 0 then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^ source.ada constant.numeric.ada
#                       ^ source.ada
#                        ^^^^ source.ada keyword.other.ada
>         --  We have found zero .gpr files: load the implicit project
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         Self.Load_Implicit_Project;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      elsif GPRs_Found = 1 then
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^ source.ada constant.numeric.ada
#                          ^ source.ada
#                           ^^^^ source.ada keyword.other.ada
>         --  We have not found exactly one .gpr file: load the default
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  project.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^ source.ada comment.line.ada
>         Self.Trace.Trace ("Loading " & GPR.Display_Base_Name);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^ source.ada string.quoted.double.ada
#                            ^^^^^^^^ source.ada string.quoted.double.ada
#                                    ^ source.ada string.quoted.double.ada
#                                     ^ source.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^ source.ada
#                                        ^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada
#                                                              ^ source.ada punctuation.ada
>         Self.Load_Project (GPR, No_Any, "iso-8859-1");
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^^ source.ada
#                            ^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
#                                        ^ source.ada
#                                         ^ source.ada string.quoted.double.ada
#                                          ^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                    ^ source.ada string.quoted.double.ada
#                                                     ^ source.ada
#                                                      ^ source.ada punctuation.ada
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         --  We have found more than one project: warn the user!
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         Self.Show_Message
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
>           ("More than one .gpr found." & Line_Feed &
#^^^^^^^^^^^^ source.ada
#            ^ source.ada string.quoted.double.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                      ^ source.ada string.quoted.double.ada
#                                       ^ source.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^ source.ada
#                                          ^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^ source.ada entity.name.operator.ada
>              "Note: you can configure a project " &
#^^^^^^^^^^^^^^ source.ada
#              ^ source.ada string.quoted.double.ada
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                 ^ source.ada string.quoted.double.ada
#                                                  ^ source.ada
#                                                   ^ source.ada entity.name.operator.ada
>              " through the ada.projectFile setting.");
#^^^^^^^^^^^^^^ source.ada
#              ^ source.ada string.quoted.double.ada
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                    ^ source.ada string.quoted.double.ada
#                                                     ^ source.ada
#                                                      ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>   end Ensure_Project_Loaded;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   ------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Initialize_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Initialize_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Initialize_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
>      return LSP.Messages.Server_Responses.Initialize_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      Value    : LSP.Messages.InitializeParams renames Request.params;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^^^^^^ source.ada keyword.other.ada
#                                                      ^ source.ada
#                                                       ^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada entity.name.operator.ada
#                                                               ^^^^^^ source.ada entity.name.label.ada
#                                                                     ^ source.ada punctuation.ada
>      Code_Action : LSP.Messages.Optional_CodeActionClientCapabilities renames
#^^^^^^ source.ada
#      ^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                 ^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                      ^ source.ada
#                                                                       ^^^^^^^ source.ada keyword.other.ada
>        Value.capabilities.textDocument.codeAction;
#^^^^^^^^ source.ada
#        ^^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.Initialize_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>      Root     : LSP.Types.LSP_String;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Response.result.capabilities.declarationProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value => (Is_Boolean => True, Bool => True));
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^^ source.ada
#                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^^ source.ada entity.name.operator.ada
#                                ^ source.ada
#                                 ^^^^ source.ada variable.other.constant.ada
#                                     ^ source.ada punctuation.ada
#                                      ^ source.ada
#                                       ^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^ source.ada entity.name.operator.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada variable.other.constant.ada
#                                                   ^^ source.ada
#                                                     ^ source.ada punctuation.ada
>      Response.result.capabilities.definitionProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value  => (workDoneProgress => (Is_Set => False)));
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^^ source.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.ada
#                                       ^^ source.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.ada
#                                                  ^ source.ada
#                                                   ^^^^^ source.ada variable.other.constant.ada
#                                                        ^^^ source.ada
#                                                           ^ source.ada punctuation.ada
>      Response.result.capabilities.typeDefinitionProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value => (Is_Boolean => True, Bool => True));
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^^ source.ada
#                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^^ source.ada entity.name.operator.ada
#                                ^ source.ada
#                                 ^^^^ source.ada variable.other.constant.ada
#                                     ^ source.ada punctuation.ada
#                                      ^ source.ada
#                                       ^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^ source.ada entity.name.operator.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada variable.other.constant.ada
#                                                   ^^ source.ada
#                                                     ^ source.ada punctuation.ada
>      Response.result.capabilities.implementationProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value => (Is_Boolean => True, Bool => True));
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^^ source.ada
#                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^^ source.ada entity.name.operator.ada
#                                ^ source.ada
#                                 ^^^^ source.ada variable.other.constant.ada
#                                     ^ source.ada punctuation.ada
#                                      ^ source.ada
#                                       ^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^ source.ada entity.name.operator.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada variable.other.constant.ada
#                                                   ^^ source.ada
#                                                     ^ source.ada punctuation.ada
>      Response.result.capabilities.referencesProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value  => (workDoneProgress => (Is_Set => False)));
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^^ source.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.ada
#                                       ^^ source.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.ada
#                                                  ^ source.ada
#                                                   ^^^^^ source.ada variable.other.constant.ada
#                                                        ^^^ source.ada
#                                                           ^ source.ada punctuation.ada
>      Response.result.capabilities.documentSymbolProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value  => (workDoneProgress => (Is_Set => False)));
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^^ source.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.ada
#                                       ^^ source.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.ada
#                                                  ^ source.ada
#                                                   ^^^^^ source.ada variable.other.constant.ada
#                                                        ^^^ source.ada
#                                                           ^ source.ada punctuation.ada
>      Response.result.capabilities.renameProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value  => (prepareProvider  => (Is_Set => False),
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^^ source.ada
#                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^ source.ada entity.name.operator.ada
#                                       ^^ source.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.ada
#                                                  ^ source.ada
#                                                   ^^^^^ source.ada variable.other.constant.ada
#                                                        ^ source.ada
#                                                         ^ source.ada punctuation.ada
>                    workDoneProgress => (Is_Set => False)));
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.ada
#                                       ^^ source.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.ada
#                                                  ^ source.ada
#                                                   ^^^^^ source.ada variable.other.constant.ada
#                                                        ^^^ source.ada
#                                                           ^ source.ada punctuation.ada
>      Response.result.capabilities.textDocumentSync :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True, Is_Number => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada variable.other.constant.ada
#                                          ^ source.ada punctuation.ada
>         Value  =>
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^ source.ada
#                ^^ source.ada entity.name.operator.ada
>           (if Allow_Incremental_Text_Changes.Active then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada
#                                                     ^^^^ source.ada keyword.other.ada
>               LSP.Messages.Incremental
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^ source.ada entity.name.label.ada
>            else
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
>               LSP.Messages.Full));
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^ source.ada punctuation.ada
>      Response.result.capabilities.completionProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.assignment.ada
>        (True,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada variable.other.constant.ada
#             ^ source.ada punctuation.ada
>         (resolveProvider   => (True, False),
#^^^^^^^^^^ source.ada
#          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^^ source.ada
#                            ^^ source.ada entity.name.operator.ada
#                              ^^ source.ada
#                                ^^^^ source.ada variable.other.constant.ada
#                                    ^ source.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^ source.ada variable.other.constant.ada
#                                           ^ source.ada
#                                            ^ source.ada punctuation.ada
>          triggerCharacters => (True, Empty_Vector & (+".")),
#^^^^^^^^^^ source.ada
#          ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^ source.ada entity.name.operator.ada
#                              ^^ source.ada
#                                ^^^^ source.ada variable.other.constant.ada
#                                    ^ source.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^ source.ada
#                                                      ^ source.ada entity.name.operator.ada
#                                                       ^ source.ada string.quoted.double.ada
#                                                        ^ source.ada string.quoted.double.ada
#                                                         ^ source.ada string.quoted.double.ada
#                                                          ^^ source.ada
#                                                            ^ source.ada punctuation.ada
>          allCommitCharacters => (Is_Set => False),
#^^^^^^^^^^ source.ada
#          ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^^ source.ada entity.name.operator.ada
#                                ^^ source.ada
#                                  ^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^ source.ada entity.name.operator.ada
#                                           ^ source.ada
#                                            ^^^^^ source.ada variable.other.constant.ada
#                                                 ^ source.ada
#                                                  ^ source.ada punctuation.ada
>          workDoneProgress  => (Is_Set => False)));
#^^^^^^^^^^ source.ada
#          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^^ source.ada
#                            ^^ source.ada entity.name.operator.ada
#                              ^^ source.ada
#                                ^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada
#                                       ^^ source.ada entity.name.operator.ada
#                                         ^ source.ada
#                                          ^^^^^ source.ada variable.other.constant.ada
#                                               ^^^ source.ada
#                                                  ^ source.ada punctuation.ada
>      Response.result.capabilities.hoverProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value  => (workDoneProgress => (Is_Set => False)));
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^^ source.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.ada
#                                       ^^ source.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.ada
#                                                  ^ source.ada
#                                                   ^^^^^ source.ada variable.other.constant.ada
#                                                        ^^^ source.ada
#                                                           ^ source.ada punctuation.ada
>      Response.result.capabilities.executeCommandProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value  => (commands => LSP.Commands.All_Commands,
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^^ source.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada punctuation.ada
>                    workDoneProgress  => (Is_Set => False)));
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^^ source.ada
#                                          ^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^ source.ada entity.name.operator.ada
#                                                   ^ source.ada
#                                                    ^^^^^ source.ada variable.other.constant.ada
#                                                         ^^^ source.ada
#                                                            ^ source.ada punctuation.ada
>
>      if Code_Action.Is_Set and then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^^^^ source.ada keyword.other.ada
>        Code_Action.Value.codeActionLiteralSupport.Is_Set
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^ source.ada entity.name.label.ada
>      then
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         Response.result.capabilities.codeActionProvider :=
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^ source.ada entity.name.operator.assignment.ada
>           (Is_Set => True,
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada punctuation.ada
>            Value  =>
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^^ source.ada
#                   ^^ source.ada entity.name.operator.ada
>              (codeActionKinds =>
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^^ source.ada entity.name.operator.ada
>                   (Is_Set => True,
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^ source.ada
#                              ^^^^ source.ada variable.other.constant.ada
#                                  ^ source.ada punctuation.ada
>                    Value  => LSP.Messages.To_Set
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^ source.ada
#                              ^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^ source.ada entity.name.label.ada
>                      (From => LSP.Messages.RefactorRewrite,
#^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                       ^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^ source.ada entity.name.operator.ada
#                              ^ source.ada
#                               ^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada punctuation.ada
>                       To   => LSP.Messages.RefactorRewrite)),
#^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                       ^^ source.ada entity.name.label.ada
#                         ^^^ source.ada
#                            ^^ source.ada entity.name.operator.ada
#                              ^ source.ada
#                               ^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^^ source.ada
#                                                             ^ source.ada punctuation.ada
>               workDoneProgress => (Is_Set => False)));
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.ada
#                                  ^^ source.ada
#                                    ^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^^ source.ada entity.name.operator.ada
#                                             ^ source.ada
#                                              ^^^^^ source.ada variable.other.constant.ada
#                                                   ^^^ source.ada
#                                                      ^ source.ada punctuation.ada
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         Response.result.capabilities.codeActionProvider :=
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^ source.ada entity.name.operator.assignment.ada
>           (Is_Set => True, Value => <>);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada punctuation.ada
#                           ^ source.ada
#                            ^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.ada
#                                       ^ source.ada
#                                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Response.result.capabilities.alsCalledByProvider := True;
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^^ source.ada entity.name.operator.assignment.ada
#                                                         ^ source.ada
#                                                          ^^^^ source.ada variable.other.constant.ada
#                                                              ^ source.ada punctuation.ada
>      Response.result.capabilities.alsReferenceKinds :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada
#                                                     ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value  => (Is_Server_Side => True, As_Flags => (others => True)));
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^^ source.ada
#                    ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada variable.other.constant.ada
#                                          ^ source.ada punctuation.ada
#                                           ^ source.ada
#                                            ^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada
#                                                     ^^ source.ada entity.name.operator.ada
#                                                       ^^ source.ada
#                                                         ^^^^^^ source.ada keyword.other.ada
#                                                               ^ source.ada
#                                                                ^^ source.ada entity.name.operator.ada
#                                                                  ^ source.ada
#                                                                   ^^^^ source.ada variable.other.constant.ada
#                                                                       ^^^ source.ada
#                                                                          ^ source.ada punctuation.ada
>
>      Response.result.capabilities.foldingRangeProvider :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Set => True,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
#                       ^ source.ada punctuation.ada
>         Value => (Is_Boolean => True, Bool => True));
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^^ source.ada
#                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^^ source.ada entity.name.operator.ada
#                                ^ source.ada
#                                 ^^^^ source.ada variable.other.constant.ada
#                                     ^ source.ada punctuation.ada
#                                      ^ source.ada
#                                       ^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^ source.ada entity.name.operator.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada variable.other.constant.ada
#                                                   ^^ source.ada
#                                                     ^ source.ada punctuation.ada
>
>      if Value.capabilities.textDocument.documentSymbol.Is_Set
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^^^^ source.ada entity.name.label.ada
>        and then Value.capabilities.textDocument.documentSymbol.Value
#^^^^^^^^ source.ada
#        ^^^ source.ada entity.name.operator.ada
#           ^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada entity.name.operator.ada
#                                                                ^^^^^ source.ada entity.name.label.ada
>          .hierarchicalDocumentSymbolSupport = (True, True)
#^^^^^^^^^^ source.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^ source.ada
#                                                ^^^^ source.ada variable.other.constant.ada
#                                                    ^ source.ada punctuation.ada
#                                                     ^ source.ada
#                                                      ^^^^ source.ada variable.other.constant.ada
#                                                          ^^ source.ada
>      then
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         Self.Get_Symbols := LSP.Ada_Documents.Get_Symbol_Hierarchy'Access;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.assignment.ada
#                            ^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada
#                                                                    ^^^^^^ source.ada storage.modifier.ada
#                                                                          ^ source.ada punctuation.ada
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         Self.Get_Symbols := LSP.Ada_Documents.Get_Symbols'Access;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.assignment.ada
#                            ^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^^^^^ source.ada storage.modifier.ada
#                                                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      if Value.capabilities.textDocument.foldingRange.Is_Set
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^ source.ada entity.name.label.ada
>        and then Value.capabilities.textDocument.foldingRange.Value.
#^^^^^^^^ source.ada
#        ^^^ source.ada entity.name.operator.ada
#           ^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada entity.name.operator.ada
#                                                              ^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada entity.name.operator.ada
>          lineFoldingOnly.Is_Set
#^^^^^^^^^^ source.ada
#          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^ source.ada entity.name.label.ada
>      then
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         --  Client capability to fold only entire lines
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         Self.Line_Folding_Only := Value.capabilities.textDocument.
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.assignment.ada
#                                  ^ source.ada
#                                   ^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada entity.name.operator.ada
>           foldingRange.Value.lineFoldingOnly.Value;
#^^^^^^^^^^^ source.ada
#           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      if Value.capabilities.textDocument.completion.completionItem.Is_Set
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada entity.name.operator.ada
#                                                                   ^^^^^^ source.ada entity.name.label.ada
>        and then Value.capabilities.textDocument.completion.
#^^^^^^^^ source.ada
#        ^^^ source.ada entity.name.operator.ada
#           ^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
>          completionItem.Value.snippetSupport.Is_Set
#^^^^^^^^^^ source.ada
#          ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^ source.ada entity.name.label.ada
>          and then Value.capabilities.textDocument.completion.
#^^^^^^^^^^ source.ada
#          ^^^ source.ada entity.name.operator.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada entity.name.operator.ada
>            completionItem.Value.snippetSupport.Value
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^ source.ada entity.name.label.ada
>      then
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         --  Client capability to support snippets for completion
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         Self.Completion_Snippets_Enabled := True;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^^ source.ada entity.name.operator.assignment.ada
#                                            ^ source.ada
#                                             ^^^^ source.ada variable.other.constant.ada
#                                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      if not LSP.Types.Is_Empty (Value.rootUri) then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^^ source.ada
#                                 ^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^ source.ada entity.name.label.ada
#                                              ^^ source.ada
#                                                ^^^^ source.ada keyword.other.ada
>         Root := URI_To_File (Value.rootUri);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^^ source.ada entity.name.operator.assignment.ada
#                ^ source.ada
#                 ^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^ source.ada punctuation.ada
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         --  URI isn't provided, rollback to deprecated rootPath
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         Root := Value.rootPath;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^^ source.ada entity.name.operator.assignment.ada
#                ^ source.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  Some clients - notably VS Code as of version 33, when opening a file
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  rather than a workspace - don't provide a root at all. In that case
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  use the current directory as root.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      if LSP.Types.Is_Empty (Root) then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^^ source.ada entity.name.label.ada
#                                 ^^ source.ada
#                                   ^^^^ source.ada keyword.other.ada
>         Root := +".";
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^^ source.ada entity.name.operator.assignment.ada
#                ^ source.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^ source.ada string.quoted.double.ada
#                   ^ source.ada string.quoted.double.ada
#                    ^ source.ada string.quoted.double.ada
#                     ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Self.Root := Create (+To_UTF_8_String (Root));
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^ source.ada entity.name.label.ada
#               ^ source.ada
#                ^^ source.ada entity.name.operator.assignment.ada
#                  ^ source.ada
#                   ^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
#                                             ^^^^ source.ada entity.name.label.ada
#                                                 ^^ source.ada
#                                                   ^ source.ada punctuation.ada
>
>      --  Log the context root
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Self.Trace.Trace ("Context root: " & To_UTF_8_String (Root));
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                       ^ source.ada string.quoted.double.ada
#                                        ^ source.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^ source.ada
#                                           ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^^ source.ada
#                                                            ^^^^ source.ada entity.name.label.ada
#                                                                ^^ source.ada
#                                                                  ^ source.ada punctuation.ada
>
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Initialize_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   -------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Shutdown_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Shutdown_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Shutdown_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^^ source.ada
>      return LSP.Messages.Server_Responses.Shutdown_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      pragma Unreferenced (Self, Request);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.control.ada
#            ^ source.ada
#             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      return Response : LSP.Messages.Server_Responses.Shutdown_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                     ^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>   end On_Shutdown_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada punctuation.ada
>
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_CodeAction_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_CodeAction_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.CodeAction_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
>      return LSP.Messages.Server_Responses.CodeAction_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      Params   : LSP.Messages.CodeActionParams renames Request.params;
#^^^^^^ source.ada
#      ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#            ^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^^^^^^ source.ada keyword.other.ada
#                                                      ^ source.ada
#                                                       ^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada entity.name.operator.ada
#                                                               ^^^^^^ source.ada entity.name.label.ada
#                                                                     ^ source.ada punctuation.ada
>
>      procedure Analyse_In_Context
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Context  : Context_Access;
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada punctuation.ada
>         Document : LSP.Ada_Documents.Document_Access;
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                 ^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada punctuation.ada
>         Result   : out LSP.Messages.CodeAction_Vector;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^^ source.ada storage.modifier.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada punctuation.ada
>         Found    : in out Boolean);
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^ source.ada storage.modifier.ada
#                          ^ source.ada
#                           ^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^ source.ada punctuation.ada
>      --  Perform refactoring ananlysis given Document in the Context.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  Return Found = True if some refactoring is possible. Populate
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  Result with Code_Actions in this case.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      function Has_Assoc_Without_Designator
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Node : Libadalang.Analysis.Basic_Assoc_List) return Boolean;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
#                                                      ^^^^^^ source.ada keyword.other.ada
#                                                            ^ source.ada
#                                                             ^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada punctuation.ada
>      --  Check if Node is Basic_Assoc_List that contains at least one
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  ParamAssoc without a designator.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Analyse_Node
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Context : Context_Access;
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>         Node    : Libadalang.Analysis.Ada_Node;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
>         Result  : out LSP.Messages.CodeAction_Vector;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada punctuation.ada
>         Found   : in out Boolean;
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^ source.ada storage.modifier.ada
#                     ^ source.ada
#                      ^^^ source.ada storage.modifier.ada
#                         ^ source.ada
#                          ^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>         Done    : in out Boolean);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^ source.ada storage.modifier.ada
#                     ^ source.ada
#                      ^^^ source.ada storage.modifier.ada
#                         ^ source.ada
#                          ^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>      --  Look for a possible refactoring in given Node.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  Return Found = True if some refactoring is possible. Populate
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  Result with Code_Actions in this case. Return Done = True if futher
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  analysis has no sense.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      Found_Named_Parameters : Boolean := False;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                            ^ source.ada meta.declaration.object.ada
#                             ^ source.ada meta.declaration.object.ada punctuation.ada
#                              ^ source.ada
#                               ^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada
#                                       ^^ source.ada entity.name.operator.assignment.ada
#                                         ^ source.ada
#                                          ^^^^^ source.ada variable.other.constant.ada
#                                               ^ source.ada punctuation.ada
>      --  We propose only one choice of Named_Parameters refactoring per
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  request. So, if a user clicks on `1` in `A (B (1))` we propose the
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  refactoring for B (1), but not for A (...) call. We consider this
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  as better user experience.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
>      --  This boolean filter to detect such refactoring duplication.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      ----------------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Has_Assoc_Without_Designator --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ----------------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      function Has_Assoc_Without_Designator
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Node : Libadalang.Analysis.Basic_Assoc_List) return Boolean
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
#                                                      ^^^^^^ source.ada keyword.other.ada
#                                                            ^ source.ada
#                                                             ^^^^^^^ source.ada entity.name.label.ada
>      is
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
>         Found : Boolean := False;
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada
#                         ^^ source.ada entity.name.operator.assignment.ada
#                           ^ source.ada
#                            ^^^^^ source.ada variable.other.constant.ada
#                                 ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         for J of Node loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^^^ source.ada keyword.other.ada
>            if J.Kind in Libadalang.Common.Ada_Param_Assoc and then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada storage.modifier.ada
#                        ^ source.ada
#                         ^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^^ source.ada entity.name.operator.ada
#                                                              ^ source.ada
#                                                               ^^^^ source.ada keyword.other.ada
>              J.As_Param_Assoc.F_Designator.Is_Null
#^^^^^^^^^^^^^^ source.ada
#              ^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^ source.ada entity.name.label.ada
>            then
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
>               Found := True;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
#                       ^ source.ada
#                        ^^^^ source.ada variable.other.constant.ada
#                            ^ source.ada punctuation.ada
>               exit;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.control.ada
#                   ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>
>         if not Found then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^ source.ada entity.name.operator.ada
#               ^ source.ada
#                ^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^^^ source.ada keyword.other.ada
>            return False;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^ source.ada variable.other.constant.ada
#                        ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         declare
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
>            Expr : constant Libadalang.Analysis.Ada_Node := Node.Parent;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^ source.ada entity.name.operator.assignment.ada
#                                                           ^ source.ada
#                                                            ^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada entity.name.operator.ada
#                                                                 ^^^^^^ source.ada entity.name.label.ada
#                                                                       ^ source.ada punctuation.ada
>            Name : Libadalang.Analysis.Name;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
>            Decl : Libadalang.Analysis.Basic_Decl;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            case Expr.Kind is
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada keyword.other.ada
>               when Libadalang.Common.Ada_Call_Expr =>
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.other.ada
#                   ^ source.ada
#                    ^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada entity.name.operator.ada
>                  Name := Expr.As_Call_Expr.F_Name;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^ source.ada entity.name.operator.assignment.ada
#                         ^ source.ada
#                          ^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada punctuation.ada
>               when others =>
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.other.ada
#                   ^ source.ada
#                    ^^^^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.ada
>                  return False;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^^ source.ada variable.other.constant.ada
#                              ^ source.ada punctuation.ada
>            end case;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada keyword.other.ada
#                    ^ source.ada punctuation.ada
>
>            Decl := Name.P_Referenced_Decl;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^^ source.ada entity.name.operator.assignment.ada
#                   ^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>
>            if Decl.Is_Null then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^^^ source.ada keyword.other.ada
>               return False;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^^ source.ada variable.other.constant.ada
#                           ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>
>            case Decl.Kind is
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada keyword.other.ada
>               when Libadalang.Common.Ada_Base_Subp_Spec =>
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.other.ada
#                   ^ source.ada
#                    ^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^ source.ada entity.name.operator.ada
>                  return True;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^ source.ada variable.other.constant.ada
#                             ^ source.ada punctuation.ada
>               when Libadalang.Common.Ada_Base_Subp_Body =>
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.other.ada
#                   ^ source.ada
#                    ^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^ source.ada entity.name.operator.ada
>                  return True;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^ source.ada variable.other.constant.ada
#                             ^ source.ada punctuation.ada
>               when Libadalang.Common.Ada_Basic_Subp_Decl =>
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.other.ada
#                   ^ source.ada
#                    ^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^^ source.ada entity.name.operator.ada
>                  return True;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^ source.ada variable.other.constant.ada
#                             ^ source.ada punctuation.ada
>               when others =>
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.other.ada
#                   ^ source.ada
#                    ^^^^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.ada
>                  return False;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^^ source.ada variable.other.constant.ada
#                              ^ source.ada punctuation.ada
>            end case;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada keyword.other.ada
#                    ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      end Has_Assoc_Without_Designator;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>
>      ------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Analyse_Node --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Analyse_Node
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Context : Context_Access;
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>         Node    : Libadalang.Analysis.Ada_Node;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
>         Result  : out LSP.Messages.CodeAction_Vector;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada punctuation.ada
>         Found   : in out Boolean;
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^ source.ada storage.modifier.ada
#                     ^ source.ada
#                      ^^^ source.ada storage.modifier.ada
#                         ^ source.ada
#                          ^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>         Done    : in out Boolean)
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^ source.ada storage.modifier.ada
#                     ^ source.ada
#                      ^^^ source.ada storage.modifier.ada
#                         ^ source.ada
#                          ^^^^^^^ source.ada entity.name.label.ada
#                                 ^^ source.ada
>      is
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
>         procedure Append_Command (Node : Libadalang.Analysis.Ada_Node);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                  ^ source.ada meta.declaration.subprogram.ada
#                   ^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                 ^^ source.ada
#                                   ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                       ^ source.ada meta.declaration.object.ada
#                                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                                         ^ source.ada
#                                          ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada entity.name.operator.ada
#                                                              ^^^^^^^^ source.ada entity.name.label.ada
#                                                                      ^ source.ada
#                                                                       ^ source.ada punctuation.ada
>         --  Contruct a command and append it to Result
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         --------------------
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         -- Append_Command --
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --------------------
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         procedure Append_Command (Node : Libadalang.Analysis.Ada_Node) is
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                  ^ source.ada meta.declaration.subprogram.ada
#                   ^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                 ^^ source.ada
#                                   ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                       ^ source.ada meta.declaration.object.ada
#                                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                                         ^ source.ada
#                                          ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada entity.name.operator.ada
#                                                              ^^^^^^^^ source.ada entity.name.label.ada
#                                                                      ^^ source.ada
#                                                                        ^^ source.ada keyword.other.ada
>            Command : LSP.Ada_Handlers.Named_Parameters_Commands.Command;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada entity.name.operator.ada
#                                                                 ^^^^^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada punctuation.ada
>            Pointer : LSP.Commands.Command_Pointer;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada punctuation.ada
>            Item    : LSP.Messages.CodeAction;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^^^^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>            Where   : constant LSP.Messages.Location :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                 ^^^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^^^^^^ source.ada keyword.other.ada
#                              ^ source.ada
#                               ^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada
#                                                     ^^ source.ada entity.name.operator.assignment.ada
>              LSP.Lal_Utils.Get_Node_Location (Node);
#^^^^^^^^^^^^^^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^^ source.ada
#                                               ^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            if Found_Named_Parameters then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada keyword.other.ada
>               return;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>
>            Command.Initialize
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^ source.ada entity.name.label.ada
>              (Context => Context.all,
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^ source.ada keyword.other.ada
#                                     ^ source.ada punctuation.ada
>               Where   => ((uri => Where.uri), Where.span.first));
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^^^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^^^ source.ada
#                            ^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.ada
#                                  ^ source.ada
#                                   ^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^ source.ada punctuation.ada
#                                              ^ source.ada
#                                               ^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^^^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
#                                                                 ^ source.ada punctuation.ada
>
>            Pointer.Set (Command);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^ source.ada entity.name.label.ada
#                       ^^ source.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>
>            Item :=
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^^ source.ada entity.name.operator.assignment.ada
>              (title       => +"Name parameters in the call",
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^^^^^^^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^ source.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^ source.ada string.quoted.double.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                           ^ source.ada string.quoted.double.ada
#                                                            ^ source.ada punctuation.ada
>               kind        => (Is_Set => True,
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^^^^^^^^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^^ source.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^ source.ada variable.other.constant.ada
#                                             ^ source.ada punctuation.ada
>                               Value  => LSP.Messages.RefactorRewrite),
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                               ^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                     ^ source.ada
#                                                                      ^ source.ada punctuation.ada
>               diagnostics => (Is_Set => False),
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^^ source.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^^ source.ada variable.other.constant.ada
#                                              ^ source.ada
#                                               ^ source.ada punctuation.ada
>               edit        => (Is_Set => False),
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^^^^^^^^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^^ source.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^^ source.ada variable.other.constant.ada
#                                              ^ source.ada
#                                               ^ source.ada punctuation.ada
>               isPreferred => (Is_Set => False),
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^^ source.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^^ source.ada variable.other.constant.ada
#                                              ^ source.ada
#                                               ^ source.ada punctuation.ada
>               command     => (Is_Set => True,
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^ source.ada entity.name.label.ada
#                      ^^^^^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^^ source.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^ source.ada variable.other.constant.ada
#                                             ^ source.ada punctuation.ada
>                               Value  =>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                               ^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
>                                 (Is_Unknown => False,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                  ^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^^ source.ada entity.name.operator.ada
#                                               ^ source.ada
#                                                ^^^^^ source.ada variable.other.constant.ada
#                                                     ^ source.ada punctuation.ada
>                                  title      => +"",
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                  ^^^^^ source.ada entity.name.label.ada
#                                       ^^^^^^ source.ada
#                                             ^^ source.ada entity.name.operator.ada
#                                               ^ source.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^ source.ada string.quoted.double.ada
#                                                  ^ source.ada string.quoted.double.ada
#                                                   ^ source.ada punctuation.ada
>                                  Custom     => Pointer)));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                  ^^^^^^ source.ada entity.name.label.ada
#                                        ^^^^^ source.ada
#                                             ^^ source.ada entity.name.operator.ada
#                                               ^ source.ada
#                                                ^^^^^^^ source.ada entity.name.label.ada
#                                                       ^^^ source.ada
#                                                          ^ source.ada punctuation.ada
>
>            Result.Append (Item);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^ source.ada punctuation.ada
>            Found := True;
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.assignment.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada punctuation.ada
>            Found_Named_Parameters := True;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.assignment.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada variable.other.constant.ada
#                                          ^ source.ada punctuation.ada
>         end Append_Command;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>         Kind : constant Libadalang.Common.Ada_Node_Kind_Type := Node.Kind;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada
#                                                              ^^ source.ada entity.name.operator.assignment.ada
#                                                                ^ source.ada
#                                                                 ^^^^ source.ada entity.name.label.ada
#                                                                     ^ source.ada entity.name.operator.ada
#                                                                      ^^^^ source.ada entity.name.label.ada
#                                                                          ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         case Kind is
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
>            when Libadalang.Common.Ada_Stmt
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^ source.ada entity.name.label.ada
>               | Libadalang.Common.Ada_Basic_Decl =>
#^^^^^^^^^^^^^^^ source.ada
#               ^ source.ada entity.name.operator.ada
#                ^ source.ada
#                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^^ source.ada entity.name.operator.ada
>
>               Done := True;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^ source.ada entity.name.operator.assignment.ada
#                      ^ source.ada
#                       ^^^^ source.ada variable.other.constant.ada
#                           ^ source.ada punctuation.ada
>
>            when Libadalang.Common.Ada_Basic_Assoc_List =>
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^^ source.ada entity.name.operator.ada
>               if Has_Assoc_Without_Designator (Node.As_Basic_Assoc_List) then
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^^ source.ada
#                                                ^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                        ^^ source.ada
#                                                                          ^^^^ source.ada keyword.other.ada
>                  Append_Command (Node);
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada
#                                       ^ source.ada punctuation.ada
>               end if;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>
>            when Libadalang.Common.Ada_Call_Expr =>
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^ source.ada entity.name.operator.ada
>               declare
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^ source.ada keyword.other.ada
>                  List : constant Libadalang.Analysis.Ada_Node :=
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^^ source.ada entity.name.operator.assignment.ada
>                    Node.As_Call_Expr.F_Suffix;
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada punctuation.ada
>               begin
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada keyword.other.ada
>                  if List.Kind in Libadalang.Common.Ada_Basic_Assoc_List
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^^ source.ada storage.modifier.ada
#                                 ^ source.ada
#                                  ^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                    and then Has_Assoc_Without_Designator
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^ source.ada keyword.other.ada
#                            ^ source.ada
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                      (List.As_Basic_Assoc_List)
#^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                       ^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^^ source.ada
>                  then
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada keyword.other.ada
>                     Append_Command (List);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^ source.ada punctuation.ada
>                  end if;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^ source.ada keyword.other.ada
#                        ^ source.ada punctuation.ada
>               end;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>
>            when others =>
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.ada
>               null;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada variable.other.constant.ada
#                   ^ source.ada punctuation.ada
>
>         end case;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>      end Analyse_Node;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Analyse_In_Context --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Analyse_In_Context
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Context  : Context_Access;
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada punctuation.ada
>         Document : LSP.Ada_Documents.Document_Access;
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                 ^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada punctuation.ada
>         Result   : out LSP.Messages.CodeAction_Vector;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^^ source.ada storage.modifier.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada punctuation.ada
>         Found    : in out Boolean)
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^ source.ada storage.modifier.ada
#                          ^ source.ada
#                           ^^^^^^^ source.ada entity.name.label.ada
#                                  ^^ source.ada
>      is
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
>         Done : Boolean := False;  --  True when futher analysis has no sense
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.assignment.ada
#                          ^ source.ada
#                           ^^^^^ source.ada variable.other.constant.ada
#                                ^ source.ada punctuation.ada
#                                 ^^ source.ada
#                                   ^^ source.ada comment.line.ada
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         Node : Libadalang.Analysis.Ada_Node :=
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^^ source.ada entity.name.operator.assignment.ada
>           Document.Get_Node_At (Context.all, Params.span.first);
#^^^^^^^^^^^ source.ada
#           ^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^ source.ada keyword.other.ada
#                                            ^ source.ada punctuation.ada
#                                             ^ source.ada
#                                              ^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         while not Done and then not Node.Is_Null loop
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.operator.ada
#                           ^ source.ada
#                            ^^^^ source.ada keyword.other.ada
#                                ^ source.ada
#                                 ^^^ source.ada entity.name.operator.ada
#                                    ^ source.ada
#                                     ^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^^^^ source.ada keyword.other.ada
>            Analyse_Node (Context, Node, Result, Found, Done);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^^ source.ada
#                          ^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
#                                  ^ source.ada
#                                   ^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
#                                        ^ source.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada punctuation.ada
#                                                       ^ source.ada
#                                                        ^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada
#                                                             ^ source.ada punctuation.ada
>            Node := Node.Parent;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^^ source.ada entity.name.operator.assignment.ada
#                   ^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>      end Analyse_In_Context;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>      Document : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>        Get_Open_Document (Self, Params.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^ source.ada punctuation.ada
>
>      Response : LSP.Messages.Server_Responses.CodeAction_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>
>      Found : Boolean := False;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^^^^^ source.ada variable.other.constant.ada
#                              ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Document = null then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^^ source.ada variable.other.constant.ada
#                        ^ source.ada
#                         ^^^^ source.ada keyword.other.ada
>         return Response;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  Find any context where we can do some refactoring
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      for C of Self.Contexts_For_URI (Params.textDocument.uri) loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^^^ source.ada entity.name.label.ada
#                                                             ^^ source.ada
#                                                               ^^^^ source.ada keyword.other.ada
>         Analyse_In_Context (C, Document, Response.result, Found);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
#                               ^ source.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
#                                         ^ source.ada
#                                          ^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada punctuation.ada
#                                                          ^ source.ada
#                                                           ^^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada
#                                                                 ^ source.ada punctuation.ada
>
>         exit when Request.Canceled or else Found;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.control.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^ source.ada entity.name.operator.ada
#                                      ^ source.ada
#                                       ^^^^ source.ada keyword.other.ada
#                                           ^ source.ada
#                                            ^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_CodeAction_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   --------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Execute_Command_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Execute_Command_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Execute_Command_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^^ source.ada
>      return LSP.Messages.Server_Responses.ExecuteCommand_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      Error    : LSP.Errors.Optional_ResponseError;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada punctuation.ada
>      Params   : LSP.Messages.ExecuteCommandParams renames
#^^^^^^ source.ada
#      ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#            ^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.ExecuteCommand_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => True);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Params.Is_Unknown or else Params.Custom.Is_Null then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^ source.ada
#                              ^^^^ source.ada keyword.other.ada
#                                  ^ source.ada
#                                   ^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^^^ source.ada keyword.other.ada
>         Response.error :=
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.assignment.ada
>           (True,
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada variable.other.constant.ada
#                ^ source.ada punctuation.ada
>            (code => LSP.Errors.InternalError,
#^^^^^^^^^^^^^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>             message => +"Not implemented",
#^^^^^^^^^^^^^ source.ada
#             ^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^ source.ada string.quoted.double.ada
#                          ^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                         ^ source.ada string.quoted.double.ada
#                                          ^ source.ada punctuation.ada
>             data    => <>));
#^^^^^^^^^^^^^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^^^^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.ada
#                          ^^ source.ada
#                            ^ source.ada punctuation.ada
>         return Response;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Params.Custom.Unchecked_Get.Execute
#^^^^^^ source.ada
#      ^^^^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^ source.ada entity.name.label.ada
>        (Handler => Self,
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>         Client  => Self.Server,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^^ source.ada
#                 ^^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>         Error   => Error);
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^^ source.ada
#                 ^^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>
>      if Error.Is_Set then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^^^ source.ada keyword.other.ada
>         Response.error := Error;
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.assignment.ada
#                          ^ source.ada
#                           ^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>         return Response;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  No particular response in case of success.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      return (Is_Error => False,
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^^ source.ada
#              ^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^^^^ source.ada variable.other.constant.ada
#                               ^ source.ada punctuation.ada
>              Error    => (Is_Set => False),
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^ source.ada entity.name.label.ada
#                   ^^^^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^^ source.ada
#                           ^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.ada
#                                    ^ source.ada
#                                     ^^^^^ source.ada variable.other.constant.ada
#                                          ^ source.ada
#                                           ^ source.ada punctuation.ada
>              others   => <>);
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^ source.ada keyword.other.ada
#                    ^^^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^ source.ada punctuation.ada
>   end On_Execute_Command_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>
>   ----------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Declaration_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ----------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Declaration_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Declaration_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                ^^ source.ada
>      return LSP.Messages.Server_Responses.Location_Link_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>
>      Position   : LSP.Messages.TextDocumentPositionParams renames
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      Response   : LSP.Messages.Server_Responses.Location_Link_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>      Imprecise  : Boolean := False;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^^^^^ source.ada variable.other.constant.ada
#                                   ^ source.ada punctuation.ada
>
>      Document : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>        Get_Open_Document (Self, Position.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada entity.name.operator.ada
#                                                       ^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      for C of Self.Contexts_For_URI (Position.textDocument.uri) loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
#                                                                 ^^^^ source.ada keyword.other.ada
>         C.Append_Declarations
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Document,
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada punctuation.ada
>            Position,
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada punctuation.ada
>            Response.result,
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>            Imprecise);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada punctuation.ada
>
>         exit when Request.Canceled;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.control.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      if Imprecise then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
>         Self.Show_Message
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
>           ("The result of 'declaration' is approximate.",
#^^^^^^^^^^^^ source.ada
#            ^ source.ada string.quoted.double.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                        ^ source.ada string.quoted.double.ada
#                                                         ^ source.ada punctuation.ada
>            LSP.Messages.Warning);
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Sort_And_Remove_Duplicates (Response.result.Locations);
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Declaration_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Implementation_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Implementation_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Implementation_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^^ source.ada
>      return LSP.Messages.Server_Responses.Location_Link_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use Libadalang.Analysis;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>      Position   : LSP.Messages.TextDocumentPositionParams renames
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      Response   : LSP.Messages.Server_Responses.Location_Link_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>      Imprecise  : Boolean := False;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^^^^^ source.ada variable.other.constant.ada
#                                   ^ source.ada punctuation.ada
>
>      Document : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>        Get_Open_Document (Self, Position.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada entity.name.operator.ada
#                                                       ^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>
>      procedure Resolve_In_Context (C : Context_Access);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                  ^^ source.ada
#                                    ^ source.ada meta.declaration.object.ada variable.name.ada
#                                     ^ source.ada meta.declaration.object.ada
#                                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>      --  Utility function to gather results on one context
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Resolve_In_Context --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Resolve_In_Context (C : Context_Access) is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                  ^^ source.ada
#                                    ^ source.ada meta.declaration.object.ada variable.name.ada
#                                     ^ source.ada meta.declaration.object.ada
#                                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
#                                                        ^^ source.ada keyword.other.ada
>         Name_Node      : constant Name := LSP.Lal_Utils.Get_Node_As_Name
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^^^^^^ source.ada meta.declaration.object.ada
#                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                         ^ source.ada
#                          ^^^^^^^^ source.ada keyword.other.ada
#                                  ^ source.ada
#                                   ^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^^ source.ada entity.name.operator.assignment.ada
#                                          ^ source.ada
#                                           ^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (C.Get_Node_At (Document, Position));
#^^^^^^^^^^^^ source.ada
#            ^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^^ source.ada
#                                               ^ source.ada punctuation.ada
>
>         procedure List_Bodies_Of
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                  ^ source.ada meta.declaration.subprogram.ada
#                   ^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>           (Definition : Defining_Name;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>            Kind       : LSP.Messages.AlsReferenceKind_Set);
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^^^^^^^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>         --  List all the bodies of Definition, with the given kind as label
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         --------------------
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         -- List_Bodies_Of --
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --------------------
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         procedure List_Bodies_Of
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                  ^ source.ada meta.declaration.subprogram.ada
#                   ^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>           (Definition : Defining_Name;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>            Kind       : LSP.Messages.AlsReferenceKind_Set)
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^^^^^^^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^^ source.ada
>         is
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
>            Next_Part  : Defining_Name;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                     ^^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>            Loop_Count : Natural := 0;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^^ source.ada entity.name.operator.assignment.ada
#                                   ^ source.ada
#                                    ^ source.ada constant.numeric.ada
#                                     ^ source.ada punctuation.ada
>            Parents    : constant Ada_Node_Array := Definition.Parents;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^^^^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^ source.ada entity.name.operator.assignment.ada
#                                                   ^ source.ada
#                                                    ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada entity.name.operator.ada
#                                                               ^^^^^^^ source.ada entity.name.label.ada
#                                                                      ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            --  If this happens to be the definition of a subprogram that
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  does not call for a body, let's consider that this *is* the
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  implementation. Return this, and do not attempt to look
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  for secondary implementations in this case.
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            if Parents'Length > 2 and then Parents (Parents'First + 2).Kind in
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^ source.ada constant.numeric.ada
#                                 ^ source.ada
#                                  ^^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada keyword.other.ada
#                                          ^ source.ada
#                                           ^^^^^^^ source.ada entity.name.label.ada
#                                                  ^^ source.ada
#                                                    ^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^ source.ada entity.name.operator.ada
#                                                                   ^ source.ada
#                                                                    ^ source.ada constant.numeric.ada
#                                                                     ^ source.ada
#                                                                      ^ source.ada entity.name.operator.ada
#                                                                       ^^^^ source.ada entity.name.label.ada
#                                                                           ^ source.ada
#                                                                            ^^ source.ada storage.modifier.ada
>              Libadalang.Common.Ada_Null_Subp_Decl     --  "is null" procedure?
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^^^^^ source.ada
#                                                       ^^ source.ada comment.line.ada
#                                                         ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                | Libadalang.Common.Ada_Expr_Function  --  expression function?
#^^^^^^^^^^^^^^^^ source.ada
#                ^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^^ source.ada comment.line.ada
#                                                         ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            then
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
>               Append_Location (Response.result, Definition, Kind);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada punctuation.ada
#                                                            ^ source.ada
#                                                             ^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^ source.ada punctuation.ada
>               return;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>
>            --  If the definition that we found is a body, add this to the list
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            if Parents'Length > 2 and then Parents (Parents'First + 2).Kind in
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^ source.ada constant.numeric.ada
#                                 ^ source.ada
#                                  ^^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada keyword.other.ada
#                                          ^ source.ada
#                                           ^^^^^^^ source.ada entity.name.label.ada
#                                                  ^^ source.ada
#                                                    ^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^ source.ada entity.name.operator.ada
#                                                                   ^ source.ada
#                                                                    ^ source.ada constant.numeric.ada
#                                                                     ^ source.ada
#                                                                      ^ source.ada entity.name.operator.ada
#                                                                       ^^^^ source.ada entity.name.label.ada
#                                                                           ^ source.ada
#                                                                            ^^ source.ada storage.modifier.ada
>              Libadalang.Common.Ada_Subp_Body
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>            then
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
>               Append_Location (Response.result, Definition, Kind);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada punctuation.ada
#                                                            ^ source.ada
#                                                             ^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>
>            Next_Part := Definition;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>
>            --  Now that we have a definition, list all the implementations for
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  this definition. We do this by iterating on Find_Next_Part
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            loop
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
>               --  Safety net, don't rely on the results making sense, since
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>               --  the code might be invalid.
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>               Next_Part := Find_Next_Part (Next_Part, Self.Trace);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada
#                         ^^ source.ada entity.name.operator.assignment.ada
#                           ^ source.ada
#                            ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
#                                            ^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada punctuation.ada
#                                                      ^ source.ada
#                                                       ^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^ source.ada punctuation.ada
>
>               exit when Next_Part = No_Defining_Name;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.control.ada
#                   ^ source.ada
#                    ^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^ source.ada
#                                     ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada punctuation.ada
>
>               Append_Location (Response.result, Next_Part, Kind);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada punctuation.ada
#                                                           ^ source.ada
#                                                            ^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada
#                                                                 ^ source.ada punctuation.ada
>
>               Loop_Count := Loop_Count + 1;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.assignment.ada
#                            ^ source.ada
#                             ^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^ source.ada
#                                          ^ source.ada constant.numeric.ada
#                                           ^ source.ada punctuation.ada
>               if Loop_Count > 5 then
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^ source.ada
#                               ^ source.ada constant.numeric.ada
#                                ^ source.ada
#                                 ^^^^ source.ada keyword.other.ada
>                  Imprecise := True;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^ source.ada entity.name.operator.assignment.ada
#                              ^ source.ada
#                               ^^^^ source.ada variable.other.constant.ada
#                                   ^ source.ada punctuation.ada
>                  exit;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada keyword.control.ada
#                      ^ source.ada punctuation.ada
>               end if;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>            end loop;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada keyword.other.ada
#                    ^ source.ada punctuation.ada
>         end List_Bodies_Of;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>         Definition     : Defining_Name;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^^^^^ source.ada meta.declaration.object.ada
#                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>         This_Imprecise : Boolean;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                       ^ source.ada meta.declaration.object.ada
#                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                         ^ source.ada
#                          ^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>         Decl           : Basic_Decl;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^^^^^^^^^^ source.ada meta.declaration.object.ada
#                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                         ^ source.ada
#                          ^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         if Name_Node = No_Name then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         --  Find the definition
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         Definition := Resolve_Name (Name_Node, Self.Trace, This_Imprecise);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^ source.ada entity.name.operator.assignment.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada punctuation.ada
#                                               ^ source.ada
#                                                ^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada punctuation.ada
#                                                           ^ source.ada
#                                                            ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                          ^ source.ada
#                                                                           ^ source.ada punctuation.ada
>         Imprecise := Imprecise or This_Imprecise;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.assignment.ada
#                     ^ source.ada
#                      ^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.ada
#                                  ^ source.ada
#                                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>
>         --  If we didn't find a definition, give up for this context
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         if Definition = No_Defining_Name then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         --  First list the bodies of this definition
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         List_Bodies_Of (Definition, LSP.Messages.Empty_Set);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^^ source.ada
#                         ^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^ source.ada punctuation.ada
>
>         --  Then list the bodies of the parent implementations
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         Decl := Definition.P_Basic_Decl;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^^ source.ada entity.name.operator.assignment.ada
#                ^ source.ada
#                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
>         for Subp of C.Find_All_Base_Declarations (Decl, This_Imprecise) loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^^ source.ada
#                                                   ^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada punctuation.ada
#                                                        ^ source.ada
#                                                         ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                       ^^ source.ada
#                                                                         ^^^^ source.ada keyword.other.ada
>            List_Bodies_Of (Subp.P_Defining_Name, Is_Parent);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^^ source.ada
#                            ^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
#                                                 ^ source.ada
#                                                  ^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>         Imprecise := Imprecise or This_Imprecise;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.assignment.ada
#                     ^ source.ada
#                      ^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.ada
#                                  ^ source.ada
#                                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>
>         --  And finally the bodies of child implementations
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         for Subp of C.Find_All_Overrides (Decl, This_Imprecise) loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
#                                                                 ^^^^ source.ada keyword.other.ada
>            List_Bodies_Of (Subp.P_Defining_Name, Is_Child);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^^ source.ada
#                            ^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
#                                                 ^ source.ada
#                                                  ^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>         Imprecise := Imprecise or This_Imprecise;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.assignment.ada
#                     ^ source.ada
#                      ^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.ada
#                                  ^ source.ada
#                                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>      end Resolve_In_Context;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      for C of Self.Contexts_For_URI (Position.textDocument.uri) loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
#                                                                 ^^^^ source.ada keyword.other.ada
>         Resolve_In_Context (C);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^ source.ada punctuation.ada
>
>         exit when Request.Canceled;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.control.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      if Imprecise then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
>         Self.Show_Message
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
>           ("The result of 'implementation' is approximate.",
#^^^^^^^^^^^^ source.ada
#            ^ source.ada string.quoted.double.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                           ^ source.ada string.quoted.double.ada
#                                                            ^ source.ada punctuation.ada
>            LSP.Messages.Warning);
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Sort_And_Remove_Duplicates (Response.result.Locations);
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Implementation_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Definition_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Definition_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Definition_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
>      return LSP.Messages.Server_Responses.Location_Link_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use Libadalang.Analysis;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>      Value      : LSP.Messages.TextDocumentPositionParams renames
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      Response   : LSP.Messages.Server_Responses.Location_Link_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>      Imprecise  : Boolean := False;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^^^^^ source.ada variable.other.constant.ada
#                                   ^ source.ada punctuation.ada
>
>      Document : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>        Get_Open_Document (Self, Value.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>
>      procedure Resolve_In_Context (C : Context_Access);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                  ^^ source.ada
#                                    ^ source.ada meta.declaration.object.ada variable.name.ada
#                                     ^ source.ada meta.declaration.object.ada
#                                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>      --  Utility function, appends to Resonse.result all results of the
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  definition requests found in context C.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Resolve_In_Context --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Resolve_In_Context (C : Context_Access) is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                  ^^ source.ada
#                                    ^ source.ada meta.declaration.object.ada variable.name.ada
#                                     ^ source.ada meta.declaration.object.ada
#                                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
#                                                        ^^ source.ada keyword.other.ada
>         Name_Node               : constant Name :=
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada
#                                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                                  ^ source.ada
#                                   ^^^^^^^^ source.ada keyword.other.ada
#                                           ^ source.ada
#                                            ^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^ source.ada entity.name.operator.assignment.ada
>                                     LSP.Lal_Utils.Get_Node_As_Name
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                                       (C.Get_Node_At (Document, Value));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                        ^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada punctuation.ada
#                                                                ^ source.ada
#                                                                 ^^^^^ source.ada entity.name.label.ada
#                                                                      ^^ source.ada
#                                                                        ^ source.ada punctuation.ada
>         Definition              : Defining_Name;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada
#                                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                                  ^ source.ada
#                                   ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
>         Other_Part              : Defining_Name;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada
#                                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                                  ^ source.ada
#                                   ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
>         Manual_Fallback         : Defining_Name;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                        ^^^^^^^^^ source.ada meta.declaration.object.ada
#                                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                                  ^ source.ada
#                                   ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
>         Decl_For_Find_Overrides : Basic_Decl;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                ^ source.ada meta.declaration.object.ada
#                                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                                  ^ source.ada
#                                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         if Name_Node = No_Name then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         --  Check if we are on some defining name
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         Definition := Get_Name_As_Defining (Name_Node);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^ source.ada entity.name.operator.assignment.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
#                                             ^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>
>         if Definition = No_Defining_Name then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^^^^ source.ada keyword.other.ada
>            Self.Imprecise_Resolve_Name
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>              (C, Value, Definition, LSP.Messages.Info);
#^^^^^^^^^^^^^^^ source.ada
#               ^ source.ada entity.name.label.ada
#                ^ source.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>
>            if Definition /= No_Defining_Name then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^^^^ source.ada keyword.other.ada
>               Append_Location (Response.result, Definition);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^ source.ada punctuation.ada
>
>               Decl_For_Find_Overrides := Definition.P_Basic_Decl;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada
#                                       ^^ source.ada entity.name.operator.assignment.ada
#                                         ^ source.ada
#                                          ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         else  --  If we are on a defining_name already
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
#             ^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            Other_Part := Find_Next_Part (Definition, Self.Trace);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^ source.ada entity.name.operator.assignment.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^^ source.ada
#                                          ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
#                                                     ^ source.ada
#                                                      ^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada
#                                                                 ^ source.ada punctuation.ada
>
>            Decl_For_Find_Overrides := Definition.P_Basic_Decl;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^ source.ada entity.name.operator.assignment.ada
#                                      ^ source.ada
#                                       ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada punctuation.ada
>
>            if Other_Part = No_Defining_Name then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^ source.ada
#                            ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^^^^ source.ada keyword.other.ada
>               --  No next part is found. Check first defining name
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>               Other_Part := Find_Canonical_Part (Definition, Self.Trace);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.assignment.ada
#                            ^ source.ada
#                             ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^^ source.ada
#                                                  ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada punctuation.ada
#                                                             ^ source.ada
#                                                              ^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada entity.name.operator.ada
#                                                                   ^^^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>
>            if Other_Part /= No_Defining_Name then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^^^^ source.ada keyword.other.ada
>               Append_Location (Response.result, Other_Part);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^ source.ada punctuation.ada
>            else
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
>               --  We were on a defining name, but did not manage to find
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>               --  an answer using Find_Next_Part / Find_Canonical_Part.
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>               --  Use the manual fallback to attempt to find a good enough
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>               --  result.
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^ source.ada comment.line.ada
>               Manual_Fallback := Find_Other_Part_Fallback
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^^ source.ada entity.name.operator.assignment.ada
#                                 ^ source.ada
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                 (Definition, Self.Trace);
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
#                             ^ source.ada
#                              ^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>
>               if Manual_Fallback /= No_Defining_Name then
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.ada
#                                    ^ source.ada
#                                     ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^^^ source.ada keyword.other.ada
>                  --  We have found a result using the imprecise heuristics.
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada comment.line.ada
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                  --  We'll warn the user and send the result.
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada comment.line.ada
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                  Imprecise := True;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^ source.ada entity.name.operator.assignment.ada
#                              ^ source.ada
#                               ^^^^ source.ada variable.other.constant.ada
#                                   ^ source.ada punctuation.ada
>                  Append_Location (Response.result, Manual_Fallback);
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^^ source.ada
#                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada punctuation.ada
#                                                   ^ source.ada
#                                                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada
#                                                                    ^ source.ada punctuation.ada
>               end if;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         if Decl_For_Find_Overrides /= Libadalang.Analysis.No_Basic_Decl then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^ source.ada entity.name.operator.ada
#                                      ^ source.ada
#                                       ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^^^^ source.ada keyword.other.ada
>            declare
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada keyword.other.ada
>               Imprecise_Over       : Boolean;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                             ^^^^^^^ source.ada meta.declaration.object.ada
#                                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>               Imprecise_Base       : Boolean;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                             ^^^^^^^ source.ada meta.declaration.object.ada
#                                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>               Overriding_Subps     : constant Basic_Decl_Array :=
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                               ^^^^^ source.ada meta.declaration.object.ada
#                                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^^^^ source.ada keyword.other.ada
#                                              ^ source.ada
#                                               ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^^ source.ada entity.name.operator.assignment.ada
>                 C.Find_All_Overrides
#^^^^^^^^^^^^^^^^^ source.ada
#                 ^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                   (Decl_For_Find_Overrides,
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
>                    Imprecise_Results => Imprecise_Over);
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>               Base_Subps           : constant Basic_Decl_Array :=
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                         ^^^^^^^^^^^ source.ada meta.declaration.object.ada
#                                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^^^^ source.ada keyword.other.ada
#                                              ^ source.ada
#                                               ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^^ source.ada entity.name.operator.assignment.ada
>                 C.Find_All_Base_Declarations
#^^^^^^^^^^^^^^^^^ source.ada
#                 ^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                   (Decl_For_Find_Overrides,
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
>                    Imprecise_Results => Imprecise_Base);
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>            begin
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada keyword.other.ada
>               for Subp of Base_Subps loop
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada keyword.other.ada
>                  Append_Location
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                    (Response.result, Subp.P_Defining_Name, Is_Parent);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada punctuation.ada
#                                                           ^ source.ada
#                                                            ^^^^^^^^^ source.ada entity.name.label.ada
#                                                                     ^ source.ada
#                                                                      ^ source.ada punctuation.ada
>               end loop;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
#                       ^ source.ada punctuation.ada
>               for Subp of Overriding_Subps loop
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^^^ source.ada keyword.other.ada
>                  Append_Location
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                    (Response.result, Subp.P_Defining_Name, Is_Child);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada punctuation.ada
#                                                           ^ source.ada
#                                                            ^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^ source.ada punctuation.ada
>               end loop;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
#                       ^ source.ada punctuation.ada
>               Imprecise := Imprecise or Imprecise_Over or Imprecise_Base;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada
#                         ^^ source.ada entity.name.operator.assignment.ada
#                           ^ source.ada
#                            ^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^^ source.ada entity.name.operator.ada
#                                                          ^ source.ada
#                                                           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                         ^ source.ada punctuation.ada
>            end;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      end Resolve_In_Context;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      for C of Self.Contexts_For_URI (Value.textDocument.uri) loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^ source.ada entity.name.label.ada
#                                                            ^^ source.ada
#                                                              ^^^^ source.ada keyword.other.ada
>         Resolve_In_Context (C);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^ source.ada punctuation.ada
>
>         exit when Request.Canceled;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.control.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      if Imprecise then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
>         Self.Show_Message
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
>           ("The result of 'definition' is approximate.",
#^^^^^^^^^^^^ source.ada
#            ^ source.ada string.quoted.double.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                       ^ source.ada string.quoted.double.ada
#                                                        ^ source.ada punctuation.ada
>            LSP.Messages.Warning);
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Sort_And_Remove_Duplicates (Response.result.Locations);
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Definition_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   --------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Type_Definition_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Type_Definition_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Type_Definition_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^^ source.ada
>      return LSP.Messages.Server_Responses.Location_Link_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use Libadalang.Analysis;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>      Position   : LSP.Messages.TextDocumentPositionParams renames
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      Response   : LSP.Messages.Server_Responses.Location_Link_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>      Imprecise  : Boolean := False;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^^^^^ source.ada variable.other.constant.ada
#                                   ^ source.ada punctuation.ada
>
>      Document : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>        Get_Open_Document (Self, Position.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada entity.name.operator.ada
#                                                       ^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>
>      procedure Resolve_In_Context (C : Context_Access);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                  ^^ source.ada
#                                    ^ source.ada meta.declaration.object.ada variable.name.ada
#                                     ^ source.ada meta.declaration.object.ada
#                                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>      --  Utility function to gather results on one context
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Resolve_In_Context --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Resolve_In_Context (C : Context_Access) is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                  ^^ source.ada
#                                    ^ source.ada meta.declaration.object.ada variable.name.ada
#                                     ^ source.ada meta.declaration.object.ada
#                                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
#                                                        ^^ source.ada keyword.other.ada
>         Name_Node      : constant Name := LSP.Lal_Utils.Get_Node_As_Name
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^^^^^^ source.ada meta.declaration.object.ada
#                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                         ^ source.ada
#                          ^^^^^^^^ source.ada keyword.other.ada
#                                  ^ source.ada
#                                   ^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^^ source.ada entity.name.operator.assignment.ada
#                                          ^ source.ada
#                                           ^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>             (C.Get_Node_At (Document, Position));
#^^^^^^^^^^^^^^ source.ada
#              ^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
#                                      ^ source.ada
#                                       ^^^^^^^^ source.ada entity.name.label.ada
#                                               ^^ source.ada
#                                                 ^ source.ada punctuation.ada
>         Definition     : Defining_Name;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^^^^^ source.ada meta.declaration.object.ada
#                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>         Type_Decl : Base_Type_Decl;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^ source.ada meta.declaration.object.ada
#                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                    ^ source.ada
#                     ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         if Name_Node = No_Name then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         if Name_Node.P_Is_Defining then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^^^ source.ada keyword.other.ada
>            --  Special case if Name_Node is defining, for instance on the X in
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --      X : My_Type;
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            declare
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada keyword.other.ada
>               Def_Name : constant Defining_Name :=
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                       ^ source.ada meta.declaration.object.ada
#                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                         ^ source.ada
#                          ^^^^^^^^ source.ada keyword.other.ada
#                                  ^ source.ada
#                                   ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^ source.ada entity.name.operator.assignment.ada
>                 Name_Node.P_Enclosing_Defining_Name;
#^^^^^^^^^^^^^^^^^ source.ada
#                 ^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
>               Type_Expr : constant Libadalang.Analysis.Type_Expr :=
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                        ^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^^^^^^ source.ada keyword.other.ada
#                                   ^ source.ada
#                                    ^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^^^^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^^ source.ada entity.name.operator.assignment.ada
>                 Def_Name.P_Basic_Decl.P_Type_Expression;
#^^^^^^^^^^^^^^^^^ source.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada punctuation.ada
>            begin
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada keyword.other.ada
>               if not Type_Expr.Is_Null then
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^^^^ source.ada keyword.other.ada
>                  Definition := Resolve_Name
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada entity.name.operator.assignment.ada
#                               ^ source.ada
#                                ^^^^^^^^^^^^ source.ada entity.name.label.ada
>                    (Type_Expr.P_Type_Name, Self.Trace, Imprecise);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
#                                           ^ source.ada
#                                            ^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada punctuation.ada
#                                                       ^ source.ada
#                                                        ^^^^^^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^ source.ada punctuation.ada
>               end if;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>            end;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>         else
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
>            --  Name_Node is not defining. In this case we can rely on
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  P_Expression_Type.
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            Type_Decl := Name_Node.P_Expression_Type;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
>
>            --  P_Expression_Type returns the entire expression: narrow the
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  result down to the type declaration. Here we assume that the
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  first defining name in this expression is the name of the type.
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            if Type_Decl /= No_Type_Decl then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada
#                         ^^ source.ada entity.name.operator.ada
#                           ^ source.ada
#                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^^^ source.ada keyword.other.ada
>               Definition := Type_Decl.P_Defining_Name;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.assignment.ada
#                            ^ source.ada
#                             ^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         if Definition /= No_Defining_Name then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^^^^ source.ada keyword.other.ada
>            Append_Location (Response.result, Definition);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada punctuation.ada
#                                             ^ source.ada
#                                              ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      end Resolve_In_Context;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      for C of Self.Contexts_For_URI (Position.textDocument.uri) loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
#                                                                 ^^^^ source.ada keyword.other.ada
>         Resolve_In_Context (C);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^ source.ada punctuation.ada
>
>         exit when Request.Canceled;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.control.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Type_Definition_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>
>   -------------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_DidChangeTextDocument_Notification --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -------------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding procedure On_DidChangeTextDocument_Notification
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                       ^ source.ada meta.declaration.subprogram.ada
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self  : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^ source.ada storage.modifier.ada
#                    ^ source.ada
#                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>      Value : LSP.Messages.DidChangeTextDocumentParams)
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      function Skip_Did_Change return Boolean;
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                              ^ source.ada
#                               ^^^^^^ source.ada keyword.other.ada
#                                     ^ source.ada
#                                      ^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>      --  Check if the following message in the queue is didChange for
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  the same document
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      ---------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Skip_Did_Change --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ---------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      function Skip_Did_Change return Boolean is
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                              ^ source.ada
#                               ^^^^^^ source.ada keyword.other.ada
#                                     ^ source.ada
#                                      ^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^^ source.ada keyword.other.ada
>         use type LSP.Servers.Message_Access;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada punctuation.ada
>
>         subtype DidChangeTextDocument_Notification is LSP.Messages
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada keyword.other.ada
#                                                      ^ source.ada
#                                                       ^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^^^^^^ source.ada entity.name.label.ada
>           .Server_Notifications.DidChangeTextDocument_Notification;
#^^^^^^^^^^^ source.ada
#           ^ source.ada entity.name.operator.ada
#            ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada punctuation.ada
>
>         Next : constant LSP.Servers.Message_Access :=
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada entity.name.operator.assignment.ada
>           Self.Server.Look_Ahead_Message;
#^^^^^^^^^^^ source.ada
#           ^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         if Next = null
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada variable.other.constant.ada
>           or else Next.all not in
#^^^^^^^^^^^ source.ada
#           ^^ source.ada entity.name.operator.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^^ source.ada storage.modifier.ada
>             DidChangeTextDocument_Notification'Class
#^^^^^^^^^^^^^ source.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^^^^ source.ada entity.name.label.ada
>         then
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
>            return False;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^ source.ada variable.other.constant.ada
#                        ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         declare
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
>            Object : DidChangeTextDocument_Notification'Class renames
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^ source.ada meta.declaration.object.ada
#                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                    ^ source.ada
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada
#                                                              ^^^^^^^ source.ada keyword.other.ada
>              DidChangeTextDocument_Notification'Class (Next.all);
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
#                                                        ^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada entity.name.operator.ada
#                                                             ^^^ source.ada keyword.other.ada
#                                                                ^ source.ada
#                                                                 ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            if Object.params.textDocument.uri /= Value.textDocument.uri then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^^ source.ada entity.name.operator.ada
#                                                ^ source.ada
#                                                 ^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada entity.name.operator.ada
#                                                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada entity.name.operator.ada
#                                                                    ^^^ source.ada entity.name.label.ada
#                                                                       ^ source.ada
#                                                                        ^^^^ source.ada keyword.other.ada
>               return False;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^^ source.ada variable.other.constant.ada
#                           ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>         return True;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada variable.other.constant.ada
#                    ^ source.ada punctuation.ada
>      end Skip_Did_Change;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>
>      Document : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>        Get_Open_Document (Self, Value.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>      Diag     : LSP.Messages.PublishDiagnosticsParams;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada punctuation.ada
>      Diags_Already_Published : Boolean := False;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                             ^ source.ada meta.declaration.object.ada
#                              ^ source.ada meta.declaration.object.ada punctuation.ada
#                               ^ source.ada
#                                ^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^^ source.ada entity.name.operator.assignment.ada
#                                          ^ source.ada
#                                           ^^^^^ source.ada variable.other.constant.ada
#                                                ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Allow_Incremental_Text_Changes.Active then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada keyword.other.ada
>         --  If we are applying incremental changes, we can't skip the
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  call to Apply_Changes, since this would break synchronization.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         Document.Apply_Changes
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Value.textDocument.version,
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>            Value.contentChanges);
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>
>         --  However, we should skip the Indexing part if the next change in
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  the queue will re-change the text document.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         if Skip_Did_Change then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         --  If we are not applying incremental changes, we can skip
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  Apply_Changes: the next change will contain the full text.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         if Skip_Did_Change then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>         Document.Apply_Changes
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Value.textDocument.version,
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>            Value.contentChanges);
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  Reindex the document in each of the contexts where it is relevant
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      for Context of Self.Contexts_For_URI (Value.textDocument.uri) loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
#                                            ^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada entity.name.operator.ada
#                                                               ^^^ source.ada entity.name.label.ada
#                                                                  ^^ source.ada
#                                                                    ^^^^ source.ada keyword.other.ada
>         Context.Index_Document (Document.all);
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^^ source.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^ source.ada keyword.other.ada
#                                             ^ source.ada
#                                              ^ source.ada punctuation.ada
>
>         --  Emit diagnostics - do this for only one context
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         if Self.Diagnostics_Enabled
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           and then not Diags_Already_Published
#^^^^^^^^^^^ source.ada
#           ^^^ source.ada entity.name.operator.ada
#              ^ source.ada
#               ^^^^ source.ada keyword.other.ada
#                   ^ source.ada
#                    ^^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>         then
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
>            Document.Get_Errors (Context.all, Diag.diagnostics);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^ source.ada keyword.other.ada
#                                            ^ source.ada punctuation.ada
#                                             ^ source.ada
#                                              ^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^ source.ada punctuation.ada
>            Diag.uri := Value.textDocument.uri;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
#                       ^ source.ada
#                        ^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^ source.ada entity.name.label.ada
#                                              ^ source.ada punctuation.ada
>            Self.Server.On_Publish_Diagnostics (Diag);
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^^ source.ada
#                                                ^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada
#                                                     ^ source.ada punctuation.ada
>            Diags_Already_Published := True;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^ source.ada entity.name.operator.assignment.ada
#                                      ^ source.ada
#                                       ^^^^ source.ada variable.other.constant.ada
#                                           ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>   end On_DidChangeTextDocument_Notification;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada punctuation.ada
>
>   ------------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_DidCloseTextDocument_Notification --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ------------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding procedure On_DidCloseTextDocument_Notification
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                       ^ source.ada meta.declaration.subprogram.ada
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self  : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^ source.ada storage.modifier.ada
#                    ^ source.ada
#                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>      Value : LSP.Messages.DidCloseTextDocumentParams)
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      Diag     : LSP.Messages.PublishDiagnosticsParams;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada punctuation.ada
>      Document : Internal_Document_Access;
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Self.Open_Documents.Contains (Value.textDocument.uri) then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^^ source.ada
#                                       ^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^^^ source.ada entity.name.label.ada
#                                                             ^^ source.ada
#                                                               ^^^^ source.ada keyword.other.ada
>         Document := Self.Open_Documents.Element (Value.textDocument.uri);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.assignment.ada
#                    ^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^ source.ada entity.name.label.ada
#                                                ^^ source.ada
#                                                  ^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada entity.name.operator.ada
#                                                                     ^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^ source.ada punctuation.ada
>         Unchecked_Free (Document);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^^ source.ada
#                         ^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>         Self.Open_Documents.Delete (Value.textDocument.uri);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^ source.ada punctuation.ada
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         --  We have received a didCloseTextDocument but the document was
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  not open: this is not supposed to happen, log it.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         Self.Trace.Trace
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^ source.ada entity.name.label.ada
>           ("received a didCloseTextDocument for non-open document with uri: "
#^^^^^^^^^^^^ source.ada
#            ^ source.ada string.quoted.double.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                                             ^ source.ada string.quoted.double.ada
>            & To_UTF_8_String (Value.textDocument.uri));
#^^^^^^^^^^^^ source.ada
#            ^ source.ada entity.name.operator.ada
#             ^ source.ada
#              ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^^ source.ada
#                               ^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  Clean diagnostics up on closing document
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      if Self.Diagnostics_Enabled then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^^^ source.ada keyword.other.ada
>         Diag.uri := Value.textDocument.uri;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.assignment.ada
#                    ^ source.ada
#                     ^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
>         Self.Server.On_Publish_Diagnostics (Diag);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
#                                             ^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>   end On_DidCloseTextDocument_Notification;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
>
>   -----------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_DidOpenTextDocument_Notification --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -----------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding procedure On_DidOpenTextDocument_Notification
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                       ^ source.ada meta.declaration.subprogram.ada
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self  : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^ source.ada storage.modifier.ada
#                    ^ source.ada
#                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>      Value : LSP.Messages.DidOpenTextDocumentParams)
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      URI    : LSP.Messages.DocumentUri renames Value.textDocument.uri;
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^^^ source.ada meta.declaration.object.ada
#             ^ source.ada meta.declaration.object.ada punctuation.ada
#              ^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^^^^^^^ source.ada keyword.other.ada
#                                               ^ source.ada
#                                                ^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada entity.name.operator.ada
#                                                                   ^^^ source.ada entity.name.label.ada
#                                                                      ^ source.ada punctuation.ada
>      Object : constant Internal_Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#            ^ source.ada meta.declaration.object.ada
#             ^ source.ada meta.declaration.object.ada punctuation.ada
#              ^ source.ada
#               ^^^^^^^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^ source.ada entity.name.operator.assignment.ada
>        new LSP.Ada_Documents.Document (Self.Trace);
#^^^^^^^^ source.ada
#        ^^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^^ source.ada
#                                        ^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Self.Trace.Trace ("In Text_Document_Did_Open");
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                  ^ source.ada string.quoted.double.ada
#                                                   ^ source.ada
#                                                    ^ source.ada punctuation.ada
>      Self.Trace.Trace ("Uri : " & To_UTF_8_String (URI));
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^^^^ source.ada string.quoted.double.ada
#                               ^ source.ada string.quoted.double.ada
#                                ^ source.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^ source.ada
#                                   ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^^ source.ada
#                                                    ^^^ source.ada entity.name.label.ada
#                                                       ^^ source.ada
#                                                         ^ source.ada punctuation.ada
>
>      --  Some clients don't properly call initialize, or don't pass the
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  project to didChangeConfiguration: fallback here on loading a
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  project in this directory, if needed.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Ensure_Project_Loaded
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Self,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada punctuation.ada
>         To_LSP_String (Ada.Directories.Containing_Directory
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (To_UTF_8_String (URI_To_File (URI)))));
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^^ source.ada
#                                          ^^^ source.ada entity.name.label.ada
#                                             ^^^^^ source.ada
#                                                  ^ source.ada punctuation.ada
>
>      --  We have received a document: add it to the documents container
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Object.Initialize (URI, Value.textDocument.text);
#^^^^^^ source.ada
#      ^^^^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^^ source.ada
#                         ^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
#                             ^ source.ada
#                              ^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^ source.ada punctuation.ada
>      Self.Open_Documents.Insert (URI, Object);
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
#                                      ^ source.ada
#                                       ^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^ source.ada punctuation.ada
>
>      --  Handle the case where we're loading the implicit project: do
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  we need to add the directory in which the document is open?
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      if Self.Implicit_Project_Loaded then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada keyword.other.ada
>         declare
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
>            Dir : constant Virtual_File := To_File (URI).Dir;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^^ source.ada entity.name.operator.assignment.ada
#                                          ^ source.ada
#                                           ^^^^^^^ source.ada entity.name.label.ada
#                                                  ^^ source.ada
#                                                    ^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            if not Self.Project_Dirs_Loaded.Contains (Dir) then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^ source.ada entity.name.operator.ada
#                  ^ source.ada
#                   ^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
#                                                      ^^^ source.ada entity.name.label.ada
#                                                         ^^ source.ada
#                                                           ^^^^ source.ada keyword.other.ada
>               --  We do need to add this directory
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>               Self.Project_Dirs_Loaded.Insert (Dir);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^ source.ada entity.name.label.ada
#                                              ^^ source.ada
#                                                ^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^ source.ada punctuation.ada
>               Self.Reload_Implicit_Project_Dirs;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  Index the document in all the contexts where it is relevant
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      declare
#^^^^^^ source.ada
#      ^^^^^^^ source.ada keyword.other.ada
>         Diag : LSP.Messages.PublishDiagnosticsParams;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada punctuation.ada
>         Diags_Already_Published : Boolean := False;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                ^ source.ada meta.declaration.object.ada
#                                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                                  ^ source.ada
#                                   ^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^^ source.ada entity.name.operator.assignment.ada
#                                             ^ source.ada
#                                              ^^^^^ source.ada variable.other.constant.ada
#                                                   ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         for Context of Self.Contexts_For_URI (URI) loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^^ source.ada
#                                               ^^^ source.ada entity.name.label.ada
#                                                  ^^ source.ada
#                                                    ^^^^ source.ada keyword.other.ada
>            Context.Index_Document (Object.all);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^^ source.ada
#                                    ^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^ source.ada keyword.other.ada
#                                              ^ source.ada
#                                               ^ source.ada punctuation.ada
>
>            if Self.Diagnostics_Enabled
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>              and then not Diags_Already_Published
#^^^^^^^^^^^^^^ source.ada
#              ^^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^^ source.ada keyword.other.ada
#                      ^ source.ada
#                       ^^^ source.ada entity.name.operator.ada
#                          ^ source.ada
#                           ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>            then
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
>               Object.Get_Errors (Context.all, Diag.diagnostics);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^ source.ada keyword.other.ada
#                                             ^ source.ada punctuation.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>               Diag.uri := Value.textDocument.uri;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.assignment.ada
#                          ^ source.ada
#                           ^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>               Self.Server.On_Publish_Diagnostics (Diag);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^^ source.ada
#                                                   ^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>
>               --  Publish diagnostics only for one context,
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>               --  to avoid emitting too much noise.
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada comment.line.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>               Diags_Already_Published := True;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada
#                                       ^^ source.ada entity.name.operator.assignment.ada
#                                         ^ source.ada
#                                          ^^^^ source.ada variable.other.constant.ada
#                                              ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>      end;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada punctuation.ada
>
>      Self.Trace.Trace ("Finished Text_Document_Did_Open");
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^ source.ada string.quoted.double.ada
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                        ^ source.ada string.quoted.double.ada
#                                                         ^ source.ada
#                                                          ^ source.ada punctuation.ada
>   end On_DidOpenTextDocument_Notification;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>
>   ------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Folding_Range_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Folding_Range_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Folding_Range_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^^ source.ada
>      return LSP.Messages.Server_Responses.FoldingRange_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      Value : LSP.Messages.FoldingRangeParams renames
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>
>      Context  : constant Context_Access :=
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^ source.ada entity.name.operator.assignment.ada
>        Self.Contexts.Get_Best_Context (Value.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^^ source.ada
#                                        ^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^ source.ada punctuation.ada
>      Document : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>        Get_Open_Document (Self, Value.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>      Result   : LSP.Messages.FoldingRange_Vector;
#^^^^^^ source.ada
#      ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#            ^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Document /= null then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^^^^ source.ada keyword.other.ada
>         Document.Get_Folding_Blocks
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Context.all, Self.Line_Folding_Only, Result);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^ source.ada keyword.other.ada
#                       ^ source.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>
>         return Response : LSP.Messages.Server_Responses.FoldingRange_Response
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                        ^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Is_Error => False)
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^^ source.ada variable.other.constant.ada
#                             ^^ source.ada
>         do
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
>            Response.result := Result;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^ source.ada entity.name.operator.assignment.ada
#                              ^ source.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>         end return;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^ source.ada keyword.other.ada
#                   ^ source.ada punctuation.ada
>
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         return Response : LSP.Messages.Server_Responses.FoldingRange_Response
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                        ^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Is_Error => True)
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^ source.ada variable.other.constant.ada
#                            ^^ source.ada
>         do
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
>            Response.error :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
>              (True,
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada variable.other.constant.ada
#                   ^ source.ada punctuation.ada
>               (code => LSP.Errors.InternalError,
#^^^^^^^^^^^^^^^^ source.ada
#                ^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
>                message => +"Document is not opened",
#^^^^^^^^^^^^^^^^ source.ada
#                ^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.ada
#                          ^ source.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^ source.ada string.quoted.double.ada
#                             ^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                   ^ source.ada string.quoted.double.ada
#                                                    ^ source.ada punctuation.ada
>                data => <>));
#^^^^^^^^^^^^^^^^ source.ada
#                ^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.ada
#                          ^^ source.ada
#                            ^ source.ada punctuation.ada
>         end return;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^ source.ada keyword.other.ada
#                   ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>   end On_Folding_Range_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>
>   --------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Selection_Range_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Selection_Range_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Selection_Range_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^^ source.ada
>      return LSP.Messages.Server_Responses.SelectionRange_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      pragma Unreferenced (Self, Request);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.control.ada
#            ^ source.ada
#             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.SelectionRange_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => True);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Response.error :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
>        (True,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada variable.other.constant.ada
#             ^ source.ada punctuation.ada
>         (code => LSP.Errors.InternalError,
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>          message => +"Not implemented",
#^^^^^^^^^^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^ source.ada string.quoted.double.ada
#                       ^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                      ^ source.ada string.quoted.double.ada
#                                       ^ source.ada punctuation.ada
>          data => <>));
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^^ source.ada
#                      ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Selection_Range_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>
>   --------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Highlight_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Highlight_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Highlight_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^^ source.ada
>      return LSP.Messages.Server_Responses.Highlight_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      pragma Unreferenced (Self, Request);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.control.ada
#            ^ source.ada
#             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.Highlight_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => True);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Response.error :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
>        (True,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada variable.other.constant.ada
#             ^ source.ada punctuation.ada
>         (code => LSP.Errors.InternalError,
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>          message => +"Not implemented",
#^^^^^^^^^^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^ source.ada string.quoted.double.ada
#                       ^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                      ^ source.ada string.quoted.double.ada
#                                       ^ source.ada punctuation.ada
>          data => <>));
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^^ source.ada
#                      ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Highlight_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>   ----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Hover_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Hover_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Hover_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^^ source.ada
>      return LSP.Messages.Server_Responses.Hover_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use Libadalang.Analysis;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>      Value    : LSP.Messages.TextDocumentPositionParams renames
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.Hover_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>
>      Defining_Name_Node : Defining_Name;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                        ^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
>      Decl               : Basic_Decl;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>      Decl_Text          : LSP_String;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^^^^^^^^^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>      Comments_Text      : LSP_String;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^^^^^^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>      Location_Text      : LSP_String;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^^^^^^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>      Decl_Unit_File     : Virtual_File;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                    ^^^^^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>
>      C : constant Context_Access :=
#^^^^^^ source.ada
#      ^ source.ada meta.declaration.object.ada variable.name.ada
#       ^ source.ada meta.declaration.object.ada
#        ^ source.ada meta.declaration.object.ada punctuation.ada
#         ^ source.ada
#          ^^^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.assignment.ada
>        Self.Contexts.Get_Best_Context (Value.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^^ source.ada
#                                        ^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^ source.ada punctuation.ada
>      --  For the Hover request, we're only interested in the "best"
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  response value, not in the list of values for all contexts
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Self.Imprecise_Resolve_Name (C, Value, Defining_Name_Node);
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^^ source.ada
#                                   ^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
#                                            ^ source.ada
#                                             ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>
>      if Defining_Name_Node = No_Defining_Name then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^ source.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada keyword.other.ada
>         return Response;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  Get the associated basic declaration
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Decl := Defining_Name_Node.P_Basic_Decl;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada
#           ^^ source.ada entity.name.operator.assignment.ada
#             ^ source.ada
#              ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>
>      if Decl = No_Basic_Decl or else Request.Canceled then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^ source.ada entity.name.operator.ada
#               ^ source.ada
#                ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^^ source.ada entity.name.operator.ada
#                                ^ source.ada
#                                 ^^^^ source.ada keyword.other.ada
#                                     ^ source.ada
#                                      ^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada
#                                                       ^^^^ source.ada keyword.other.ada
>         return Response;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  If the basic declaration is an enum literal, display the whole
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  enumeration type declaration instead.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      if Decl.Kind in Ada_Enum_Literal_Decl then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada storage.modifier.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^^^ source.ada keyword.other.ada
>         Decl := As_Enum_Literal_Decl (Decl).P_Enum_Type.As_Basic_Decl;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^^ source.ada entity.name.operator.assignment.ada
#                ^ source.ada
#                 ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^^ source.ada
#                                       ^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                      ^ source.ada punctuation.ada
>         Decl_Text := Get_Hover_Text (Decl);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.assignment.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^ source.ada punctuation.ada
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         Decl_Text := Get_Hover_Text (Decl);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.assignment.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      if Decl_Text = Empty_LSP_String then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada keyword.other.ada
>         return Response;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  Append the whole declaration text to the response
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      Response.result.contents.Vector.Append
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^ source.ada entity.name.label.ada
>        (LSP.Messages.MarkedString'
#^^^^^^^^^ source.ada
#         ^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^^ source.ada
>           (Is_String => False,
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^ source.ada variable.other.constant.ada
#                              ^ source.ada punctuation.ada
>            value     => Decl_Text,
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^^^^^ source.ada
#                      ^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada punctuation.ada
>            language  => +"ada"));
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada entity.name.label.ada
#                    ^^ source.ada
#                      ^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^ source.ada string.quoted.double.ada
#                           ^^^ source.ada string.quoted.double.ada
#                              ^ source.ada string.quoted.double.ada
#                               ^^ source.ada
#                                 ^ source.ada punctuation.ada
>
>      --  Append the declaration's location.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  In addition, append the project's name if we are dealing with an
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  aggregate project.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      Decl_Unit_File := GNATCOLL.VFS.Create (+Decl.Unit.Get_Filename);
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
#                       ^ source.ada
#                        ^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^ source.ada punctuation.ada
>
>      Location_Text := To_LSP_String
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^ source.ada entity.name.operator.assignment.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        ("at " & Decl_Unit_File.Display_Base_Name & " ("
#^^^^^^^^^ source.ada
#         ^ source.ada string.quoted.double.ada
#          ^^^ source.ada string.quoted.double.ada
#             ^ source.ada string.quoted.double.ada
#              ^ source.ada
#               ^ source.ada entity.name.operator.ada
#                ^ source.ada
#                 ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^ source.ada
#                                                    ^ source.ada string.quoted.double.ada
#                                                     ^^ source.ada string.quoted.double.ada
#                                                       ^ source.ada string.quoted.double.ada
>         & GNATCOLL.Utils.Image
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.operator.ada
#          ^ source.ada
#           ^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^ source.ada entity.name.label.ada
>           (Integer (Decl.Sloc_Range.Start_Line), Min_Width => 1)
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada entity.name.label.ada
#                   ^^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^ source.ada punctuation.ada
#                                                 ^ source.ada
#                                                  ^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.ada
#                                                              ^ source.ada
#                                                               ^ source.ada constant.numeric.ada
#                                                                ^^ source.ada
>         & ":"
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.operator.ada
#          ^ source.ada
#           ^ source.ada string.quoted.double.ada
#            ^ source.ada string.quoted.double.ada
#             ^ source.ada string.quoted.double.ada
>         & GNATCOLL.Utils.Image
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.operator.ada
#          ^ source.ada
#           ^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^ source.ada entity.name.label.ada
>           (Integer (Decl.Sloc_Range.Start_Column), Min_Width => 1)
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada entity.name.label.ada
#                   ^^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^ source.ada punctuation.ada
#                                                   ^ source.ada
#                                                    ^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada
#                                                              ^^ source.ada entity.name.operator.ada
#                                                                ^ source.ada
#                                                                 ^ source.ada constant.numeric.ada
#                                                                  ^^ source.ada
>         & ")");
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.operator.ada
#          ^ source.ada
#           ^ source.ada string.quoted.double.ada
#            ^ source.ada string.quoted.double.ada
#             ^ source.ada string.quoted.double.ada
#              ^ source.ada
#               ^ source.ada punctuation.ada
>
>      if Self.Project_Tree.Root_Project.Is_Aggregate_Project then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada
#                                                             ^^^^ source.ada keyword.other.ada
>         Location_Text := Location_Text & " in project " & C.Id;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^ source.ada entity.name.operator.assignment.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^ source.ada
#                                          ^ source.ada string.quoted.double.ada
#                                           ^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                       ^ source.ada string.quoted.double.ada
#                                                        ^ source.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^ source.ada
#                                                           ^ source.ada entity.name.label.ada
#                                                            ^ source.ada entity.name.operator.ada
#                                                             ^^ source.ada entity.name.label.ada
#                                                               ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Response.result.contents.Vector.Append
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^ source.ada entity.name.label.ada
>        (LSP.Messages.MarkedString'
#^^^^^^^^^ source.ada
#         ^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^^ source.ada
>           (Is_String => True,
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^ source.ada variable.other.constant.ada
#                             ^ source.ada punctuation.ada
>            value     => Location_Text));
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^^^^^ source.ada
#                      ^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^^ source.ada
#                                        ^ source.ada punctuation.ada
>
>      --  Append the comments associated with the basic declaration
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  if any.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^ source.ada comment.line.ada
>
>      Comments_Text := To_LSP_String
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^ source.ada entity.name.operator.assignment.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Ada.Strings.UTF_Encoding.Wide_Wide_Strings.Encode
#^^^^^^^^^ source.ada
#         ^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^^^^ source.ada entity.name.label.ada
>           (Libadalang.Doc_Utils.Get_Documentation
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                (Decl).Doc.To_String));
#^^^^^^^^^^^^^^^^^ source.ada
#                 ^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^ source.ada punctuation.ada
>
>      if Comments_Text /= Empty_LSP_String then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^^^^ source.ada keyword.other.ada
>         Response.result.contents.Vector.Append
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^ source.ada entity.name.label.ada
>           (LSP.Messages.MarkedString'
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^^ source.ada
>              (Is_String => True,
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada
#                         ^^ source.ada entity.name.operator.ada
#                           ^ source.ada
#                            ^^^^ source.ada variable.other.constant.ada
#                                ^ source.ada punctuation.ada
>               value     => Comments_Text));
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^^^^^ source.ada
#                         ^^ source.ada entity.name.operator.ada
#                           ^ source.ada
#                            ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Hover_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada punctuation.ada
>
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_References_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_References_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.References_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
>      return LSP.Messages.Server_Responses.Location_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use Libadalang.Analysis;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>      Value      : LSP.Messages.ReferenceParams renames Request.params;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^^^^^^ source.ada keyword.other.ada
#                                                       ^ source.ada
#                                                        ^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada entity.name.operator.ada
#                                                                ^^^^^^ source.ada entity.name.label.ada
#                                                                      ^ source.ada punctuation.ada
>      Response   : LSP.Messages.Server_Responses.Location_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>      Imprecise  : Boolean := False;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^^^^^ source.ada variable.other.constant.ada
#                                   ^ source.ada punctuation.ada
>
>      procedure Process_Context (C : Context_Access);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                               ^^ source.ada
#                                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^ source.ada punctuation.ada
>      --  Process the references found in one context and append
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  them to Response.results.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      function Get_Reference_Kind
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Node : Ada_Node) return LSP.Messages.AlsReferenceKind_Set;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^^ source.ada
#                          ^^^^^^ source.ada keyword.other.ada
#                                ^ source.ada
#                                 ^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada punctuation.ada
>      --  Fetch reference kind for given node
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      function Is_End_Label (Node : Ada_Node) return Boolean
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                           ^^ source.ada
#                             ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                 ^ source.ada meta.declaration.object.ada
#                                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                                   ^ source.ada
#                                    ^^^^^^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^^^^ source.ada keyword.other.ada
#                                                    ^ source.ada
#                                                     ^^^^^^^ source.ada entity.name.label.ada
>      is
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
>        (not Node.Parent.Is_Null
#^^^^^^^^^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
>         and then
#^^^^^^^^^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
>           (Node.Parent.Kind in Ada_End_Name
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada storage.modifier.ada
#                               ^ source.ada
#                                ^^^^^^^^^^^^ source.ada entity.name.label.ada
>            or else (Node.Parent.Kind in Ada_Dotted_Name
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada entity.name.operator.ada
#              ^ source.ada
#               ^^^^ source.ada keyword.other.ada
#                   ^^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada storage.modifier.ada
#                                        ^ source.ada
#                                         ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                     and then not Node.Parent.Parent.Is_Null
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^ source.ada keyword.other.ada
#                             ^ source.ada
#                              ^^^ source.ada entity.name.operator.ada
#                                 ^ source.ada
#                                  ^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^^^^ source.ada entity.name.label.ada
>                     and then Node.Parent.Parent.Kind in Ada_End_Name)));
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^ source.ada keyword.other.ada
#                             ^ source.ada
#                              ^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada storage.modifier.ada
#                                                        ^ source.ada
#                                                         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                     ^^^ source.ada
#                                                                        ^ source.ada punctuation.ada
>      --  Return True if the node belongs to an end label node.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  Used to filter out end label references.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      function Is_Type_Derivation (Node : Ada_Node) return Boolean
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                 ^^ source.ada
#                                   ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                       ^ source.ada meta.declaration.object.ada
#                                        ^ source.ada meta.declaration.object.ada punctuation.ada
#                                         ^ source.ada
#                                          ^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^^ source.ada
#                                                    ^^^^^^ source.ada keyword.other.ada
#                                                          ^ source.ada
#                                                           ^^^^^^^ source.ada entity.name.label.ada
>      is
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
>        (not Node.Parent.Is_Null
#^^^^^^^^^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
>         and then
#^^^^^^^^^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
>           (Node.Parent.Kind in Ada_Subtype_Indication_Range
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada storage.modifier.ada
#                               ^ source.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>            and then not Node.Parent.Parent.Is_Null
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.operator.ada
#               ^ source.ada
#                ^^^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^ source.ada entity.name.label.ada
>            and then Node.Parent.Parent.Kind in Ada_Derived_Type_Def_Range));
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.operator.ada
#               ^ source.ada
#                ^^^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^^ source.ada storage.modifier.ada
#                                               ^ source.ada
#                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                          ^^ source.ada
#                                                                            ^ source.ada punctuation.ada
>      --  Return True if the node belongs to derived type declaration.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Get_Reference_Kind --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      function Get_Reference_Kind
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Node : Ada_Node) return LSP.Messages.AlsReferenceKind_Set
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^^ source.ada
#                          ^^^^^^ source.ada keyword.other.ada
#                                ^ source.ada
#                                 ^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>      is
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
>         use LSP.Messages;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>
>         Id     : constant Name := LSP.Lal_Utils.Get_Node_As_Name (Node);
#^^^^^^^^^ source.ada
#         ^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.assignment.ada
#                                  ^ source.ada
#                                   ^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                 ^^ source.ada
#                                                                   ^^^^ source.ada entity.name.label.ada
#                                                                       ^ source.ada
#                                                                        ^ source.ada punctuation.ada
>         Result : LSP.Messages.AlsReferenceKind_Set := LSP.Messages.Empty_Set;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada entity.name.operator.assignment.ada
#                                                      ^ source.ada
#                                                       ^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada entity.name.operator.ada
#                                                                    ^^^^^^^^^ source.ada entity.name.label.ada
#                                                                             ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Result.As_Flags (LSP.Messages.Write) := Id.P_Is_Write_Reference;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^ source.ada entity.name.label.ada
#                                               ^^ source.ada
#                                                 ^^ source.ada entity.name.operator.assignment.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada entity.name.label.ada
#                                                      ^ source.ada entity.name.operator.ada
#                                                       ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                           ^ source.ada punctuation.ada
>         exception
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada keyword.other.ada
>            when E : Libadalang.Common.Property_Error =>
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^ source.ada meta.declaration.object.ada
#                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                    ^ source.ada
#                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.ada
>               Log (Self.Trace, E);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
#                               ^ source.ada
#                                ^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Result.As_Flags (LSP.Messages.Static_Call) := Id.P_Is_Static_Call;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^^ source.ada entity.name.operator.assignment.ada
#                                                         ^ source.ada
#                                                          ^^ source.ada entity.name.label.ada
#                                                            ^ source.ada entity.name.operator.ada
#                                                             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                             ^ source.ada punctuation.ada
>         exception
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada keyword.other.ada
>            when E : Libadalang.Common.Property_Error =>
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^ source.ada meta.declaration.object.ada
#                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                    ^ source.ada
#                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.ada
>               Log (Self.Trace, E);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
#                               ^ source.ada
#                                ^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Result.As_Flags (LSP.Messages.Dispatching_Call) :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>              Id.P_Is_Dispatching_Call;
#^^^^^^^^^^^^^^ source.ada
#              ^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>         exception
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada keyword.other.ada
>            when E : Libadalang.Common.Property_Error =>
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^ source.ada meta.declaration.object.ada
#                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                    ^ source.ada
#                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.ada
>               Log (Self.Trace, E);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
#                               ^ source.ada
#                                ^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Result.As_Flags (LSP.Messages.Child) :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^ source.ada entity.name.label.ada
#                                               ^^ source.ada
#                                                 ^^ source.ada entity.name.operator.assignment.ada
>              Is_Type_Derivation (Id.As_Ada_Node);
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^ source.ada punctuation.ada
>         exception
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada keyword.other.ada
>            when E : Libadalang.Common.Property_Error =>
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^ source.ada meta.declaration.object.ada
#                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                    ^ source.ada
#                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.ada
>               Log (Self.Trace, E);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
#                               ^ source.ada
#                                ^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>         --  If the result has not any set flags at this point, flag it as a
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  simple reference.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         if Result.As_Flags = AlsReferenceKind_Array'(others => False) then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^ source.ada
#                              ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
#                                                      ^^^^^^ source.ada keyword.other.ada
#                                                            ^ source.ada
#                                                             ^^ source.ada entity.name.operator.ada
#                                                               ^ source.ada
#                                                                ^^^^^ source.ada variable.other.constant.ada
#                                                                     ^^ source.ada
#                                                                       ^^^^ source.ada keyword.other.ada
>            Result.As_Flags (LSP.Messages.Simple) := True;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^ source.ada entity.name.label.ada
#                                                ^^ source.ada
#                                                  ^^ source.ada entity.name.operator.assignment.ada
#                                                    ^ source.ada
#                                                     ^^^^ source.ada variable.other.constant.ada
#                                                         ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         return Result;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      end Get_Reference_Kind;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>      ---------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Process_Context --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ---------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Process_Context (C : Context_Access) is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                               ^^ source.ada
#                                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^^ source.ada
#                                                     ^^ source.ada keyword.other.ada
>         Definition : Defining_Name;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         Self.Imprecise_Resolve_Name (C, Value, Definition);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
#                                        ^ source.ada
#                                         ^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada punctuation.ada
#                                               ^ source.ada
#                                                ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>
>         if Definition = No_Defining_Name or else Request.Canceled then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^^ source.ada entity.name.operator.ada
#                                            ^ source.ada
#                                             ^^^^ source.ada keyword.other.ada
#                                                 ^ source.ada
#                                                  ^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada
#                                                                   ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         declare
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
>            Count          : Cancel_Countdown := 0;
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                 ^^^^^^^^^^ source.ada meta.declaration.object.ada
#                           ^ source.ada meta.declaration.object.ada punctuation.ada
#                            ^ source.ada
#                             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^^ source.ada entity.name.operator.assignment.ada
#                                                ^ source.ada
#                                                 ^ source.ada constant.numeric.ada
#                                                  ^ source.ada punctuation.ada
>            This_Imprecise : Boolean;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                          ^ source.ada meta.declaration.object.ada
#                           ^ source.ada meta.declaration.object.ada punctuation.ada
#                            ^ source.ada
#                             ^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>            References     : constant Base_Id_Array :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^^^^^ source.ada meta.declaration.object.ada
#                           ^ source.ada meta.declaration.object.ada punctuation.ada
#                            ^ source.ada
#                             ^^^^^^^^ source.ada keyword.other.ada
#                                     ^ source.ada
#                                      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada entity.name.operator.assignment.ada
>              C.Find_All_References (Definition, This_Imprecise);
#^^^^^^^^^^^^^^ source.ada
#              ^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Imprecise := Imprecise or This_Imprecise;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
>
>            for Node of References loop
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^^^ source.ada keyword.other.ada
>               if not Is_End_Label (Node.As_Ada_Node) then
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^^ source.ada
#                                    ^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
#                                                      ^^^^ source.ada keyword.other.ada
>                  Count := Count - 1;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.assignment.ada
#                          ^ source.ada
#                           ^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^ source.ada
#                                   ^ source.ada constant.numeric.ada
#                                    ^ source.ada punctuation.ada
>
>                  Append_Location
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                    (Response.result,
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>                     Node,
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>                     Get_Reference_Kind (Node.As_Ada_Node));
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^^ source.ada
#                                         ^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^^ source.ada
#                                                           ^ source.ada punctuation.ada
>               end if;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>
>               exit when Count = 0  and then Request.Canceled;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.control.ada
#                   ^ source.ada
#                    ^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^ source.ada
#                                 ^ source.ada constant.numeric.ada
#                                  ^^ source.ada
#                                    ^^^ source.ada entity.name.operator.ada
#                                       ^ source.ada
#                                        ^^^^ source.ada keyword.other.ada
#                                            ^ source.ada
#                                             ^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada punctuation.ada
>            end loop;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada keyword.other.ada
#                    ^ source.ada punctuation.ada
>
>            if Value.context.includeDeclaration then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^^^ source.ada keyword.other.ada
>               Append_Location
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                 (Response.result,
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada punctuation.ada
>                  Definition,
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>                  Get_Reference_Kind (Definition.As_Ada_Node));
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                            ^^ source.ada
#                                                              ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      end Process_Context;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      for C of Self.Contexts_For_URI (Value.textDocument.uri) loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^ source.ada entity.name.label.ada
#                                                            ^^ source.ada
#                                                              ^^^^ source.ada keyword.other.ada
>         Process_Context (C);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^^ source.ada
#                          ^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^ source.ada punctuation.ada
>
>         exit when Request.Canceled;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.control.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      if Imprecise then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
>         Self.Show_Message
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
>           ("The results of 'references' are approximate.",
#^^^^^^^^^^^^ source.ada
#            ^ source.ada string.quoted.double.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                         ^ source.ada string.quoted.double.ada
#                                                          ^ source.ada punctuation.ada
>            LSP.Messages.Warning);
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Sort_And_Remove_Duplicates (Response.result);
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_References_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   ------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_ALS_Called_By_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_ALS_Called_By_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.ALS_Called_By_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^^ source.ada
>      return LSP.Messages.Server_Responses.ALS_Called_By_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use Libadalang.Analysis;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>      Value      : LSP.Messages.TextDocumentPositionParams renames
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      Response   : LSP.Messages.Server_Responses.ALS_Called_By_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>      Imprecise  : Boolean := False;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^^^^^ source.ada variable.other.constant.ada
#                                   ^ source.ada punctuation.ada
>
>      function Get_Reference_Kind
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Node : Name) return LSP.Messages.AlsReferenceKind_Set;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^ source.ada entity.name.label.ada
#                    ^^ source.ada
#                      ^^^^^^ source.ada keyword.other.ada
#                            ^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada punctuation.ada
>      --  Query whether Node is a static or a dispatching call, and format
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  this into an AlsReferenceKind_Set.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Process_Context (C : Context_Access);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                               ^^ source.ada
#                                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^ source.ada punctuation.ada
>      --  Process the calls found in one context and append
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  them to Response.results.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Add_Subprogram
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Subp : LSP.Messages.ALS_Subprogram_And_References);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>      --  Add a subprogram in results, it prevents having duplicates
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Get_Reference_Kind --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      function Get_Reference_Kind
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#              ^ source.ada meta.declaration.subprogram.ada
#               ^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Node : Name) return LSP.Messages.AlsReferenceKind_Set
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^ source.ada entity.name.label.ada
#                    ^^ source.ada
#                      ^^^^^^ source.ada keyword.other.ada
#                            ^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>      is
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
>         Result : LSP.Messages.AlsReferenceKind_Set := LSP.Messages.Empty_Set;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada entity.name.operator.assignment.ada
#                                                      ^ source.ada
#                                                       ^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada entity.name.operator.ada
#                                                                    ^^^^^^^^^ source.ada entity.name.label.ada
#                                                                             ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Result.As_Flags (LSP.Messages.Static_Call) :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^^ source.ada entity.name.operator.assignment.ada
>              Node.P_Is_Static_Call;
#^^^^^^^^^^^^^^ source.ada
#              ^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>            Result.As_Flags (LSP.Messages.Dispatching_Call) :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>              Node.P_Is_Dispatching_Call;
#^^^^^^^^^^^^^^ source.ada
#              ^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
>         exception
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada keyword.other.ada
>            when E : Libadalang.Common.Property_Error =>
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^ source.ada meta.declaration.object.ada
#                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                    ^ source.ada
#                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.ada
>               Log (Self.Trace, E);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
#                               ^ source.ada
#                                ^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>         return Result;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      end Get_Reference_Kind;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>      ---------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Process_Context --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ---------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Process_Context (C : Context_Access) is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                               ^^ source.ada
#                                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^^ source.ada
#                                                     ^^ source.ada keyword.other.ada
>         Definition : Defining_Name;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         Self.Imprecise_Resolve_Name (C, Value, Definition);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
#                                        ^ source.ada
#                                         ^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada punctuation.ada
#                                               ^ source.ada
#                                                ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada punctuation.ada
>
>         --  Attempt to resolve the name, return no results if we can't or if
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  the name does not resolve to a callable object, like a subprogram
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  or an entry.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         if Definition = No_Defining_Name
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           or else not Definition.P_Basic_Decl.P_Is_Subprogram
#^^^^^^^^^^^ source.ada
#           ^^ source.ada entity.name.operator.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.operator.ada
#                      ^ source.ada
#                       ^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           or else Request.Canceled
#^^^^^^^^^^^ source.ada
#           ^^ source.ada entity.name.operator.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
>         then
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         declare
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
>            This_Imprecise : Boolean;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                          ^ source.ada meta.declaration.object.ada
#                           ^ source.ada meta.declaration.object.ada punctuation.ada
#                            ^ source.ada
#                             ^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>            Called  : constant LSP.Lal_Utils.References_By_Subprogram.Map :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^^^^^^ source.ada keyword.other.ada
#                              ^ source.ada
#                               ^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                     ^ source.ada entity.name.operator.ada
#                                                                      ^^^ source.ada entity.name.label.ada
#                                                                         ^ source.ada
#                                                                          ^^ source.ada entity.name.operator.assignment.ada
>              LSP.Lal_Utils.Find_All_Calls (C.all, Definition, This_Imprecise);
#^^^^^^^^^^^^^^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
#                                            ^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^ source.ada keyword.other.ada
#                                                 ^ source.ada punctuation.ada
#                                                  ^ source.ada
#                                                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada punctuation.ada
#                                                              ^ source.ada
#                                                               ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                             ^ source.ada
#                                                                              ^ source.ada punctuation.ada
>
>            use LSP.Lal_Utils.References_By_Subprogram;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada punctuation.ada
>            C     : Cursor := Called.First;
#^^^^^^^^^^^^ source.ada
#            ^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^^^^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Imprecise := Imprecise or This_Imprecise;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
>
>            --  Iterate through all the results, converting them to protocol
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  objects.
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^ source.ada comment.line.ada
>            while Has_Element (C) loop
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^^ source.ada
#                               ^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^ source.ada keyword.other.ada
>               declare
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^ source.ada keyword.other.ada
>                  Node : constant Defining_Name := Key (C);
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.assignment.ada
#                                                  ^ source.ada
#                                                   ^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
#                                                        ^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^ source.ada punctuation.ada
>                  Refs : constant LSP.Lal_Utils.References_List.List :=
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada entity.name.operator.ada
#                                                                ^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^^ source.ada entity.name.operator.assignment.ada
>                    Element (C);
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^^^ source.ada entity.name.label.ada
#                           ^^ source.ada
#                             ^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^ source.ada punctuation.ada
>                  Subp_And_Refs : LSP.Messages.ALS_Subprogram_And_References;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                               ^ source.ada meta.declaration.object.ada
#                                ^ source.ada meta.declaration.object.ada punctuation.ada
#                                 ^ source.ada
#                                  ^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                            ^ source.ada punctuation.ada
>               begin
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada keyword.other.ada
>                  Subp_And_Refs.loc := Get_Node_Location (Ada_Node (Node));
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^ source.ada entity.name.operator.assignment.ada
#                                      ^ source.ada
#                                       ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^^ source.ada
#                                                          ^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^^ source.ada
#                                                                    ^^^^ source.ada entity.name.label.ada
#                                                                        ^^ source.ada
#                                                                          ^ source.ada punctuation.ada
>                  Subp_And_Refs.name := To_LSP_String
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.assignment.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                    (Langkit_Support.Text.To_UTF8 (Node.Text));
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^ source.ada entity.name.label.ada
#                                                 ^^ source.ada
#                                                   ^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^^ source.ada entity.name.label.ada
#                                                            ^^ source.ada
#                                                              ^ source.ada punctuation.ada
>
>                  for Ref of Refs loop
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada keyword.other.ada
#                            ^ source.ada
#                             ^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^^^ source.ada keyword.other.ada
>                     Append_Location (Subp_And_Refs.refs, Ref,
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada punctuation.ada
#                                                         ^ source.ada
#                                                          ^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada punctuation.ada
>                                      Get_Reference_Kind (Ref.As_Name));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                      ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^^ source.ada
#                                                          ^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada entity.name.operator.ada
#                                                              ^^^^^^^ source.ada entity.name.label.ada
#                                                                     ^^ source.ada
#                                                                       ^ source.ada punctuation.ada
>
>                     if Request.Canceled then
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^^^ source.ada keyword.other.ada
>                        return;
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^^^^ source.ada keyword.other.ada
#                              ^ source.ada punctuation.ada
>                     end if;
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^ source.ada keyword.other.ada
#                           ^ source.ada punctuation.ada
>                  end loop;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^ source.ada keyword.other.ada
#                          ^ source.ada punctuation.ada
>                  Add_Subprogram (Subp_And_Refs);
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^ source.ada punctuation.ada
>                  Next (C);
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>               end;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>            end loop;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada keyword.other.ada
#                    ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      end Process_Context;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>
>      --------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Add_Subprogram --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Add_Subprogram
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Subp : LSP.Messages.ALS_Subprogram_And_References)
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^^ source.ada
>      is
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
>         use LSP.Messages;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         for Cur of Response.result loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^^ source.ada keyword.other.ada
#                   ^ source.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^^^ source.ada keyword.other.ada
>            if Cur.loc = Subp.loc and then Cur.name = Subp.name then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada keyword.other.ada
#                                          ^ source.ada
#                                           ^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^ source.ada
#                                                      ^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^^^^ source.ada keyword.other.ada
>               Cur.refs.Append (Subp.refs);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^ source.ada punctuation.ada
>               return;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>         Response.result.Append (Subp);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^ source.ada entity.name.label.ada
#                               ^^ source.ada
#                                 ^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^ source.ada punctuation.ada
>      end Add_Subprogram;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      --  Find the references in all contexts
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      for C of Self.Contexts_For_URI (Value.textDocument.uri) loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^ source.ada entity.name.label.ada
#                                                            ^^ source.ada
#                                                              ^^^^ source.ada keyword.other.ada
>         Process_Context (C);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^^ source.ada
#                          ^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^ source.ada punctuation.ada
>
>         exit when Request.Canceled;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.control.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      if Imprecise then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
>         Self.Show_Message
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
>           ("The results of 'called by' are approximate.",
#^^^^^^^^^^^^ source.ada
#            ^ source.ada string.quoted.double.ada
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                        ^ source.ada string.quoted.double.ada
#                                                         ^ source.ada punctuation.ada
>            LSP.Messages.Warning);
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      for Loc of Response.result loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^^ source.ada keyword.other.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^^^^ source.ada keyword.other.ada
>         Sort_And_Remove_Duplicates (Loc.refs);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_ALS_Called_By_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>
>   --------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_ALS_Debug_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_ALS_Debug_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.ALS_Debug_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^^ source.ada
>      return LSP.Messages.Server_Responses.ALS_Debug_Response is
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada
#                                                              ^^ source.ada keyword.other.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      case Request.params.Kind is
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
#          ^ source.ada
#           ^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^^ source.ada keyword.other.ada
>         when LSP.Messages.Suspend_Execution =>
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^^ source.ada entity.name.operator.ada
>            declare
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada keyword.other.ada
>               Limit : constant LSP_Number := Request.params.inputQueueLength;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                    ^ source.ada meta.declaration.object.ada
#                     ^ source.ada meta.declaration.object.ada punctuation.ada
#                      ^ source.ada
#                       ^^^^^^^^ source.ada keyword.other.ada
#                               ^ source.ada
#                                ^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^^ source.ada entity.name.operator.assignment.ada
#                                             ^ source.ada
#                                              ^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada entity.name.operator.ada
#                                                             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                             ^ source.ada punctuation.ada
>            begin
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada keyword.other.ada
>               while Self.Server.Input_Queue_Length < Integer (Limit) loop
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^ source.ada
#                                                      ^^^^^^^ source.ada entity.name.label.ada
#                                                             ^^ source.ada
#                                                               ^^^^^ source.ada entity.name.label.ada
#                                                                    ^^ source.ada
#                                                                      ^^^^ source.ada keyword.other.ada
>                  delay 0.1;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^ source.ada keyword.control.ada
#                       ^ source.ada
#                        ^^^ source.ada constant.numeric.ada
#                           ^ source.ada punctuation.ada
>               end loop;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
#                       ^ source.ada punctuation.ada
>            end;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      end case;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      return Response : LSP.Messages.Server_Responses.ALS_Debug_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                     ^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>   end On_ALS_Debug_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Signature_Help_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Signature_Help_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Signature_Help_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^^ source.ada
>      return LSP.Messages.Server_Responses.SignatureHelp_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      pragma Unreferenced (Self, Request);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.control.ada
#            ^ source.ada
#             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.SignatureHelp_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => True);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Response.error :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
>        (True,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada variable.other.constant.ada
#             ^ source.ada punctuation.ada
>         (code => LSP.Errors.InternalError,
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>          message => +"Not implemented",
#^^^^^^^^^^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^ source.ada string.quoted.double.ada
#                       ^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                      ^ source.ada string.quoted.double.ada
#                                       ^ source.ada punctuation.ada
>          data => <>));
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^^ source.ada
#                      ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Signature_Help_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>
>   -----------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Color_Presentation_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -----------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Color_Presentation_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Color_Presentation_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                       ^^ source.ada
>      return LSP.Messages.Server_Responses.ColorPresentation_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      pragma Unreferenced (Self, Request);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.control.ada
#            ^ source.ada
#             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.ColorPresentation_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => True);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Response.error :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
>        (True,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada variable.other.constant.ada
#             ^ source.ada punctuation.ada
>         (code => LSP.Errors.InternalError,
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>          message => +"Not implemented",
#^^^^^^^^^^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^ source.ada string.quoted.double.ada
#                       ^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                      ^ source.ada string.quoted.double.ada
#                                       ^ source.ada punctuation.ada
>          data => <>));
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^^ source.ada
#                      ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Color_Presentation_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Document_Color_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Document_Color_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Document_Color_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^^ source.ada
>      return LSP.Messages.Server_Responses.DocumentColor_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      pragma Unreferenced (Self, Request);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.control.ada
#            ^ source.ada
#             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.DocumentColor_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => True);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Response.error :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
>        (True,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada variable.other.constant.ada
#             ^ source.ada punctuation.ada
>         (code => LSP.Errors.InternalError,
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>          message => +"Not implemented",
#^^^^^^^^^^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^ source.ada string.quoted.double.ada
#                       ^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                      ^ source.ada string.quoted.double.ada
#                                       ^ source.ada punctuation.ada
>          data => <>));
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^^ source.ada
#                      ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Document_Color_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Document_Links_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Document_Links_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Document_Links_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^^ source.ada
>      return LSP.Messages.Server_Responses.Links_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      pragma Unreferenced (Self, Request);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.control.ada
#            ^ source.ada
#             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.Links_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => True);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Response.error :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
>        (True,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada variable.other.constant.ada
#             ^ source.ada punctuation.ada
>         (code => LSP.Errors.InternalError,
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>          message => +"Not implemented",
#^^^^^^^^^^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^ source.ada string.quoted.double.ada
#                       ^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                      ^ source.ada string.quoted.double.ada
#                                       ^ source.ada punctuation.ada
>          data => <>));
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^^ source.ada
#                      ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Document_Links_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>
>   ---------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Document_Symbols_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ---------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Document_Symbols_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Document_Symbols_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                     ^^ source.ada
>      return LSP.Messages.Server_Responses.Symbol_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      --  The list of symbols for one document shouldn't depend
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  on the project: we can just choose the best context for this.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Value    : LSP.Messages.DocumentSymbolParams renames Request.params;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^^^^^^^ source.ada keyword.other.ada
#                                                          ^ source.ada
#                                                           ^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada entity.name.operator.ada
#                                                                   ^^^^^^ source.ada entity.name.label.ada
#                                                                         ^ source.ada punctuation.ada
>      Document : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>        Get_Open_Document (Self, Value.textDocument.uri, Force => False);
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada punctuation.ada
#                                                        ^ source.ada
#                                                         ^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^^ source.ada entity.name.operator.ada
#                                                                 ^ source.ada
#                                                                  ^^^^^ source.ada variable.other.constant.ada
#                                                                       ^ source.ada
#                                                                        ^ source.ada punctuation.ada
>      Context  : constant Context_Access :=
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^ source.ada entity.name.operator.assignment.ada
>        Self.Contexts.Get_Best_Context (Value.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^^ source.ada
#                                        ^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^ source.ada punctuation.ada
>      Result   : LSP.Messages.Server_Responses.Symbol_Response :=
#^^^^^^ source.ada
#      ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#            ^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^^ source.ada entity.name.operator.assignment.ada
>        (Is_Error => False,
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada punctuation.ada
>         result   => <>,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^^^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada punctuation.ada
>         error    => (Is_Set => False),
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^^^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^^ source.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^^^^^ source.ada variable.other.constant.ada
#                                     ^ source.ada
#                                      ^ source.ada punctuation.ada
>         others   => <>);
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^^^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Document = null then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^^ source.ada variable.other.constant.ada
#                        ^ source.ada
#                         ^^^^ source.ada keyword.other.ada
>         declare
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
>            Document : LSP.Ada_Documents.Document_Access :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                    ^ source.ada meta.declaration.object.ada
#                     ^ source.ada meta.declaration.object.ada punctuation.ada
#                      ^ source.ada
#                       ^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^ source.ada entity.name.operator.assignment.ada
>              Get_Open_Document (Self, Value.textDocument.uri, Force => True);
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^^ source.ada
#                                 ^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
#                                      ^ source.ada
#                                       ^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada punctuation.ada
#                                                              ^ source.ada
#                                                               ^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^^ source.ada entity.name.operator.ada
#                                                                       ^ source.ada
#                                                                        ^^^^ source.ada variable.other.constant.ada
#                                                                            ^ source.ada
#                                                                             ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Self.Get_Symbols (Document.all, Context.all, Result.result);
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^ source.ada keyword.other.ada
#                                          ^ source.ada punctuation.ada
#                                           ^ source.ada
#                                            ^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^ source.ada keyword.other.ada
#                                                       ^ source.ada punctuation.ada
#                                                        ^ source.ada
#                                                         ^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada entity.name.operator.ada
#                                                                ^^^^^^ source.ada entity.name.label.ada
#                                                                      ^ source.ada
#                                                                       ^ source.ada punctuation.ada
>            Unchecked_Free (Internal_Document_Access (Document));
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^^ source.ada
#                            ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^^ source.ada
#                                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^^ source.ada
#                                                                ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      else
#^^^^^^ source.ada
#      ^^^^ source.ada keyword.other.ada
>         Self.Get_Symbols (Document.all, Context.all, Result.result);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^ source.ada keyword.other.ada
#                                       ^ source.ada punctuation.ada
#                                        ^ source.ada
#                                         ^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^ source.ada keyword.other.ada
#                                                    ^ source.ada punctuation.ada
#                                                     ^ source.ada
#                                                      ^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada entity.name.operator.ada
#                                                             ^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada
#                                                                    ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      return Result;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada punctuation.ada
>   end On_Document_Symbols_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada punctuation.ada
>
>   -----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Rename_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -----------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Rename_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Rename_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^^ source.ada
>      return LSP.Messages.Server_Responses.Rename_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use Libadalang.Analysis;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>      Value     : LSP.Messages.RenameParams renames Request.params;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^^^^^^ source.ada keyword.other.ada
#                                                   ^ source.ada
#                                                    ^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada punctuation.ada
>      Response  : LSP.Messages.Server_Responses.Rename_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>
>      Document  : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada
#                                                             ^^ source.ada entity.name.operator.assignment.ada
>                   Get_Open_Document (Self, Value.textDocument.uri);
#^^^^^^^^^^^^^^^^^^^ source.ada
#                   ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
#                                           ^ source.ada
#                                            ^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada entity.name.operator.ada
#                                                               ^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada
#                                                                   ^ source.ada punctuation.ada
>
>      procedure Process_Context (C : Context_Access);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                               ^^ source.ada
#                                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^ source.ada punctuation.ada
>      --  Process the rename request for the given context, and add
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  the results to response.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      ---------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Process_Context --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ---------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Process_Context (C : Context_Access) is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                               ^^ source.ada
#                                 ^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^^ source.ada
#                                                     ^^ source.ada keyword.other.ada
>         Position : constant LSP.Messages.TextDocumentPositionParams :=
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                 ^ source.ada meta.declaration.object.ada
#                  ^ source.ada meta.declaration.object.ada punctuation.ada
#                   ^ source.ada
#                    ^^^^^^^^ source.ada keyword.other.ada
#                            ^ source.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^^ source.ada entity.name.operator.assignment.ada
>                      (Value.textDocument, Value.position);
#^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                       ^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
#                                          ^ source.ada
#                                           ^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^ source.ada punctuation.ada
>
>         Name_Node  : constant Name := LSP.Lal_Utils.Get_Node_As_Name
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^^^^^^ source.ada keyword.other.ada
#                              ^ source.ada
#                               ^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^ source.ada entity.name.operator.assignment.ada
#                                      ^ source.ada
#                                       ^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (C.Get_Node_At (Document, Position));
#^^^^^^^^^^^^ source.ada
#            ^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^^ source.ada
#                                               ^ source.ada punctuation.ada
>
>         Definition : Defining_Name;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>         Imprecise  : Boolean;
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>         Empty      : LSP.Messages.TextEdit_Vector;
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^^^^^^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada punctuation.ada
>
>         procedure Process_Comments
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                  ^ source.ada meta.declaration.subprogram.ada
#                   ^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>           (Node : Ada_Node;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>            Uri  : LSP.Messages.DocumentUri);
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^ source.ada punctuation.ada
>         --  Iterate over all comments and include them in the response when
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  they contain a renamed word
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         -----------------------
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  Process_Comments --
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         -----------------------
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         procedure Process_Comments
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                  ^ source.ada meta.declaration.subprogram.ada
#                   ^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>           (Node : Ada_Node;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>            Uri  : LSP.Messages.DocumentUri)
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^^ source.ada meta.declaration.object.ada
#                 ^ source.ada meta.declaration.object.ada punctuation.ada
#                  ^ source.ada
#                   ^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
>         is
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
>            Token     : Token_Reference := First_Token (Node.Unit);
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                 ^^^^^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^^ source.ada entity.name.operator.assignment.ada
#                                          ^ source.ada
#                                           ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
#                                                        ^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada entity.name.operator.ada
#                                                             ^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^ source.ada punctuation.ada
>            Name      : constant Wide_Wide_String :=
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^^^^^^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^^^^^^ source.ada keyword.other.ada
#                                ^ source.ada
#                                 ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^^ source.ada entity.name.operator.assignment.ada
>              Ada.Strings.Wide_Wide_Unbounded.To_Wide_Wide_String
#^^^^^^^^^^^^^^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                (Get_Last_Name (Name_Node));
#^^^^^^^^^^^^^^^^^ source.ada
#                 ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^ source.ada punctuation.ada
>            Text_Edit : LSP.Messages.TextEdit;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                     ^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>            Span      : LSP.Messages.Span;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^^^^^^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
>            Current   : Token_Reference;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                   ^^^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>            Diff      : Integer;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^^^^^^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>
>            Box_Line : constant Wide_String (1 .. 80) := (others => '-');
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                    ^ source.ada meta.declaration.object.ada
#                     ^ source.ada meta.declaration.object.ada punctuation.ada
#                      ^ source.ada
#                       ^^^^^^^^ source.ada keyword.other.ada
#                               ^ source.ada
#                                ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
#                                             ^ source.ada constant.numeric.ada
#                                              ^ source.ada
#                                               ^^ source.ada entity.name.operator.ada
#                                                 ^ source.ada
#                                                  ^^ source.ada constant.numeric.ada
#                                                    ^^ source.ada
#                                                      ^^ source.ada entity.name.operator.assignment.ada
#                                                        ^^ source.ada
#                                                          ^^^^^^ source.ada keyword.other.ada
#                                                                ^ source.ada
#                                                                 ^^ source.ada entity.name.operator.ada
#                                                                   ^ source.ada
#                                                                    ^^^ source.ada constant.character.ada
#                                                                       ^ source.ada
#                                                                        ^ source.ada punctuation.ada
>
>            function Process_Box return Boolean;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                    ^ source.ada meta.declaration.subprogram.ada
#                     ^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                ^ source.ada
#                                 ^^^^^^ source.ada keyword.other.ada
#                                       ^ source.ada
#                                        ^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
>            --  Check whether Current is box header/footer and modify it.
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  Return False when the searching cycle should be stopped.
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>            -----------------
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            -- Process_Box --
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            -----------------
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>            function Process_Box return Boolean is
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                    ^ source.ada meta.declaration.subprogram.ada
#                     ^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                ^ source.ada
#                                 ^^^^^^ source.ada keyword.other.ada
#                                       ^ source.ada
#                                        ^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada keyword.other.ada
>               use Langkit_Support.Text;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>               use Langkit_Support.Slocs;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
>
>            begin
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada keyword.other.ada
>               if Current = No_Token then
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^ source.ada
#                            ^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^^^ source.ada keyword.other.ada
>                  return False;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^^ source.ada variable.other.constant.ada
#                              ^ source.ada punctuation.ada
>               end if;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>
>               case Kind (Data (Current)) is
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.other.ada
#                   ^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^^ source.ada
#                          ^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^^^^ source.ada entity.name.label.ada
#                                       ^^^ source.ada
#                                          ^^ source.ada keyword.other.ada
>                  when Ada_Whitespace =>
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada keyword.other.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.ada
>                     return True;
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^^ source.ada variable.other.constant.ada
#                                ^ source.ada punctuation.ada
>
>                  when Ada_Comment =>
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada keyword.other.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.ada
>                     declare
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^ source.ada keyword.other.ada
>                        Value : constant Text_Type := Text (Current);
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                             ^ source.ada meta.declaration.object.ada
#                              ^ source.ada meta.declaration.object.ada punctuation.ada
#                               ^ source.ada
#                                ^^^^^^^^ source.ada keyword.other.ada
#                                        ^ source.ada
#                                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^^ source.ada entity.name.operator.assignment.ada
#                                                     ^ source.ada
#                                                      ^^^^ source.ada entity.name.label.ada
#                                                          ^^ source.ada
#                                                            ^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada
#                                                                    ^ source.ada punctuation.ada
>                     begin
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^ source.ada keyword.other.ada
>                        for Idx in Value'Range loop
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada storage.modifier.ada
#                                  ^ source.ada
#                                   ^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^^^^ source.ada keyword.other.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada keyword.other.ada
>                           if Value (Idx) /= '-' then
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^ source.ada keyword.other.ada
#                             ^ source.ada
#                              ^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^^ source.ada
#                                          ^^ source.ada entity.name.operator.ada
#                                            ^ source.ada
#                                             ^^^ source.ada constant.character.ada
#                                                ^ source.ada
#                                                 ^^^^ source.ada keyword.other.ada
>                              return False;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^^^ source.ada keyword.other.ada
#                                    ^ source.ada
#                                     ^^^^^ source.ada variable.other.constant.ada
#                                          ^ source.ada punctuation.ada
>                           end if;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^^ source.ada keyword.other.ada
#                              ^ source.ada
#                               ^^ source.ada keyword.other.ada
#                                 ^ source.ada punctuation.ada
>                        end loop;
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^^ source.ada keyword.other.ada
#                                ^ source.ada punctuation.ada
>
>                        if Diff > 0 then
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^ source.ada
#                                  ^ source.ada constant.numeric.ada
#                                   ^ source.ada
#                                    ^^^^ source.ada keyword.other.ada
>                           --  Increase '-', Diff is positive
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^ source.ada comment.line.ada
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                           declare
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^^^^^^ source.ada keyword.other.ada
>                              Sloc : constant Source_Location_Range :=
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^ source.ada keyword.other.ada
#                                             ^ source.ada
#                                              ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada
#                                                                    ^^ source.ada entity.name.operator.assignment.ada
>                                Sloc_Range (Data (Current));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                ^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
#                                            ^^^^ source.ada entity.name.label.ada
#                                                ^^ source.ada
#                                                  ^^^^^^^ source.ada entity.name.label.ada
#                                                         ^^ source.ada
#                                                           ^ source.ada punctuation.ada
>
>                              Line  : constant LSP.Types.Line_Number :=
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^^ source.ada meta.declaration.object.ada
#                                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^^^^ source.ada keyword.other.ada
#                                              ^ source.ada
#                                               ^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^^ source.ada entity.name.operator.assignment.ada
>                                LSP.Types.Line_Number (Sloc.Start_Line) - 1;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                ^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                      ^^ source.ada
#                                                                        ^ source.ada entity.name.operator.ada
#                                                                         ^ source.ada
#                                                                          ^ source.ada constant.numeric.ada
#                                                                           ^ source.ada punctuation.ada
>                              Start : constant UTF_16_Index := UTF_16_Index
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                   ^ source.ada meta.declaration.object.ada
#                                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^^^^ source.ada keyword.other.ada
#                                              ^ source.ada
#                                               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
#                                                              ^ source.ada
#                                                               ^^^^^^^^^^^^ source.ada entity.name.label.ada
>                                (Sloc.End_Column - 1);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                 ^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^ source.ada
#                                                   ^ source.ada constant.numeric.ada
#                                                    ^ source.ada
#                                                     ^ source.ada punctuation.ada
>                           begin
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^^^^ source.ada keyword.other.ada
>                              Response.result.changes (Uri).Append
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^^^^ source.ada entity.name.label.ada
>                                (LSP.Messages.TextEdit'
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                 ^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
>                                   (span =>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                    ^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^ source.ada entity.name.operator.ada
>                                        (first => (Line, Start),
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                         ^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^ source.ada entity.name.operator.ada
#                                                 ^^ source.ada
#                                                   ^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada punctuation.ada
#                                                        ^ source.ada
#                                                         ^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^ source.ada punctuation.ada
>                                         last  => (Line, Start)),
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                         ^^^^ source.ada entity.name.label.ada
#                                             ^^ source.ada
#                                               ^^ source.ada entity.name.operator.ada
#                                                 ^^ source.ada
#                                                   ^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada punctuation.ada
#                                                        ^ source.ada
#                                                         ^^^^^ source.ada entity.name.label.ada
#                                                              ^^ source.ada
#                                                                ^ source.ada punctuation.ada
>                                    newText =>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                    ^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^ source.ada entity.name.operator.ada
>                                      LSP.Types.To_Unbounded_Wide_String
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                      ^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                                        (Box_Line (1 .. Diff))));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                         ^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^^ source.ada
#                                                   ^ source.ada constant.numeric.ada
#                                                    ^ source.ada
#                                                     ^^ source.ada entity.name.operator.ada
#                                                       ^ source.ada
#                                                        ^^^^ source.ada entity.name.label.ada
#                                                            ^^^^ source.ada
#                                                                ^ source.ada punctuation.ada
>                           end;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^^ source.ada keyword.other.ada
#                              ^ source.ada punctuation.ada
>
>                        else
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^^ source.ada keyword.other.ada
>                           --  Decrease '-', Diff is negative
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^ source.ada comment.line.ada
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                           declare
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^^^^^^ source.ada keyword.other.ada
>                              Sloc : constant Source_Location_Range :=
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^ source.ada keyword.other.ada
#                                             ^ source.ada
#                                              ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada
#                                                                    ^^ source.ada entity.name.operator.assignment.ada
>                                Sloc_Range (Data (Current));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                ^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
#                                            ^^^^ source.ada entity.name.label.ada
#                                                ^^ source.ada
#                                                  ^^^^^^^ source.ada entity.name.label.ada
#                                                         ^^ source.ada
#                                                           ^ source.ada punctuation.ada
>
>                              Line  : constant LSP.Types.Line_Number :=
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^^ source.ada meta.declaration.object.ada
#                                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                                     ^ source.ada
#                                      ^^^^^^^^ source.ada keyword.other.ada
#                                              ^ source.ada
#                                               ^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^^ source.ada entity.name.operator.assignment.ada
>                                LSP.Types.Line_Number (Sloc.Start_Line) - 1;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                ^^^ source.ada entity.name.label.ada
#                                   ^ source.ada entity.name.operator.ada
#                                    ^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                      ^^ source.ada
#                                                                        ^ source.ada entity.name.operator.ada
#                                                                         ^ source.ada
#                                                                          ^ source.ada constant.numeric.ada
#                                                                           ^ source.ada punctuation.ada
>                              Last : constant UTF_16_Index := UTF_16_Index
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^^^ source.ada keyword.other.ada
#                                             ^ source.ada
#                                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^^ source.ada entity.name.operator.assignment.ada
#                                                             ^ source.ada
#                                                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
>                                (Sloc.End_Column - 1);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                 ^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^ source.ada
#                                                   ^ source.ada constant.numeric.ada
#                                                    ^ source.ada
#                                                     ^ source.ada punctuation.ada
>                           begin
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^^^^ source.ada keyword.other.ada
>                              Response.result.changes (Uri).Append
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^ source.ada entity.name.label.ada
#                                                     ^^ source.ada
#                                                       ^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^^^^ source.ada entity.name.label.ada
>                                (LSP.Messages.TextEdit'
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                 ^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
>                                   (span =>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                    ^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^ source.ada entity.name.operator.ada
>                                        (first =>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                         ^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^ source.ada entity.name.operator.ada
>                                             (Line, Last - UTF_16_Index
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                              ^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada punctuation.ada
#                                                   ^ source.ada
#                                                    ^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^ source.ada
#                                                           ^^^^^^^^^^^^ source.ada entity.name.label.ada
>                                                (abs Diff)),
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                                 ^^^ source.ada entity.name.operator.ada
#                                                    ^ source.ada
#                                                     ^^^^ source.ada entity.name.label.ada
#                                                         ^^ source.ada
#                                                           ^ source.ada punctuation.ada
>                                         last  =>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                         ^^^^ source.ada entity.name.label.ada
#                                             ^^ source.ada
#                                               ^^ source.ada entity.name.operator.ada
>                                           (Line, Last)),
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                            ^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
#                                                 ^ source.ada
#                                                  ^^^^ source.ada entity.name.label.ada
#                                                      ^^ source.ada
#                                                        ^ source.ada punctuation.ada
>                                    newText =>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                    ^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^ source.ada entity.name.operator.ada
>                                      LSP.Types.To_Unbounded_Wide_String
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                      ^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                                        ("")));
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                                         ^ source.ada string.quoted.double.ada
#                                          ^ source.ada string.quoted.double.ada
#                                           ^^^ source.ada
#                                              ^ source.ada punctuation.ada
>                           end;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^^^ source.ada keyword.other.ada
#                              ^ source.ada punctuation.ada
>                        end if;
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^ source.ada keyword.other.ada
#                              ^ source.ada punctuation.ada
>
>                        return False;
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^^^^ source.ada keyword.other.ada
#                              ^ source.ada
#                               ^^^^^ source.ada variable.other.constant.ada
#                                    ^ source.ada punctuation.ada
>                     end;
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^ source.ada keyword.other.ada
#                        ^ source.ada punctuation.ada
>
>                  when others =>
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada keyword.other.ada
#                      ^ source.ada
#                       ^^^^^^ source.ada keyword.other.ada
#                             ^ source.ada
#                              ^^ source.ada entity.name.operator.ada
>                     return False;
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^^^ source.ada variable.other.constant.ada
#                                 ^ source.ada punctuation.ada
>               end case;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
#                       ^ source.ada punctuation.ada
>            end Process_Box;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            Diff := Length (Value.newName) - Name'Length;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^^ source.ada entity.name.operator.assignment.ada
#                   ^ source.ada
#                    ^^^^^^ source.ada entity.name.label.ada
#                          ^^ source.ada
#                            ^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^ source.ada
#                                             ^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada punctuation.ada
>
>            while Token /= No_Token loop
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.ada
#                          ^ source.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^^^ source.ada keyword.other.ada
>               if Kind (Data (Token)) = Ada_Comment
#^^^^^^^^^^^^^^^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^ source.ada entity.name.label.ada
#                      ^^ source.ada
#                        ^^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^^^^^ source.ada entity.name.label.ada
#                                   ^^^ source.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^ source.ada entity.name.label.ada
>                 and then Contains (Token, Name, True, Text_Edit.span)
#^^^^^^^^^^^^^^^^^ source.ada
#                 ^^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^^^^^^ source.ada entity.name.label.ada
#                                  ^^ source.ada
#                                    ^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada punctuation.ada
#                                          ^ source.ada
#                                           ^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
#                                                ^ source.ada
#                                                 ^^^^ source.ada variable.other.constant.ada
#                                                     ^ source.ada punctuation.ada
#                                                      ^ source.ada
#                                                       ^^^^^^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada entity.name.operator.ada
#                                                                 ^^^^ source.ada entity.name.label.ada
#                                                                     ^^ source.ada
>               then
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada keyword.other.ada
>                  Text_Edit.newText := Value.newName;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^^ source.ada entity.name.operator.assignment.ada
#                                      ^ source.ada
#                                       ^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
>
>                  if Diff /= 0
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^ source.ada constant.numeric.ada
>                    and then Contains
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^ source.ada keyword.other.ada
#                            ^ source.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
>                      (Token, "-- " & Name & " --", False, Span)
#^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                       ^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
#                             ^ source.ada
#                              ^ source.ada string.quoted.double.ada
#                               ^^^ source.ada string.quoted.double.ada
#                                  ^ source.ada string.quoted.double.ada
#                                   ^ source.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^ source.ada
#                                             ^ source.ada string.quoted.double.ada
#                                              ^^^ source.ada string.quoted.double.ada
#                                                 ^ source.ada string.quoted.double.ada
#                                                  ^ source.ada punctuation.ada
#                                                   ^ source.ada
#                                                    ^^^^^ source.ada variable.other.constant.ada
#                                                         ^ source.ada punctuation.ada
#                                                          ^ source.ada
#                                                           ^^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
>                  then
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada keyword.other.ada
>                     --  Can be a comment box
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^ source.ada comment.line.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                     Current := Previous (Token);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada entity.name.operator.assignment.ada
#                               ^ source.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^^ source.ada
#                                          ^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^ source.ada punctuation.ada
>                     loop
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^ source.ada keyword.other.ada
>                        --  Looking for the box header
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^ source.ada comment.line.ada
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                        exit when not Process_Box;
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^^ source.ada keyword.control.ada
#                            ^ source.ada
#                             ^^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>                        Current := Previous (Current);
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.assignment.ada
#                                  ^ source.ada
#                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
#                                             ^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada
#                                                     ^ source.ada punctuation.ada
>                     end loop;
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^ source.ada keyword.other.ada
#                             ^ source.ada punctuation.ada
>
>                     --  Include corrected comment itself
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^ source.ada comment.line.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                     Response.result.changes (Uri).Append (Text_Edit);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^ source.ada entity.name.label.ada
#                                                         ^^ source.ada
#                                                           ^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^ source.ada punctuation.ada
>
>                     Current := Next (Token);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada entity.name.operator.assignment.ada
#                               ^ source.ada
#                                ^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^ source.ada punctuation.ada
>                     loop
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^ source.ada keyword.other.ada
>                        --  Looking for the box footer
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^ source.ada comment.line.ada
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                        exit when not Process_Box;
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^^ source.ada keyword.control.ada
#                            ^ source.ada
#                             ^^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>                        Current := Next (Current);
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.assignment.ada
#                                  ^ source.ada
#                                   ^^^^ source.ada entity.name.label.ada
#                                       ^^ source.ada
#                                         ^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^ source.ada punctuation.ada
>                     end loop;
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^^^ source.ada keyword.other.ada
#                             ^ source.ada punctuation.ada
>
>                  else
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada keyword.other.ada
>                     Response.result.changes (Uri).Append (Text_Edit);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^ source.ada entity.name.label.ada
#                                                         ^^ source.ada
#                                                           ^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^ source.ada punctuation.ada
>                  end if;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^ source.ada keyword.other.ada
#                        ^ source.ada punctuation.ada
>               end if;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>
>               Token := Next (Token);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
#                       ^ source.ada
#                        ^^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^ source.ada punctuation.ada
>            end loop;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada keyword.other.ada
#                    ^ source.ada punctuation.ada
>         end Process_Comments;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         if Name_Node = No_Name then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         Definition := LSP.Lal_Utils.Resolve_Name
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^ source.ada entity.name.operator.assignment.ada
#                      ^ source.ada
#                       ^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Name_Node,
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>            Self.Trace,
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>            Imprecise => Imprecise);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^ source.ada punctuation.ada
>
>         --  If we used the imprecise fallback to get to the definition, stop
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         if Imprecise then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         if Definition = No_Defining_Name or Request.Canceled then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^^ source.ada entity.name.operator.ada
#                                            ^ source.ada
#                                             ^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada entity.name.operator.ada
#                                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada
#                                                              ^^^^ source.ada keyword.other.ada
>            return;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         declare
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
>            Count      : Cancel_Countdown := 0;
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                 ^^^^^^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^^ source.ada entity.name.operator.assignment.ada
#                                            ^ source.ada
#                                             ^ source.ada constant.numeric.ada
#                                              ^ source.ada punctuation.ada
>            References : constant Base_Id_Array :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.assignment.ada
>                           C.Get_References_For_Renaming
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                           ^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                             (Definition,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
>                              Imprecise_Results => Imprecise);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                              ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^ source.ada entity.name.operator.ada
#                                                  ^ source.ada
#                                                   ^^^^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada
#                                                             ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            if Imprecise then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada
#                         ^^^^ source.ada keyword.other.ada
>               Self.Show_Message
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^ source.ada entity.name.label.ada
>                 ("References are not precise: renamed cancelled",
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^ source.ada string.quoted.double.ada
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                                ^ source.ada string.quoted.double.ada
#                                                                 ^ source.ada punctuation.ada
>                  LSP.Messages.Warning);
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada
#                                       ^ source.ada punctuation.ada
>               return;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>
>            for Node of References loop
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^^^ source.ada keyword.other.ada
>               declare
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^ source.ada keyword.other.ada
>                  Location : constant LSP.Messages.Location :=
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                          ^ source.ada meta.declaration.object.ada
#                           ^ source.ada meta.declaration.object.ada punctuation.ada
#                            ^ source.ada
#                             ^^^^^^^^ source.ada keyword.other.ada
#                                     ^ source.ada
#                                      ^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>                    Get_Node_Location (Node => Node.As_Ada_Node);
#^^^^^^^^^^^^^^^^^^^^ source.ada
#                    ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^^ source.ada
#                                       ^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^ source.ada entity.name.operator.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>                  Item : constant LSP.Messages.TextEdit :=
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^ source.ada meta.declaration.object.ada
#                       ^ source.ada meta.declaration.object.ada punctuation.ada
#                        ^ source.ada
#                         ^^^^^^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^^ source.ada entity.name.operator.assignment.ada
>                    (span    => Location.span,
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^^^^ source.ada
#                             ^^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>                     newText => Value.newName);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada entity.name.operator.ada
#                               ^ source.ada
#                                ^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^ source.ada punctuation.ada
>               begin
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^ source.ada keyword.other.ada
>                  if not Response.result.changes.Contains (Location.uri) then
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^^ source.ada
#                                                           ^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada entity.name.operator.ada
#                                                                    ^^^ source.ada entity.name.label.ada
#                                                                       ^^ source.ada
#                                                                         ^^^^ source.ada keyword.other.ada
>                     --  We haven't touched this document yet, create an empty
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^ source.ada comment.line.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                     --  change list
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^ source.ada comment.line.ada
#                       ^^^^^^^^^^^^^ source.ada comment.line.ada
>                     Response.result.changes.Insert (Location.uri, Empty);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^ source.ada entity.name.label.ada
#                                                   ^^ source.ada
#                                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada entity.name.operator.ada
#                                                              ^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada punctuation.ada
#                                                                  ^ source.ada
#                                                                   ^^^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^ source.ada punctuation.ada
>
>                     --  Process comments if it is needed
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^ source.ada comment.line.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                     if Self.Refactoring.Renaming.In_Comments then
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada
#                                                              ^^^^ source.ada keyword.other.ada
>                        Process_Comments (Node.As_Ada_Node, Location.uri);
#^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                        ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^^ source.ada
#                                          ^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada punctuation.ada
#                                                           ^ source.ada
#                                                            ^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada entity.name.operator.ada
#                                                                     ^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^ source.ada punctuation.ada
>                     end if;
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^ source.ada keyword.other.ada
#                        ^ source.ada
#                         ^^ source.ada keyword.other.ada
#                           ^ source.ada punctuation.ada
>                  end if;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^ source.ada keyword.other.ada
#                        ^ source.ada punctuation.ada
>
>                  --  When iterating over all contexts (and therefore all
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada comment.line.ada
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                  --  projects), it's possible to encounter the same
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada comment.line.ada
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                  --  definitions more than once, so verify that the result
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada comment.line.ada
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                  --  is not already recorded before adding it.
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada comment.line.ada
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>                  if not Response.result.changes
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^ source.ada entity.name.label.ada
>                    (Location.uri).Contains (Item)
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
#                                             ^^^^ source.ada entity.name.label.ada
#                                                 ^^ source.ada
>                  then
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada keyword.other.ada
>                     Response.result.changes (Location.uri).Append (Item);
#^^^^^^^^^^^^^^^^^^^^^ source.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada entity.name.operator.ada
#                                                       ^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada
#                                                           ^ source.ada entity.name.operator.ada
#                                                            ^^^^^^ source.ada entity.name.label.ada
#                                                                  ^^ source.ada
#                                                                    ^^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^ source.ada punctuation.ada
>                  end if;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^ source.ada keyword.other.ada
#                        ^ source.ada punctuation.ada
>
>                  exit when Count = 0 and then Request.Canceled;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^ source.ada keyword.control.ada
#                      ^ source.ada
#                       ^^^^ source.ada keyword.other.ada
#                           ^ source.ada
#                            ^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^ source.ada
#                                    ^ source.ada constant.numeric.ada
#                                     ^ source.ada
#                                      ^^^ source.ada entity.name.operator.ada
#                                         ^ source.ada
#                                          ^^^^ source.ada keyword.other.ada
#                                              ^ source.ada
#                                               ^^^^^^^ source.ada entity.name.label.ada
#                                                      ^ source.ada entity.name.operator.ada
#                                                       ^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada punctuation.ada
>
>                  Count := Count - 1;
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.assignment.ada
#                          ^ source.ada
#                           ^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^ source.ada
#                                   ^ source.ada constant.numeric.ada
#                                    ^ source.ada punctuation.ada
>               end;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>            end loop;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^ source.ada keyword.other.ada
#                    ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      end Process_Context;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      for C of Self.Contexts_For_URI (Value.textDocument.uri) loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^ source.ada entity.name.label.ada
#           ^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada entity.name.operator.ada
#                                                         ^^^ source.ada entity.name.label.ada
#                                                            ^^ source.ada
#                                                              ^^^^ source.ada keyword.other.ada
>         Process_Context (C);
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^^ source.ada
#                          ^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^ source.ada punctuation.ada
>
>         exit when Request.Canceled;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.control.ada
#             ^ source.ada
#              ^^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Rename_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>
>   --------------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_DidChangeConfiguration_Notification --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   --------------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding procedure On_DidChangeConfiguration_Notification
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                       ^ source.ada meta.declaration.subprogram.ada
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self  : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^ source.ada storage.modifier.ada
#                    ^ source.ada
#                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>      Value : LSP.Messages.DidChangeConfigurationParams)
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^^ source.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use type GNATCOLL.JSON.JSON_Value_Type;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada punctuation.ada
>
>      projectFile            : constant String := "projectFile";
#^^^^^^ source.ada
#      ^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                 ^^^^^^^^^^^^ source.ada meta.declaration.object.ada
#                             ^ source.ada meta.declaration.object.ada punctuation.ada
#                              ^ source.ada
#                               ^^^^^^^^ source.ada keyword.other.ada
#                                       ^ source.ada
#                                        ^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^ source.ada entity.name.operator.assignment.ada
#                                                 ^ source.ada
#                                                  ^ source.ada string.quoted.double.ada
#                                                   ^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                              ^ source.ada string.quoted.double.ada
#                                                               ^ source.ada punctuation.ada
>      scenarioVariables      : constant String := "scenarioVariables";
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                       ^^^^^^ source.ada meta.declaration.object.ada
#                             ^ source.ada meta.declaration.object.ada punctuation.ada
#                              ^ source.ada
#                               ^^^^^^^^ source.ada keyword.other.ada
#                                       ^ source.ada
#                                        ^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^ source.ada entity.name.operator.assignment.ada
#                                                 ^ source.ada
#                                                  ^ source.ada string.quoted.double.ada
#                                                   ^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                                    ^ source.ada string.quoted.double.ada
#                                                                     ^ source.ada punctuation.ada
>      defaultCharset         : constant String := "defaultCharset";
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                    ^^^^^^^^^ source.ada meta.declaration.object.ada
#                             ^ source.ada meta.declaration.object.ada punctuation.ada
#                              ^ source.ada
#                               ^^^^^^^^ source.ada keyword.other.ada
#                                       ^ source.ada
#                                        ^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^ source.ada entity.name.operator.assignment.ada
#                                                 ^ source.ada
#                                                  ^ source.ada string.quoted.double.ada
#                                                   ^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                                 ^ source.ada string.quoted.double.ada
#                                                                  ^ source.ada punctuation.ada
>      enableDiagnostics      : constant String := "enableDiagnostics";
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                       ^^^^^^ source.ada meta.declaration.object.ada
#                             ^ source.ada meta.declaration.object.ada punctuation.ada
#                              ^ source.ada
#                               ^^^^^^^^ source.ada keyword.other.ada
#                                       ^ source.ada
#                                        ^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^ source.ada entity.name.operator.assignment.ada
#                                                 ^ source.ada
#                                                  ^ source.ada string.quoted.double.ada
#                                                   ^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                                    ^ source.ada string.quoted.double.ada
#                                                                     ^ source.ada punctuation.ada
>      enableIndexing         : constant String := "enableIndexing";
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                    ^^^^^^^^^ source.ada meta.declaration.object.ada
#                             ^ source.ada meta.declaration.object.ada punctuation.ada
#                              ^ source.ada
#                               ^^^^^^^^ source.ada keyword.other.ada
#                                       ^ source.ada
#                                        ^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^ source.ada entity.name.operator.assignment.ada
#                                                 ^ source.ada
#                                                  ^ source.ada string.quoted.double.ada
#                                                   ^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                                 ^ source.ada string.quoted.double.ada
#                                                                  ^ source.ada punctuation.ada
>      renameInComments       : constant String := "renameInComments";
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                      ^^^^^^^ source.ada meta.declaration.object.ada
#                             ^ source.ada meta.declaration.object.ada punctuation.ada
#                              ^ source.ada
#                               ^^^^^^^^ source.ada keyword.other.ada
#                                       ^ source.ada
#                                        ^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^^ source.ada entity.name.operator.assignment.ada
#                                                 ^ source.ada
#                                                  ^ source.ada string.quoted.double.ada
#                                                   ^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                                   ^ source.ada string.quoted.double.ada
#                                                                    ^ source.ada punctuation.ada
>
>      Ada       : constant LSP.Types.LSP_Any := Value.settings.Get ("ada");
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^^^^^^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^^^ source.ada keyword.other.ada
#                          ^ source.ada
#                           ^^^ source.ada entity.name.label.ada
#                              ^ source.ada entity.name.operator.ada
#                               ^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^^ source.ada entity.name.operator.assignment.ada
#                                               ^ source.ada
#                                                ^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada entity.name.operator.ada
#                                                               ^^^ source.ada entity.name.label.ada
#                                                                  ^^ source.ada
#                                                                    ^ source.ada string.quoted.double.ada
#                                                                     ^^^ source.ada string.quoted.double.ada
#                                                                        ^ source.ada string.quoted.double.ada
#                                                                         ^ source.ada
#                                                                          ^ source.ada punctuation.ada
>      File      : LSP.Types.LSP_String;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Charset   : Unbounded_String;
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada punctuation.ada
>      Variables : LSP.Types.LSP_Any;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Ada.Kind = GNATCOLL.JSON.JSON_Object_Type then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^^^^ source.ada keyword.other.ada
>         if Ada.Has_Field (projectFile) then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^^ source.ada
#                                        ^^^^ source.ada keyword.other.ada
>            File := +Ada.Get (projectFile).Get;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^^ source.ada entity.name.operator.assignment.ada
#                   ^ source.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^ source.ada entity.name.label.ada
#                                              ^ source.ada punctuation.ada
>
>            --  Drop uri scheme if present
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            if LSP.Types.Starts_With (File, "file:") then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
#                                           ^ source.ada
#                                            ^ source.ada string.quoted.double.ada
#                                             ^^^^^ source.ada string.quoted.double.ada
#                                                  ^ source.ada string.quoted.double.ada
#                                                   ^^ source.ada
#                                                     ^^^^ source.ada keyword.other.ada
>               File := URI_To_File (File);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^ source.ada entity.name.operator.assignment.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^^ source.ada
#                                    ^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         if Ada.Has_Field (scenarioVariables) and then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^ source.ada entity.name.operator.ada
#                                                 ^ source.ada
#                                                  ^^^^ source.ada keyword.other.ada
>           Ada.Get (scenarioVariables).Kind  = GNATCOLL.JSON.JSON_Object_Type
#^^^^^^^^^^^ source.ada
#           ^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^^ source.ada
#                    ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^ source.ada
#                                               ^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada entity.name.operator.ada
#                                                             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>         then
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
>            Variables := Ada.Get (scenarioVariables);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada
#                                                    ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         if Ada.Has_Field (defaultCharset) then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^^^^ source.ada keyword.other.ada
>            Charset := Ada.Get (defaultCharset);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^ source.ada entity.name.operator.assignment.ada
#                      ^ source.ada
#                       ^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada
#                                               ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         --  It looks like the protocol does not allow clients to say whether
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  or not they want diagnostics as part of
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  InitializeParams.capabilities.textDocument. So we support
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  deactivating of diagnostics via a setting here.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         if Ada.Has_Field (enableDiagnostics) then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^^ source.ada keyword.other.ada
>            Self.Diagnostics_Enabled := Ada.Get (enableDiagnostics);
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.assignment.ada
#                                       ^ source.ada
#                                        ^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^ source.ada entity.name.label.ada
#                                               ^^ source.ada
#                                                 ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada
#                                                                   ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         --  Similarly to diagnostics, we support selectively activating
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  indexing in the parameters to this request.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         if Ada.Has_Field (enableIndexing) then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^^^^ source.ada keyword.other.ada
>            Self.Indexing_Enabled := Ada.Get (enableIndexing);
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.assignment.ada
#                                    ^ source.ada
#                                     ^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                            ^ source.ada
#                                                             ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>
>         --  Retrieve the different textDocument/rename options if specified
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>         if Ada.Has_Field (renameInComments) then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^^ source.ada
#                                             ^^^^ source.ada keyword.other.ada
>            Self.Refactoring.Renaming.In_Comments :=
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada
#                                                  ^^ source.ada entity.name.operator.assignment.ada
>              Ada.Get (renameInComments);
#^^^^^^^^^^^^^^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^^ source.ada
#                       ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      if File /= Empty_LSP_String then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada
#              ^^ source.ada entity.name.operator.ada
#                ^ source.ada
#                 ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^^^ source.ada keyword.other.ada
>         --  The projectFile may be either an absolute path or a
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  relative path; if so, we're assuming it's relative
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  to Self.Root.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         declare
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada keyword.other.ada
>            Project_File : constant Filesystem_String :=
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                        ^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^^^^^^ source.ada keyword.other.ada
#                                   ^ source.ada
#                                    ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^^ source.ada entity.name.operator.assignment.ada
>              +To_UTF_8_String (File);
#^^^^^^^^^^^^^^ source.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^ source.ada punctuation.ada
>            GPR : Virtual_File;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
>         begin
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada keyword.other.ada
>            if Is_Absolute_Path (Project_File) then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^^ source.ada
#                                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^^ source.ada
#                                               ^^^^ source.ada keyword.other.ada
>               GPR := Create (Project_File);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.assignment.ada
#                     ^ source.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^ source.ada punctuation.ada
>            else
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada keyword.other.ada
>               GPR := Create_From_Dir (Self.Root, Project_File);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.assignment.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^^ source.ada
#                                       ^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada punctuation.ada
#                                                 ^ source.ada
#                                                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>
>            Self.Load_Project (GPR, Variables, To_String (Charset));
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^^ source.ada
#                               ^^^ source.ada entity.name.label.ada
#                                  ^ source.ada punctuation.ada
#                                   ^ source.ada
#                                    ^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
#                                              ^ source.ada
#                                               ^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^^ source.ada
#                                                          ^^^^^^^ source.ada entity.name.label.ada
#                                                                 ^^ source.ada
#                                                                   ^ source.ada punctuation.ada
>         end;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Self.Ensure_Project_Loaded;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>   end On_DidChangeConfiguration_Notification;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>
>   ------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Load_Project --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Load_Project
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self     : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^ source.ada storage.modifier.ada
#                       ^ source.ada
#                        ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>      GPR      : Virtual_File;
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^^^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>      Scenario : LSP.Types.LSP_Any;
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada punctuation.ada
>      Charset  : String)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^ source.ada entity.name.label.ada
#                       ^^ source.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      use GNATCOLL.Projects;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>      Errors        : LSP.Messages.ShowMessageParams;
#^^^^^^ source.ada
#      ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#            ^^^^^^^^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
>      Error_Text    : LSP.Types.LSP_String_Vector;
#^^^^^^ source.ada
#      ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                ^^^^ source.ada meta.declaration.object.ada
#                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                     ^ source.ada
#                      ^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>
>      procedure Create_Context_For_Non_Aggregate (P : Project_Type);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                                ^^ source.ada
#                                                  ^ source.ada meta.declaration.object.ada variable.name.ada
#                                                   ^ source.ada meta.declaration.object.ada
#                                                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                                                     ^ source.ada
#                                                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada
#                                                                   ^ source.ada punctuation.ada
>      procedure Add_Variable (Name : String; Value : GNATCOLL.JSON.JSON_Value);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                            ^^ source.ada
#                              ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                  ^ source.ada meta.declaration.object.ada
#                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                    ^ source.ada
#                                     ^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
#                                            ^ source.ada
#                                             ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                                  ^ source.ada meta.declaration.object.ada
#                                                   ^ source.ada meta.declaration.object.ada punctuation.ada
#                                                    ^ source.ada
#                                                     ^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada entity.name.operator.ada
#                                                              ^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada entity.name.operator.ada
#                                                                   ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                             ^ source.ada
#                                                                              ^ source.ada punctuation.ada
>      procedure On_Error (Text : String);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                        ^^ source.ada
#                          ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                              ^ source.ada meta.declaration.object.ada
#                               ^ source.ada meta.declaration.object.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^ source.ada punctuation.ada
>
>      ------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Add_Variable --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      ------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Add_Variable
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>        (Name : String; Value : GNATCOLL.JSON.JSON_Value)
#^^^^^^^^^ source.ada
#         ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
#                       ^ source.ada
#                        ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                             ^ source.ada meta.declaration.object.ada
#                              ^ source.ada meta.declaration.object.ada punctuation.ada
#                               ^ source.ada
#                                ^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^^ source.ada
>      is
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
>         use type GNATCOLL.JSON.JSON_Value_Type;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         if Value.Kind = GNATCOLL.JSON.JSON_String_Type then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^ source.ada
#                         ^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^^^^ source.ada keyword.other.ada
>            Self.Project_Environment.Change_Environment (Name, Value.Get);
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^^ source.ada
#                                                         ^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada punctuation.ada
#                                                              ^ source.ada
#                                                               ^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada entity.name.operator.ada
#                                                                     ^^^ source.ada entity.name.label.ada
#                                                                        ^ source.ada
#                                                                         ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      end Add_Variable;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>
>      --------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^ source.ada comment.line.ada
>      -- On_Error --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^ source.ada comment.line.ada
>      --------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure On_Error (Text : String) is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                        ^^ source.ada
#                          ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                              ^ source.ada meta.declaration.object.ada
#                               ^ source.ada meta.declaration.object.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^ source.ada entity.name.label.ada
#                                       ^^ source.ada
#                                         ^^ source.ada keyword.other.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         LSP.Types.Append (Error_Text, LSP.Types.To_LSP_String (Text));
#^^^^^^^^^ source.ada
#         ^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
#                                      ^ source.ada
#                                       ^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                              ^^ source.ada
#                                                                ^^^^ source.ada entity.name.label.ada
#                                                                    ^^ source.ada
#                                                                      ^ source.ada punctuation.ada
>      end On_Error;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada punctuation.ada
>
>      --------------------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Create_Context_For_Non_Aggregate --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --------------------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Create_Context_For_Non_Aggregate (P : Project_Type) is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                                ^^ source.ada
#                                                  ^ source.ada meta.declaration.object.ada variable.name.ada
#                                                   ^ source.ada meta.declaration.object.ada
#                                                    ^ source.ada meta.declaration.object.ada punctuation.ada
#                                                     ^ source.ada
#                                                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^^ source.ada
#                                                                    ^^ source.ada keyword.other.ada
>         C : constant Context_Access := new Context (Self.Trace);
#^^^^^^^^^ source.ada
#         ^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^ source.ada entity.name.operator.assignment.ada
#                                       ^ source.ada
#                                        ^^^ source.ada keyword.other.ada
#                                           ^ source.ada
#                                            ^^^^^^^ source.ada entity.name.label.ada
#                                                   ^^ source.ada
#                                                     ^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         C.Initialize;
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>         C.Load_Project (Tree    => Self.Project_Tree,
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^^ source.ada
#                         ^^^^ source.ada entity.name.label.ada
#                             ^^^^ source.ada
#                                 ^^ source.ada entity.name.operator.ada
#                                   ^ source.ada
#                                    ^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada punctuation.ada
>                         Root    => P,
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                         ^^^^ source.ada entity.name.label.ada
#                             ^^^^ source.ada
#                                 ^^ source.ada entity.name.operator.ada
#                                   ^ source.ada
#                                    ^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>                         Charset => Charset);
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada
#                         ^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^^ source.ada entity.name.operator.ada
#                                   ^ source.ada
#                                    ^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^ source.ada punctuation.ada
>         Self.Contexts.Prepend (C);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>      end Create_Context_For_Non_Aggregate;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      --  Unload all the contexts
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Self.Contexts.Cleanup;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>      --  Unload the project tree and the project environment
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Self.Release_Project_Info;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>
>      --  We're loading an actual project
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Self.Implicit_Project_Loaded := False;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.assignment.ada
#                                     ^ source.ada
#                                      ^^^^^ source.ada variable.other.constant.ada
#                                           ^ source.ada punctuation.ada
>
>      --  Now load the new project
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Errors.the_type := LSP.Messages.Warning;
#^^^^^^ source.ada
#      ^^^^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^ source.ada entity.name.operator.assignment.ada
#                        ^ source.ada
#                         ^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>      Initialize (Self.Project_Environment);
#^^^^^^ source.ada
#      ^^^^^^^^^^ source.ada entity.name.label.ada
#                ^^ source.ada
#                  ^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^ source.ada punctuation.ada
>      if not Scenario.Is_Empty then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^^^^ source.ada keyword.other.ada
>         Scenario.Map_JSON_Object (Add_Variable'Access);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^^ source.ada
#                                   ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^^^^^ source.ada storage.modifier.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         Self.Project_Tree := new Project_Tree;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^^^ source.ada keyword.other.ada
#                                 ^ source.ada
#                                  ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada punctuation.ada
>         Self.Project_Tree.Load
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^ source.ada entity.name.label.ada
>           (GPR,
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada punctuation.ada
>            Self.Project_Environment,
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada punctuation.ada
>            Errors => On_Error'Unrestricted_Access);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^ source.ada punctuation.ada
>         for File of Self.Project_Environment.Predefined_Source_Files loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                     ^ source.ada
#                                                                      ^^^^ source.ada keyword.other.ada
>            Self.Project_Predefined_Sources.Include (File);
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^ source.ada entity.name.label.ada
#                                                   ^^ source.ada
#                                                     ^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada
#                                                          ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>         if Self.Project_Tree.Root_Project.Is_Aggregate_Project then
#^^^^^^^^^ source.ada
#         ^^ source.ada keyword.other.ada
#           ^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada
#                                                                ^^^^ source.ada keyword.other.ada
>            declare
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada keyword.other.ada
>               Aggregated : Project_Array_Access :=
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                         ^ source.ada meta.declaration.object.ada
#                          ^ source.ada meta.declaration.object.ada punctuation.ada
#                           ^ source.ada
#                            ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada
#                                                 ^^ source.ada entity.name.operator.assignment.ada
>                 Self.Project_Tree.Root_Project.Aggregated_Projects;
#^^^^^^^^^^^^^^^^^ source.ada
#                 ^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada entity.name.operator.ada
#                                                ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                   ^ source.ada punctuation.ada
>            begin
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada keyword.other.ada
>               for X of Aggregated.all loop
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^ source.ada keyword.other.ada
#                                      ^ source.ada
#                                       ^^^^ source.ada keyword.other.ada
>                  Create_Context_For_Non_Aggregate (X);
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^^ source.ada
#                                                    ^ source.ada entity.name.label.ada
#                                                     ^ source.ada
#                                                      ^ source.ada punctuation.ada
>               end loop;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada keyword.other.ada
#                  ^ source.ada
#                   ^^^^ source.ada keyword.other.ada
#                       ^ source.ada punctuation.ada
>               Unchecked_Free (Aggregated);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^^ source.ada
#                               ^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^ source.ada punctuation.ada
>            end;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>         else
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
>            Create_Context_For_Non_Aggregate (Self.Project_Tree.Root_Project);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada entity.name.operator.ada
#                                                   ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^ source.ada entity.name.operator.ada
#                                                                ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                            ^ source.ada
#                                                                             ^ source.ada punctuation.ada
>         end if;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      exception
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada keyword.other.ada
>         when E : Invalid_Project =>
#^^^^^^^^^ source.ada
#         ^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^ source.ada meta.declaration.object.ada variable.name.ada
#               ^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.ada
>            Self.Release_Project_Info;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>
>            Self.Trace.Trace (E);
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^ source.ada punctuation.ada
>            Errors.the_type := LSP.Messages.Error;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^ source.ada entity.name.operator.assignment.ada
#                              ^ source.ada
#                               ^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
>
>            LSP.Types.Append
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
>              (Errors.message,
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>               LSP.Types.To_LSP_String
#^^^^^^^^^^^^^^^ source.ada
#               ^^^ source.ada entity.name.label.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>                 ("Unable to load project file: " &
#^^^^^^^^^^^^^^^^^^ source.ada
#                  ^ source.ada string.quoted.double.ada
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                                ^ source.ada string.quoted.double.ada
#                                                 ^ source.ada
#                                                  ^ source.ada entity.name.operator.ada
>                  (+GPR.Full_Name.all) & Line_Feed));
#^^^^^^^^^^^^^^^^^^^ source.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^ source.ada keyword.other.ada
#                                     ^^ source.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^ source.ada
#                                         ^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^^ source.ada
#                                                    ^ source.ada punctuation.ada
>
>            --  The project was invalid: fallback on loading the implicit
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  project.
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^ source.ada comment.line.ada
>            Self.Load_Implicit_Project;
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      end;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada punctuation.ada
>
>      --  Report the errors, if any
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      if not Error_Text.Is_Empty then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada
#                                 ^^^^ source.ada keyword.other.ada
>         for Line of Error_Text loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^^^ source.ada keyword.other.ada
>            LSP.Types.Append (Errors.message, Line);
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada punctuation.ada
#                                             ^ source.ada
#                                              ^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>         Self.Server.On_Show_Message (Errors);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^^ source.ada
#                                      ^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  Reindex all open documents immediately after project reload, so
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  that navigation from editors is accurate.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      for Document of Self.Open_Documents loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada keyword.other.ada
#                     ^ source.ada
#                      ^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada
#                                          ^^^^ source.ada keyword.other.ada
>         for Context of Self.Contexts_For_URI (Document.URI) loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada keyword.other.ada
#                       ^ source.ada
#                        ^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^^ source.ada
#                                               ^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^ source.ada entity.name.label.ada
#                                                           ^^ source.ada
#                                                             ^^^^ source.ada keyword.other.ada
>            Context.Index_Document (Document.all);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^^ source.ada
#                                    ^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^ source.ada keyword.other.ada
#                                                ^ source.ada
#                                                 ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      --  Reindex the files from disk in the background after a project reload
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Self.Indexing_Required := True;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada entity.name.operator.assignment.ada
#                               ^ source.ada
#                                ^^^^ source.ada variable.other.constant.ada
#                                    ^ source.ada punctuation.ada
>   end Load_Project;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada punctuation.ada
>
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Get_Unique_Progress_Token --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   function Get_Unique_Progress_Token
#^^^ source.ada
#   ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#           ^ source.ada meta.declaration.subprogram.ada
#            ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self      : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^^^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^ source.ada storage.modifier.ada
#                        ^ source.ada
#                         ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
>      Operation : String := "") return LSP_Number_Or_String
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#               ^ source.ada meta.declaration.object.ada
#                ^ source.ada meta.declaration.object.ada punctuation.ada
#                 ^ source.ada
#                  ^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada
#                         ^^ source.ada entity.name.operator.assignment.ada
#                           ^ source.ada
#                            ^ source.ada string.quoted.double.ada
#                             ^ source.ada string.quoted.double.ada
#                              ^^ source.ada
#                                ^^^^^^ source.ada keyword.other.ada
#                                      ^ source.ada
#                                       ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>
>      Pid : constant String :=
#^^^^^^ source.ada
#      ^^^ source.ada meta.declaration.object.ada variable.name.ada
#         ^ source.ada meta.declaration.object.ada
#          ^ source.ada meta.declaration.object.ada punctuation.ada
#           ^ source.ada
#            ^^^^^^^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^ source.ada entity.name.operator.assignment.ada
>        GNATCOLL.Utils.Image (Pid_To_Integer (Current_Process_Id), 1);
#^^^^^^^^ source.ada
#        ^^^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^ source.ada entity.name.label.ada
#                            ^^ source.ada
#                              ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^^ source.ada
#                                              ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                ^ source.ada
#                                                                 ^ source.ada punctuation.ada
#                                                                  ^ source.ada
#                                                                   ^ source.ada constant.numeric.ada
#                                                                    ^ source.ada
#                                                                     ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Self.Token_Id := Self.Token_Id + 1;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada
#                    ^^ source.ada entity.name.operator.assignment.ada
#                      ^ source.ada
#                       ^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^ source.ada
#                                       ^ source.ada constant.numeric.ada
#                                        ^ source.ada punctuation.ada
>      --  Generate an identifier that has little risk of collision with
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  other language servers, or other occurrences of this server.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  (There is still a very small risk of collision with PID recyclings,
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  but the consequences are acceptable.)
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      return
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
>        (Is_Number => False,
#^^^^^^^^^ source.ada
#         ^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^^^^^ source.ada variable.other.constant.ada
#                           ^ source.ada punctuation.ada
>         String    => To_LSP_String
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^^^^ source.ada
#                   ^^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           ("ada_ls-"
#^^^^^^^^^^^^ source.ada
#            ^ source.ada string.quoted.double.ada
#             ^^^^^^^ source.ada string.quoted.double.ada
#                    ^ source.ada string.quoted.double.ada
>            & Pid & "-" & Operation & "-"
#^^^^^^^^^^^^ source.ada
#            ^ source.ada entity.name.operator.ada
#             ^ source.ada
#              ^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^ source.ada string.quoted.double.ada
#                     ^ source.ada string.quoted.double.ada
#                      ^ source.ada string.quoted.double.ada
#                       ^ source.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^ source.ada string.quoted.double.ada
#                                       ^ source.ada string.quoted.double.ada
#                                        ^ source.ada string.quoted.double.ada
>            & GNATCOLL.Utils.Image (Self.Token_Id, 1)));
#^^^^^^^^^^^^ source.ada
#            ^ source.ada entity.name.operator.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^ source.ada entity.name.label.ada
#                                  ^^ source.ada
#                                    ^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada entity.name.operator.ada
#                                         ^^^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada punctuation.ada
#                                                  ^ source.ada
#                                                   ^ source.ada constant.numeric.ada
#                                                    ^^^ source.ada
#                                                       ^ source.ada punctuation.ada
>   end Get_Unique_Progress_Token;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>
>   -----------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Index_Files --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -----------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Index_Files (Self : access Message_Handler) is
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                        ^^ source.ada
#                          ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                              ^ source.ada meta.declaration.object.ada
#                               ^ source.ada meta.declaration.object.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^ source.ada storage.modifier.ada
#                                       ^ source.ada
#                                        ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^^ source.ada
#                                                         ^^ source.ada keyword.other.ada
>      token : constant LSP.Types.LSP_Number_Or_String
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^ source.ada meta.declaration.object.ada
#            ^ source.ada meta.declaration.object.ada punctuation.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada keyword.other.ada
#                      ^ source.ada
#                       ^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada entity.name.operator.ada
#                                 ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        := Self.Get_Unique_Progress_Token ("indexing");
#^^^^^^^^ source.ada
#        ^^ source.ada entity.name.operator.assignment.ada
#          ^ source.ada
#           ^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^ source.ada string.quoted.double.ada
#                                            ^^^^^^^^ source.ada string.quoted.double.ada
#                                                    ^ source.ada string.quoted.double.ada
#                                                     ^ source.ada
#                                                      ^ source.ada punctuation.ada
>
>      procedure Emit_Progress_Begin;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                   ^ source.ada punctuation.ada
>      procedure Emit_Progress_Report (Percent : Natural);
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                    ^^ source.ada
#                                      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                             ^ source.ada meta.declaration.object.ada
#                                              ^ source.ada meta.declaration.object.ada punctuation.ada
#                                               ^ source.ada
#                                                ^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>      procedure Emit_Progress_End;
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                 ^ source.ada punctuation.ada
>      --  Emit a message to inform that the indexing has begun / is in
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  progress / has finished.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      -------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Emit_Progress_Begin --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Emit_Progress_Begin is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                   ^ source.ada
#                                    ^^ source.ada keyword.other.ada
>         P : LSP.Messages.Progress_Params (LSP.Messages.Progress_Begin);
#^^^^^^^^^ source.ada
#         ^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                      ^ source.ada
#                                                                       ^ source.ada punctuation.ada
>
>         Create_Progress : constant LSP.Messages.Client_Requests
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                        ^ source.ada meta.declaration.object.ada
#                         ^ source.ada meta.declaration.object.ada punctuation.ada
#                          ^ source.ada
#                           ^^^^^^^^ source.ada keyword.other.ada
#                                   ^ source.ada
#                                    ^^^ source.ada entity.name.label.ada
#                                       ^ source.ada entity.name.operator.ada
#                                        ^^^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           .WorkDoneProgressCreate_Request :=
#^^^^^^^^^^^ source.ada
#           ^ source.ada entity.name.operator.ada
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada
#                                           ^^ source.ada entity.name.operator.assignment.ada
>             (params => (token => token), others => <>);
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^^ source.ada
#                         ^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^^ source.ada entity.name.operator.ada
#                                 ^ source.ada
#                                  ^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^ source.ada punctuation.ada
#                                         ^ source.ada
#                                          ^^^^^^ source.ada keyword.other.ada
#                                                ^ source.ada
#                                                 ^^ source.ada entity.name.operator.ada
#                                                   ^ source.ada
#                                                    ^^ source.ada entity.name.operator.ada
#                                                      ^ source.ada
#                                                       ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         Self.Server.On_WorkDoneProgress_Create_Request
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>           (Create_Progress);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^ source.ada punctuation.ada
>         --  FIXME: wait response before sending progress notifications.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  Currenctly, we just send a `window/workDoneProgress/create`
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  request and immediately after this start sending notifications.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  We could do better, send request, wait for client response and
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         --  start progress-report sending only after response.
#^^^^^^^^^ source.ada
#         ^^ source.ada comment.line.ada
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>         P.Begin_Param.token := token;
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada entity.name.operator.assignment.ada
#                               ^ source.ada
#                                ^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada punctuation.ada
>         P.Begin_Param.value.title := +"Indexing";
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.assignment.ada
#                                     ^ source.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^ source.ada string.quoted.double.ada
#                                        ^^^^^^^^ source.ada string.quoted.double.ada
#                                                ^ source.ada string.quoted.double.ada
#                                                 ^ source.ada punctuation.ada
>         P.Begin_Param.value.percentage := (Is_Set => True, Value => 0);
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada entity.name.operator.ada
#                       ^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada
#                                        ^^ source.ada entity.name.operator.assignment.ada
#                                          ^^ source.ada
#                                            ^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^^ source.ada entity.name.operator.ada
#                                                     ^ source.ada
#                                                      ^^^^ source.ada variable.other.constant.ada
#                                                          ^ source.ada punctuation.ada
#                                                           ^ source.ada
#                                                            ^^^^^ source.ada entity.name.label.ada
#                                                                 ^ source.ada
#                                                                  ^^ source.ada entity.name.operator.ada
#                                                                    ^ source.ada
#                                                                     ^ source.ada constant.numeric.ada
#                                                                      ^ source.ada
#                                                                       ^ source.ada punctuation.ada
>         Self.Server.On_Progress (P);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^ source.ada punctuation.ada
>      end Emit_Progress_Begin;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada punctuation.ada
>
>      --------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Emit_Progress_Report --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --------------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Emit_Progress_Report (Percent : Natural) is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                    ^^ source.ada
#                                      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                                             ^ source.ada meta.declaration.object.ada
#                                              ^ source.ada meta.declaration.object.ada punctuation.ada
#                                               ^ source.ada
#                                                ^^^^^^^ source.ada entity.name.label.ada
#                                                       ^^ source.ada
#                                                         ^^ source.ada keyword.other.ada
>         P : LSP.Messages.Progress_Params (LSP.Messages.Progress_Report);
#^^^^^^^^^ source.ada
#         ^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                       ^ source.ada
#                                                                        ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         P.Report_Param.token := token;
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada
#                              ^^ source.ada entity.name.operator.assignment.ada
#                                ^ source.ada
#                                 ^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>         P.Report_Param.value.percentage :=
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada entity.name.operator.ada
#                        ^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^ source.ada entity.name.operator.assignment.ada
>           (Is_Set => True, Value => LSP_Number (Percent));
#^^^^^^^^^^^^ source.ada
#            ^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada
#                   ^^ source.ada entity.name.operator.ada
#                     ^ source.ada
#                      ^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada punctuation.ada
#                           ^ source.ada
#                            ^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.ada
#                                    ^ source.ada
#                                     ^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^^ source.ada
#                                                 ^^^^^^^ source.ada entity.name.label.ada
#                                                        ^^ source.ada
#                                                          ^ source.ada punctuation.ada
>         Self.Server.On_Progress (P);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^ source.ada punctuation.ada
>      end Emit_Progress_Report;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada punctuation.ada
>
>      -----------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -- Emit_Progress_End --
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      -----------------------
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>      procedure Emit_Progress_End is
#^^^^^^ source.ada
#      ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#               ^ source.ada meta.declaration.subprogram.ada
#                ^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
#                                 ^ source.ada
#                                  ^^ source.ada keyword.other.ada
>         P : LSP.Messages.Progress_Params (LSP.Messages.Progress_End);
#^^^^^^^^^ source.ada
#         ^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                         ^^ source.ada
#                                           ^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada entity.name.operator.ada
#                                                        ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                    ^ source.ada
#                                                                     ^ source.ada punctuation.ada
>      begin
#^^^^^^ source.ada
#      ^^^^^ source.ada keyword.other.ada
>         P.End_Param.token := token;
#^^^^^^^^^ source.ada
#         ^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.assignment.ada
#                             ^ source.ada
#                              ^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>         Self.Server.On_Progress (P);
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^^ source.ada
#                                  ^ source.ada entity.name.label.ada
#                                   ^ source.ada
#                                    ^ source.ada punctuation.ada
>      end Emit_Progress_End;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada punctuation.ada
>
>      Index           : Natural := 1;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^^^^^^^^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.assignment.ada
#                                  ^ source.ada
#                                   ^ source.ada constant.numeric.ada
#                                    ^ source.ada punctuation.ada
>      Total           : constant Natural := Self.Contexts.Total_Source_Files;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^^^^^^^^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^^^^^^ source.ada keyword.other.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^ source.ada entity.name.operator.assignment.ada
#                                           ^ source.ada
#                                            ^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^^ source.ada entity.name.label.ada
#                                                         ^ source.ada entity.name.operator.ada
#                                                          ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                            ^ source.ada punctuation.ada
>      Last_Percent    : Natural := 0;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                  ^^^^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.assignment.ada
#                                  ^ source.ada
#                                   ^ source.ada constant.numeric.ada
#                                    ^ source.ada punctuation.ada
>      Current_Percent : Natural := 0;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#                     ^ source.ada meta.declaration.object.ada
#                      ^ source.ada meta.declaration.object.ada punctuation.ada
#                       ^ source.ada
#                        ^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^ source.ada entity.name.operator.assignment.ada
#                                  ^ source.ada
#                                   ^ source.ada constant.numeric.ada
#                                    ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      --  Prevent work if the indexing has been explicitly disabled or
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  if we have other messages to process.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      if not Self.Indexing_Enabled or Self.Server.Has_Pending_Work then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^ source.ada entity.name.operator.ada
#            ^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^^ source.ada entity.name.operator.ada
#                                     ^ source.ada
#                                      ^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^ source.ada entity.name.label.ada
#                                                 ^ source.ada entity.name.operator.ada
#                                                  ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                  ^ source.ada
#                                                                   ^^^^ source.ada keyword.other.ada
>         return;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Emit_Progress_Begin;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>
>      for Context of Self.Contexts.Each_Context loop
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada keyword.other.ada
#                    ^ source.ada
#                     ^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                               ^ source.ada
#                                                ^^^^ source.ada keyword.other.ada
>         for F of Context.List_Files loop
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada keyword.other.ada
#                 ^ source.ada
#                  ^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^^^ source.ada keyword.other.ada
>            Current_Percent := (Index * 100) / Total;
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^ source.ada entity.name.operator.assignment.ada
#                              ^^ source.ada
#                                ^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^ source.ada
#                                        ^^^ source.ada constant.numeric.ada
#                                           ^^ source.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^ source.ada
#                                               ^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada punctuation.ada
>            --  If the value of the indexing increased by at least one percent,
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  emit one progress report.
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            if Current_Percent > Last_Percent then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^ source.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^ source.ada
#                                 ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada
#                                              ^^^^ source.ada keyword.other.ada
>               Emit_Progress_Report (Current_Percent);
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                    ^ source.ada
#                                                     ^ source.ada punctuation.ada
>               Last_Percent := Current_Percent;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada
#                            ^^ source.ada entity.name.operator.assignment.ada
#                              ^ source.ada
#                               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>
>            Context.Index_File (F);
#^^^^^^^^^^^^ source.ada
#            ^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^ source.ada entity.name.label.ada
#                              ^^ source.ada
#                                ^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^ source.ada punctuation.ada
>            Index := Index + 1;
#^^^^^^^^^^^^ source.ada
#            ^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.assignment.ada
#                    ^ source.ada
#                     ^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^ source.ada constant.numeric.ada
#                              ^ source.ada punctuation.ada
>
>            --  Check whether another request is pending. If so, pause the
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  indexing; it will be resumed later as part of After_Request.
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            --  if Self.Server.Input_Queue_Length > 0 then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada comment.line.ada
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>            if Self.Server.Has_Pending_Work then
#^^^^^^^^^^^^ source.ada
#            ^^ source.ada keyword.other.ada
#              ^ source.ada
#               ^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada entity.name.operator.ada
#                           ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada
#                                            ^^^^ source.ada keyword.other.ada
>               Emit_Progress_End;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>               return;
#^^^^^^^^^^^^^^^ source.ada
#               ^^^^^^ source.ada keyword.other.ada
#                     ^ source.ada punctuation.ada
>            end if;
#^^^^^^^^^^^^ source.ada
#            ^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^ source.ada keyword.other.ada
#                  ^ source.ada punctuation.ada
>         end loop;
#^^^^^^^^^ source.ada
#         ^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^ source.ada keyword.other.ada
#                 ^ source.ada punctuation.ada
>      end loop;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^^^ source.ada keyword.other.ada
#              ^ source.ada punctuation.ada
>
>      Emit_Progress_End;
#^^^^^^ source.ada
#      ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada punctuation.ada
>      Self.Indexing_Required := False;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada
#                             ^^ source.ada entity.name.operator.assignment.ada
#                               ^ source.ada
#                                ^^^^^ source.ada variable.other.constant.ada
#                                     ^ source.ada punctuation.ada
>   end Index_Files;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^ source.ada entity.name.label.ada
#                  ^ source.ada punctuation.ada
>
>   ------------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Workspace_Execute_Command_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ------------------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Workspace_Execute_Command_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Workspace_Execute_Command_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                              ^^ source.ada
>      return LSP.Messages.Server_Responses.ExecuteCommand_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      Error    : LSP.Errors.Optional_ResponseError;
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^ source.ada entity.name.label.ada
#                           ^ source.ada entity.name.operator.ada
#                            ^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada punctuation.ada
>      Params   : LSP.Messages.ExecuteCommandParams renames
#^^^^^^ source.ada
#      ^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#            ^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                  ^ source.ada
#                                                   ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.ExecuteCommand_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => True);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      if Params.Is_Unknown or else Params.Custom.Is_Null then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^^^^^ source.ada entity.name.label.ada
#                          ^ source.ada
#                           ^^ source.ada entity.name.operator.ada
#                             ^ source.ada
#                              ^^^^ source.ada keyword.other.ada
#                                  ^ source.ada
#                                   ^^^^^^ source.ada entity.name.label.ada
#                                         ^ source.ada entity.name.operator.ada
#                                          ^^^^^^ source.ada entity.name.label.ada
#                                                ^ source.ada entity.name.operator.ada
#                                                 ^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^^^ source.ada keyword.other.ada
>         Response.error :=
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.assignment.ada
>           (True,
#^^^^^^^^^^^^ source.ada
#            ^^^^ source.ada variable.other.constant.ada
#                ^ source.ada punctuation.ada
>            (code => LSP.Errors.InternalError,
#^^^^^^^^^^^^^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada entity.name.operator.ada
#                                ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada punctuation.ada
>             message => +"Not implemented",
#^^^^^^^^^^^^^ source.ada
#             ^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^ source.ada string.quoted.double.ada
#                          ^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                         ^ source.ada string.quoted.double.ada
#                                          ^ source.ada punctuation.ada
>             data    => <>));
#^^^^^^^^^^^^^ source.ada
#             ^^^^ source.ada entity.name.label.ada
#                 ^^^^ source.ada
#                     ^^ source.ada entity.name.operator.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.ada
#                          ^^ source.ada
#                            ^ source.ada punctuation.ada
>         return Response;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      Params.Custom.Unchecked_Get.Execute
#^^^^^^ source.ada
#      ^^^^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^ source.ada entity.name.label.ada
>        (Handler => Self,
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada entity.name.label.ada
#                ^ source.ada
#                 ^^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>         Client  => Self.Server,
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^^ source.ada
#                 ^^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^^ source.ada entity.name.label.ada
#                        ^ source.ada entity.name.operator.ada
#                         ^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
>         Error   => Error);
#^^^^^^^^^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^^^ source.ada
#                 ^^ source.ada entity.name.operator.ada
#                   ^ source.ada
#                    ^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>
>      if Error.Is_Set then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada
#                      ^^^^ source.ada keyword.other.ada
>         Response.error := Error;
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^ source.ada entity.name.label.ada
#                       ^ source.ada
#                        ^^ source.ada entity.name.operator.assignment.ada
#                          ^ source.ada
#                           ^^^^^ source.ada entity.name.label.ada
#                                ^ source.ada punctuation.ada
>         return Response;
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada keyword.other.ada
#               ^ source.ada
#                ^^^^^^^^ source.ada entity.name.label.ada
#                        ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>
>      --  No particular response in case of success.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      return (Is_Error => False,
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^^ source.ada
#              ^^^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^^^^ source.ada variable.other.constant.ada
#                               ^ source.ada punctuation.ada
>              Error    => (Is_Set => False),
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^ source.ada entity.name.label.ada
#                   ^^^^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^^ source.ada
#                           ^^^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada
#                                  ^^ source.ada entity.name.operator.ada
#                                    ^ source.ada
#                                     ^^^^^ source.ada variable.other.constant.ada
#                                          ^ source.ada
#                                           ^ source.ada punctuation.ada
>              others   => <>);
#^^^^^^^^^^^^^^ source.ada
#              ^^^^^^ source.ada keyword.other.ada
#                    ^^^ source.ada
#                       ^^ source.ada entity.name.operator.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^ source.ada punctuation.ada
>   end On_Workspace_Execute_Command_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
>
>   ----------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Workspace_Symbols_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ----------------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Workspace_Symbols_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Workspace_Symbols_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                                      ^^ source.ada
>      return LSP.Messages.Server_Responses.Symbol_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      pragma Unreferenced (Self, Request);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.control.ada
#            ^ source.ada
#             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.Symbol_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => True);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^ source.ada variable.other.constant.ada
#                         ^ source.ada
#                          ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Response.error :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada
#                     ^^ source.ada entity.name.operator.assignment.ada
>        (True,
#^^^^^^^^^ source.ada
#         ^^^^ source.ada variable.other.constant.ada
#             ^ source.ada punctuation.ada
>         (code => LSP.Errors.InternalError,
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada punctuation.ada
>          message => +"Not implemented",
#^^^^^^^^^^ source.ada
#          ^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^ source.ada string.quoted.double.ada
#                       ^^^^^^^^^^^^^^^ source.ada string.quoted.double.ada
#                                      ^ source.ada string.quoted.double.ada
#                                       ^ source.ada punctuation.ada
>          data => <>));
#^^^^^^^^^^ source.ada
#          ^^^^ source.ada entity.name.label.ada
#              ^ source.ada
#               ^^ source.ada entity.name.operator.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^^ source.ada
#                      ^ source.ada punctuation.ada
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Workspace_Symbols_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- On_Completion_Request --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ---------------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding function On_Completion_Request
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                      ^ source.ada meta.declaration.subprogram.ada
#                       ^^^^^^^^^^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Request : LSP.Messages.Server_Requests.Completion_Request)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                               ^^ source.ada
>      return LSP.Messages.Server_Responses.Completion_Response
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                          ^ source.ada entity.name.operator.ada
#                                           ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      --  We're completing only based on one context, ie one project
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  tree: this seems reasonable. One further refinement could
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  be to return only results that are available for all
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      --  project contexts.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Value    : LSP.Messages.TextDocumentPositionParams renames
#^^^^^^ source.ada
#      ^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#           ^^^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                        ^ source.ada
#                                                         ^^^^^^^ source.ada keyword.other.ada
>        Request.params;
#^^^^^^^^ source.ada
#        ^^^^^^^ source.ada entity.name.label.ada
#               ^ source.ada entity.name.operator.ada
#                ^^^^^^ source.ada entity.name.label.ada
#                      ^ source.ada punctuation.ada
>      Document : constant LSP.Ada_Documents.Document_Access :=
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada entity.name.operator.ada
#                                            ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                           ^ source.ada
#                                                            ^^ source.ada entity.name.operator.assignment.ada
>        Get_Open_Document (Self, Value.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^ source.ada entity.name.label.ada
#                               ^ source.ada punctuation.ada
#                                ^ source.ada
#                                 ^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada entity.name.operator.ada
#                                       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                   ^ source.ada entity.name.operator.ada
#                                                    ^^^ source.ada entity.name.label.ada
#                                                       ^ source.ada
#                                                        ^ source.ada punctuation.ada
>      Context  : constant Context_Access :=
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^^^^^^ source.ada keyword.other.ada
#                         ^ source.ada
#                          ^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada
#                                         ^^ source.ada entity.name.operator.assignment.ada
>        Self.Contexts.Get_Best_Context (Value.textDocument.uri);
#^^^^^^^^ source.ada
#        ^^^^ source.ada entity.name.label.ada
#            ^ source.ada entity.name.operator.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada entity.name.operator.ada
#                      ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^^ source.ada
#                                        ^^^^^ source.ada entity.name.label.ada
#                                             ^ source.ada entity.name.operator.ada
#                                              ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                          ^ source.ada entity.name.operator.ada
#                                                           ^^^ source.ada entity.name.label.ada
#                                                              ^ source.ada
#                                                               ^ source.ada punctuation.ada
>      Response : LSP.Messages.Server_Responses.Completion_Response
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#              ^ source.ada meta.declaration.object.ada
#               ^ source.ada meta.declaration.object.ada punctuation.ada
#                ^ source.ada
#                 ^^^ source.ada entity.name.label.ada
#                    ^ source.ada entity.name.operator.ada
#                     ^^^^^^^^ source.ada entity.name.label.ada
#                             ^ source.ada entity.name.operator.ada
#                              ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                              ^ source.ada entity.name.operator.ada
#                                               ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Is_Error => False);
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada
#                  ^^ source.ada entity.name.operator.ada
#                    ^ source.ada
#                     ^^^^^ source.ada variable.other.constant.ada
#                          ^ source.ada
#                           ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Document.Get_Completions_At
#^^^^^^ source.ada
#      ^^^^^^^^ source.ada entity.name.label.ada
#              ^ source.ada entity.name.operator.ada
#               ^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
>        (Context          => Context.all,
#^^^^^^^^^ source.ada
#         ^^^^^^^ source.ada entity.name.label.ada
#                ^^^^^^^^^^ source.ada
#                          ^^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada entity.name.operator.ada
#                                     ^^^ source.ada keyword.other.ada
#                                        ^ source.ada punctuation.ada
>         Position         => Value.position,
#^^^^^^^^^ source.ada
#         ^^^^^^^^ source.ada entity.name.label.ada
#                 ^^^^^^^^^ source.ada
#                          ^^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada entity.name.operator.ada
#                                   ^^^^^^^^ source.ada entity.name.label.ada
#                                           ^ source.ada punctuation.ada
>         Snippets_Enabled => Self.Completion_Snippets_Enabled,
#^^^^^^^^^ source.ada
#         ^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada
#                          ^^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^^^^ source.ada entity.name.label.ada
#                                 ^ source.ada entity.name.operator.ada
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                             ^ source.ada punctuation.ada
>         Result           => Response.result);
#^^^^^^^^^ source.ada
#         ^^^^^^ source.ada entity.name.label.ada
#               ^^^^^^^^^^^ source.ada
#                          ^^ source.ada entity.name.operator.ada
#                            ^ source.ada
#                             ^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada entity.name.operator.ada
#                                      ^^^^^^ source.ada entity.name.label.ada
#                                            ^ source.ada
#                                             ^ source.ada punctuation.ada
>
>      return Response;
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.other.ada
#            ^ source.ada
#             ^^^^^^^^ source.ada entity.name.label.ada
#                     ^ source.ada punctuation.ada
>   end On_Completion_Request;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada punctuation.ada
>
>   ------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Handle_Error --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding procedure Handle_Error
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                       ^ source.ada meta.declaration.subprogram.ada
#                        ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self : access Message_Handler) is
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^ source.ada storage.modifier.ada
#                   ^ source.ada
#                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^^ source.ada
#                                     ^^ source.ada keyword.other.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      --  Reload the contexts in case of unexpected errors.
#^^^^^^ source.ada
#      ^^ source.ada comment.line.ada
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      Self.Contexts.Reload_All_Contexts;
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                       ^ source.ada punctuation.ada
>   end Handle_Error;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada punctuation.ada
>
>   ------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Show_Message --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ------------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   procedure Show_Message
#^^^ source.ada
#   ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#            ^ source.ada meta.declaration.subprogram.ada
#             ^^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^ source.ada storage.modifier.ada
#                   ^ source.ada
#                    ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                   ^ source.ada punctuation.ada
>      Text : String;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada punctuation.ada
>      Mode : LSP.Messages.MessageType := LSP.Messages.Error) is
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^ source.ada meta.declaration.object.ada
#           ^ source.ada meta.declaration.object.ada punctuation.ada
#            ^ source.ada
#             ^^^ source.ada entity.name.label.ada
#                ^ source.ada entity.name.operator.ada
#                 ^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada entity.name.operator.ada
#                          ^^^^^^^^^^^ source.ada entity.name.label.ada
#                                     ^ source.ada
#                                      ^^ source.ada entity.name.operator.assignment.ada
#                                        ^ source.ada
#                                         ^^^ source.ada entity.name.label.ada
#                                            ^ source.ada entity.name.operator.ada
#                                             ^^^^^^^^ source.ada entity.name.label.ada
#                                                     ^ source.ada entity.name.operator.ada
#                                                      ^^^^^ source.ada entity.name.label.ada
#                                                           ^^ source.ada
#                                                             ^^ source.ada keyword.other.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>      Self.Server.On_Show_Message ((Mode, To_LSP_String (Text)));
#^^^^^^ source.ada
#      ^^^^ source.ada entity.name.label.ada
#          ^ source.ada entity.name.operator.ada
#           ^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada entity.name.operator.ada
#                  ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                 ^^^ source.ada
#                                    ^^^^ source.ada entity.name.label.ada
#                                        ^ source.ada punctuation.ada
#                                         ^ source.ada
#                                          ^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                                       ^^ source.ada
#                                                         ^^^^ source.ada entity.name.label.ada
#                                                             ^^^ source.ada
#                                                                ^ source.ada punctuation.ada
>   end Show_Message;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                   ^ source.ada punctuation.ada
>
>   -----------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- Before_Work --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -----------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding procedure Before_Work
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                       ^ source.ada meta.declaration.subprogram.ada
#                        ^^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Message : LSP.Messages.Message'Class) is null;
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
#                                            ^^ source.ada keyword.other.ada
#                                              ^ source.ada
#                                               ^^^^ source.ada variable.other.constant.ada
#                                                   ^ source.ada punctuation.ada
>
>   ----------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^ source.ada comment.line.ada
>   -- After_Work --
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^ source.ada comment.line.ada
>   ----------------
#^^^ source.ada
#   ^^ source.ada comment.line.ada
#     ^^^^^^^^^^^^^^ source.ada comment.line.ada
>
>   overriding procedure After_Work
#^^^ source.ada
#   ^^^^^^^^^^ source.ada keyword.other.ada
#             ^ source.ada
#              ^^^^^^^^^ source.ada meta.declaration.subprogram.ada keyword.other.ada
#                       ^ source.ada meta.declaration.subprogram.ada
#                        ^^^^^^^^^^ source.ada meta.declaration.subprogram.ada entity.name.function.ada
>     (Self    : access Message_Handler;
#^^^^^^ source.ada
#      ^^^^ source.ada meta.declaration.object.ada variable.name.ada
#          ^^^^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^^^^ source.ada storage.modifier.ada
#                      ^ source.ada
#                       ^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                                      ^ source.ada punctuation.ada
>      Message : LSP.Messages.Message'Class)
#^^^^^^ source.ada
#      ^^^^^^^ source.ada meta.declaration.object.ada variable.name.ada
#             ^ source.ada meta.declaration.object.ada
#              ^ source.ada meta.declaration.object.ada punctuation.ada
#               ^ source.ada
#                ^^^ source.ada entity.name.label.ada
#                   ^ source.ada entity.name.operator.ada
#                    ^^^^^^^^ source.ada entity.name.label.ada
#                            ^ source.ada entity.name.operator.ada
#                             ^^^^^^^ source.ada entity.name.label.ada
#                                    ^ source.ada
#                                     ^^^^^ source.ada entity.name.label.ada
#                                          ^^ source.ada
>   is
#^^^ source.ada
#   ^^ source.ada keyword.other.ada
>      pragma Unreferenced (Message);
#^^^^^^ source.ada
#      ^^^^^^ source.ada keyword.control.ada
#            ^ source.ada
#             ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^^ source.ada
#                           ^^^^^^^ source.ada entity.name.label.ada
#                                  ^ source.ada
#                                   ^ source.ada punctuation.ada
>   begin
#^^^ source.ada
#   ^^^^^ source.ada keyword.other.ada
>     --  We have finished processing a request or notification:
#^^^^^ source.ada
#     ^^ source.ada comment.line.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>     --  if it happens that indexing is required, do it now.
#^^^^^ source.ada
#     ^^ source.ada comment.line.ada
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ada comment.line.ada
>      if Self.Indexing_Required then
#^^^^^^ source.ada
#      ^^ source.ada keyword.other.ada
#        ^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^^^^^^^ source.ada entity.name.label.ada
#                               ^ source.ada
#                                ^^^^ source.ada keyword.other.ada
>         Self.Index_Files;
#^^^^^^^^^ source.ada
#         ^^^^ source.ada entity.name.label.ada
#             ^ source.ada entity.name.operator.ada
#              ^^^^^^^^^^^ source.ada entity.name.label.ada
#                         ^ source.ada punctuation.ada
>      end if;
#^^^^^^ source.ada
#      ^^^ source.ada keyword.other.ada
#         ^ source.ada
#          ^^ source.ada keyword.other.ada
#            ^ source.ada punctuation.ada
>   end After_Work;
#^^^ source.ada
#   ^^^ source.ada keyword.other.ada
#      ^ source.ada
#       ^^^^^^^^^^ source.ada entity.name.label.ada
#                 ^ source.ada punctuation.ada
>
>end LSP.Ada_Handlers;
#^^^ source.ada keyword.other.ada
#   ^ source.ada
#    ^^^ source.ada entity.name.label.ada
#       ^ source.ada entity.name.operator.ada
#        ^^^^^^^^^^^^ source.ada entity.name.label.ada
#                    ^ source.ada punctuation.ada
>