{
    "name": "ada",
    "displayName": "Ada & SPARK",
    "description": "Ada & SPARK IntelliSense, code browsing, debugging and more.",
    "version": "24.0.999",
    "publisher": "AdaCore",
    "license": "GPL-3.0",
    "engines": {
        "vscode": "^1.88.0"
    },
    "categories": [
        "Programming Languages",
        "Extension Packs"
    ],
    "extensionPack": [
        "ms-vscode.cpptools",
        "ms-sarifvscode.sarif-viewer",
        "ms-vscode.live-server"
    ],
    "activationEvents": [
        "workspaceContains:*.gpr",
        "workspaceContains:*/*.gpr",
        "workspaceContains:*.ad[bs]",
        "workspaceContains:*/*.ad[bs]",
        "workspaceContains:alire.toml",
        "workspaceContains:testsuite.py",
        "workspaceContains:*/testsuite.py",
        "onDebugDynamicConfigurations:ada"
    ],
    "main": "./out/src/extension",
    "icon": "icons/ada.png",
    "bugs": "https://github.com/AdaCore/ada_language_server/issues",
    "repository": {
        "type": "git",
        "url": "https://github.com/AdaCore/ada_language_server.git"
    },
    "os": [
        "linux",
        "win32",
        "darwin"
    ],
    "cpu": [
        "arm64",
        "x64"
    ],
    "keywords": [
        "Ada",
        "ada",
        "adb",
        "adc",
        "ads",
        "gpr"
    ],
    "contributes": {
        "languages": [
            {
                "id": "ada",
                "aliases": [
                    "Ada",
                    "ada"
                ],
                "extensions": [
                    ".ada",
                    ".adb",
                    ".adc",
                    ".ads"
                ],
                "configuration": "./language-configuration.json"
            },
            {
                "id": "ali",
                "aliases": [
                    "ALI",
                    "Ali",
                    "ali",
                    "Ada Library Information"
                ],
                "extensions": [
                    ".ali"
                ]
            },
            {
                "id": "gpr",
                "aliases": [
                    "GNAT Project",
                    "gpr"
                ],
                "extensions": [
                    ".gpr"
                ],
                "configuration": "./gpr-language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "ada",
                "scopeName": "source.ada",
                "path": "./syntaxes/ada.tmLanguage.json"
            },
            {
                "language": "ali",
                "scopeName": "source.ali",
                "path": "./syntaxes/ali.tmLanguage.json"
            },
            {
                "language": "gpr",
                "scopeName": "source.gpr",
                "path": "./syntaxes/gpr.tmLanguage.json"
            }
        ],
        "semanticTokenScopes": [
            {
                "language": "ada",
                "scopes": {
                    "namespace": [
                        "entity.name.label.ada"
                    ],
                    "type": [
                        "entity.name.type.ada"
                    ],
                    "class": [
                        "entity.name.type.class.ada"
                    ],
                    "enum": [
                        "entity.name.type.enum.ada"
                    ],
                    "interface": [
                        "entity.name.type.interface.ada"
                    ],
                    "struct": [
                        "entity.name.type.struct.ada"
                    ],
                    "typeParameter": [
                        "variable.other.constant.parameter.ada"
                    ],
                    "parameter": [
                        "entity.name.variable.parameter.ada"
                    ],
                    "variable": [
                        "entity.name.variable.ada"
                    ],
                    "property": [
                        "entity.name.variable.property.ada"
                    ],
                    "enumMember": [
                        "variable.other.enummember.ada"
                    ],
                    "function": [
                        "entity.name.function.ada"
                    ],
                    "keyword": [
                        "keyword.other.ada"
                    ],
                    "modifier": [
                        "storage.modifier.ada"
                    ],
                    "comment": [
                        "comment.line.ada"
                    ],
                    "string": [
                        "string.quoted.double.ada"
                    ],
                    "number": [
                        "constant.numeric.ada"
                    ],
                    "operator": [
                        "entity.name.operator.ada"
                    ],
                    "parameter.readonly": [
                        "variable.other.constant.parameter.ada"
                    ],
                    "variable.readonly": [
                        "variable.other.constant.ada"
                    ],
                    "property.readonly": [
                        "variable.other.constant.property.ada"
                    ],
                    "namespace.deprecated": [
                        "markup.strikethrough.namespace.ada"
                    ],
                    "type.deprecated": [
                        "markup.strikethrough.type.ada"
                    ],
                    "class.deprecated": [
                        "markup.strikethrough.class.ada"
                    ],
                    "enum.deprecated": [
                        "markup.strikethrough.enum.ada"
                    ],
                    "interface.deprecated": [
                        "markup.strikethrough.interface.ada"
                    ],
                    "struct.deprecated": [
                        "markup.strikethrough.struct.ada"
                    ],
                    "variable.deprecated": [
                        "markup.strikethrough.variable.ada"
                    ],
                    "property.deprecated": [
                        "markup.strikethrough.property.ada"
                    ],
                    "function.deprecated": [
                        "markup.strikethrough.function.ada"
                    ],
                    "type.abstract": [
                        "entity.name.type.abstract.ada"
                    ],
                    "class.abstract": [
                        "entity.name.type.class.abstract.ada"
                    ],
                    "function.abstract": [
                        "entity.name.function.abstract.ada"
                    ],
                    "operator.abstract": [
                        "entity.name.operator.abstract.ada"
                    ],
                    "parameter.modification": [
                        "variable.write.parameter.ada"
                    ],
                    "variable.modification": [
                        "variable.write.ada"
                    ],
                    "property.modification": [
                        "variable.write.property.ada"
                    ],
                    "namespace.defaultLibrary": [
                        "support.namespace.ada"
                    ],
                    "type.defaultLibrary": [
                        "support.type.ada"
                    ],
                    "class.defaultLibrary": [
                        "support.class.ada"
                    ],
                    "enum.defaultLibrary": [
                        "support.type.enum.ada"
                    ],
                    "interface.defaultLibrary": [
                        "support.type.interface.ada"
                    ],
                    "struct.defaultLibrary": [
                        "support.type.struct.ada"
                    ],
                    "typeParameter.defaultLibrary": [
                        "support.variable.discriminant.ada"
                    ],
                    "parameter.defaultLibrary": [
                        "support.variable.parameter.ada"
                    ],
                    "variable.defaultLibrary": [
                        "support.variable.ada"
                    ],
                    "property.defaultLibrary": [
                        "support.variable.property.ada"
                    ],
                    "enumMember.defaultLibrary": [
                        "support.constant.enummember.ada"
                    ],
                    "function.defaultLibrary": [
                        "support.function.ada"
                    ],
                    "operator.defaultLibrary": [
                        "support.function.operator.ada"
                    ]
                }
            }
        ],
        "snippets": [
            {
                "language": "ada",
                "path": "./ada-snippets.json"
            },
            {
                "language": "gpr",
                "path": "./gpr-snippets.json"
            }
        ],
        "configuration": [
            {
                "type": "object",
                "title": "Project",
                "order": 0,
                "properties": {
                    "ada.projectFile": {
                        "scope": "window",
                        "type": "string",
                        "default": null,
                        "markdownDescription": "GPR project file (*.gpr) for this workspace.\n\nIt is recommended to set this to a relative path starting at the root of the workspace.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists.",
                        "order": 0
                    },
                    "ada.gprConfigurationFile": {
                        "scope": "window",
                        "type": "string",
                        "default": null,
                        "markdownDescription": "GPR configuration file (*.cgpr) for this workspace.\n\nIt is recommended to set this to a relative path starting at the root of the workspace.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists.",
                        "order": 0
                    },
                    "ada.scenarioVariables": {
                        "scope": "window",
                        "type": "object",
                        "default": null,
                        "markdownDescription": "Scenario variables to apply to the GPR project file.\n\nThis value should be provided as an object where the property names are GPR scenario variables and the values are strings.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists.",
                        "patternProperties": {
                            ".*": {
                                "type": "string"
                            }
                        },
                        "order": 1
                    },
                    "ada.defaultCharset": {
                        "scope": "window",
                        "type": "string",
                        "default": null,
                        "markdownDescription": "The character set that the Ada Language Server should use when reading files from disk.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists."
                    },
                    "ada.relocateBuildTree": {
                        "scope": "window",
                        "type": "string",
                        "default": null,
                        "markdownDescription": "The path to a directory used for out-of-tree builds. This feature is related to the [--relocate-build-tree GPRbuild command line switch](https://docs.adacore.com/gprbuild-docs/html/gprbuild_ug/building_with_gprbuild.html#switches).\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists."
                    },
                    "ada.rootDir": {
                        "scope": "window",
                        "type": "string",
                        "default": null,
                        "markdownDescription": "This setting must be used in conjunction with the `relocateBuildTree` setting.\n\nIt specifies the root directory for artifact relocation. It corresponds to the [--root-dir GPRbuild command line switch](https://docs.adacore.com/gprbuild-docs/html/gprbuild_ug/building_with_gprbuild.html#switches).\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists."
                    }
                }
            },
            {
                "type": "object",
                "title": "Formatting",
                "order": 1,
                "properties": {
                    "ada.useGnatformat": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Enable GNATformat as the formatting provider for Ada source files.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.onTypeFormatting.indentOnly": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "If the VS Code `editor.formatOnType` setting is enabled, the Ada Language Server will format Ada code while it is being typed in the editor, in particular when a new line is typed.\n\nThis setting controls whether formatting should only perform the indentation of the new line (true) or also format the previous line (false).\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    }
                }
            },
            {
                "type": "object",
                "title": "UI",
                "order": 2,
                "properties": {
                    "ada.showNotificationsOnErrors": {
                        "markdownDescription": "Whether to show error notifications in VS Code for failing LSP requests.",
                        "default": false,
                        "type": "boolean"
                    },
                    "ada.documentationStyle": {
                        "scope": "window",
                        "enum": [
                            "gnat",
                            "leading",
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: \"gnat\")"
                        ],
                        "markdownEnumDescriptions": [
                            "Default style, based on GNAT coding standard with some enhancements.",
                            "Documentation for the entities extracted from the comments before the entity declaration.",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `\"gnat\"`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls the primary documentation style of entities.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `\"gnat\"`."
                    },
                    "ada.displayMethodAncestryOnNavigation": {
                        "scope": "window",
                        "enum": [
                            "never",
                            "usage_and_abstract_only",
                            "definition_only",
                            "always",
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            null,
                            null,
                            "Provided by .als.json (default: \"usage_and_abstract_only\")"
                        ],
                        "markdownEnumDescriptions": [
                            "Never list overriding and/or overridden subprograms.",
                            "List overriding and/or overridden subprograms on dispatching calls and on abstract subprogram declarations.",
                            "List overriding and/or overridden subprograms on declarations only.",
                            "Always list overriding and/or overridden subprograms when possible.",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `\"usage_and_abstract_only\"`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls the policy for displaying overriding and overridden subprograms on navigation requests such as 'Go To Definition' or 'Go To Implementations'.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `\"usage_and_abstract_only\"`."
                    },
                    "ada.foldComments": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls whether comments should be folded like code blocks.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.namedNotationThreshold": {
                        "scope": "window",
                        "type": "integer",
                        "default": 3,
                        "markdownDescription": "Defines the number of parameters/components beyond which named notation is used for completion snippets.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `3`."
                    },
                    "ada.useCompletionSnippets": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Enable snippets in completion results (e.g. subprogram calls).\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.insertWithClauses": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Enable insertion of missing with-clauses when accepting completion for invisible symbols.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.renameInComments": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: false)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `false`."
                        ],
                        "default": null,
                        "markdownDescription": "Enable editing Ada comments to update references to an entity when it is being renamed.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `false`."
                    }
                }
            },
            {
                "type": "object",
                "title": "Diagnostics",
                "properties": {
                    "ada.projectDiagnostics": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls whether or not the Ada Language Server should emit diagnostics related to project loading into the VS Code Problems view.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.alireDiagnostics": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls whether or not the Ada Language Server should emit diagnostics related to alire into the VS Code Problems view.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.sourceInfoDiagnostics": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls whether or not the Ada Language Server should emit source information diagnostics (e.g: for opened files that do not belong to the loaded project tree).\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.adaFileDiagnostics": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls whether or not the Ada Language Server should emit diagnostics related to the edition of Ada files into the VS Code Problems view.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.gprFileDiagnostics": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls whether or not the Ada Language Server should emit diagnostics related to the edition of GPR files into the VS Code Problems view.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    }
                }
            },
            {
                "type": "object",
                "title": "Miscellaneous",
                "properties": {
                    "ada.enableIndexing": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls whether the Ada Language Server should index the source files immediately after loading a project.\n\nIf set to false, indexing will be deferred to the time when an action requiring the index is first performed, e.g. hovering over a referenced entity to get its documentation.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.followSymlinks": {
                        "scope": "window",
                        "enum": [
                            true,
                            false,
                            null
                        ],
                        "enumItemLabels": [
                            null,
                            null,
                            "Provided by .als.json (default: true)"
                        ],
                        "markdownEnumDescriptions": [
                            "true",
                            "false",
                            "Provided by [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) if it exists at the workspace root, otherwise defaults to `true`."
                        ],
                        "default": null,
                        "markdownDescription": "Controls the Ada Language Server normalizes the file paths received from the client.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `true`."
                    },
                    "ada.trace.server": {
                        "scope": "window",
                        "type": "string",
                        "enum": [
                            "off",
                            "messages",
                            "verbose"
                        ],
                        "enumDescriptions": [
                            "No traces are emitted.",
                            "Brief traces are emitted for each request sent and each response received.",
                            "Verbose traces are emitted for each request sent and each response received, including the message content."
                        ],
                        "default": "off",
                        "markdownDescription": "Traces the communication between VS Code and the Ada language server in the 'Ada Language Server' Output view."
                    },
                    "gpr.trace.server": {
                        "scope": "window",
                        "type": "string",
                        "enum": [
                            "off",
                            "messages",
                            "verbose"
                        ],
                        "enumDescriptions": [
                            "No traces are emitted.",
                            "Brief traces are emitted for each request sent and each response received.",
                            "Verbose traces are emitted for each request sent and each response received, including the message content."
                        ],
                        "default": "off",
                        "markdownDescription": "Traces the communication between VS Code and the GPR language server in the 'GPR Language Server' Output view."
                    },
                    "ada.logThreshold": {
                        "scope": "window",
                        "type": "integer",
                        "default": 10,
                        "markdownDescription": "Controls the maximum number of trace files preserved in the ALS log directory (which defaults to `~/.als`). When this threshold is reached, old trace files get deleted automatically. The default number of preserved trace files is `10`.\n\nIf not set in VS Code, this setting takes its value from the [`.als.json`](https://github.com/AdaCore/ada_language_server/blob/master/doc/settings.md) file at the root of the workspace, if that file exists. Otherwise it defaults to `10`."
                    },
                    "ada.enableExperimentalFeatures": {
                        "scope": "window",
                        "type": "boolean",
                        "default": false,
                        "description": "Enable experimental features still in development."
                    }
                }
            },
            {
                "title": "e3-testsuite",
                "properties": {
                    "e3-testsuite.testsuitePath": {
                        "type": "string",
                        "description": "Path to testsuite.py"
                    },
                    "e3-testsuite.python": {
                        "type": "string",
                        "description": "Path to python interpreter, useful when you want to use a specific venv",
                        "default": "python"
                    },
                    "e3-testsuite.args": {
                        "type": "array",
                        "description": "Command line arguments to pass to testsuite.py when running tests",
                        "default": []
                    }
                }
            }
        ],
        "jsonValidation": [
            {
                "fileMatch": ".als.json",
                "url": "./schemas/als-settings-schema.json"
            }
        ],
        "problemMatchers": [
            {
                "name": "ada",
                "label": "Gnat Ada Problem Matcher (obsolete)",
                "fileLocation": [
                    "autoDetect",
                    "${workspaceRoot}"
                ],
                "pattern": [
                    {
                        "regexp": "^([^:]:?[^:]*):(\\d+):(\\d+):\\s+(?:([a-z]+):\\s+)?(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    }
                ]
            },
            {
                "name": "ada-error",
                "label": "Gnat Ada Error Problem Matcher",
                "fileLocation": [
                    "autoDetect",
                    "${workspaceRoot}"
                ],
                "source": "ada",
                "severity": "error",
                "pattern": [
                    {
                        "regexp": "^([^:]:?[^:]*):(\\d+):(\\d+):\\s+[\\(:]?(error)[\\):]?\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "message": 5
                    }
                ]
            },
            {
                "name": "ada-warning",
                "label": "Gnat Ada Warning Problem Matcher",
                "fileLocation": [
                    "autoDetect",
                    "${workspaceRoot}"
                ],
                "source": "ada",
                "severity": "warning",
                "pattern": [
                    {
                        "regexp": "^([^:]:?[^:]*):(\\d+):(\\d+):\\s+[\\(:]?(warning|medium|medium warning|low|low warning|style)[\\):]?\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "message": 5
                    }
                ]
            },
            {
                "name": "ada-info",
                "label": "Gnat Ada Info Problem Matcher",
                "fileLocation": [
                    "autoDetect",
                    "${workspaceRoot}"
                ],
                "source": "ada",
                "severity": "info",
                "pattern": [
                    {
                        "regexp": "^([^:]:?[^:]*):(\\d+):(\\d+):\\s+[\\(:]?(info|[Nn]ote|check)[\\):]?\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "message": 5
                    }
                ]
            }
        ],
        "taskDefinitions": [
            {
                "type": "ada",
                "when": "shellExecutionSupported",
                "properties": {
                    "command": {
                        "description": "The name of the command to call.",
                        "type": "string"
                    },
                    "args": {
                        "description": "The arguments to pass to the command.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "compound": {
                        "description": "List of task names to be executed sequentially.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "configuration": {
                        "deprecationMessage": "The task property 'configuration' is deprecated. Instead, use the properties 'command' and 'args' to configure the task.",
                        "type": "object",
                        "required": [
                            "kind"
                        ],
                        "properties": {
                            "kind": {
                                "type": "string",
                                "description": "Kind of Ada task",
                                "enum": [
                                    "buildProject",
                                    "checkFile",
                                    "cleanProject",
                                    "buildMain",
                                    "runMain",
                                    "buildAndRunMain"
                                ],
                                "enumDescriptions": [
                                    "Build a GPR project",
                                    "Run semantic checks on an Ada file",
                                    "Clean a GPR project",
                                    "Build a main program specified in a GPR project",
                                    "Run a main program specified in a GPR project",
                                    "Run a build task and a run task in sequence for a given main program"
                                ]
                            },
                            "projectFile": {
                                "type": "string",
                                "description": "Path to GPR project file",
                                "default": "${config:ada.projectFile}"
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Extra build command line arguments"
                            }
                        },
                        "oneOf": [
                            {
                                "$comment": "Each oneOf is evaluated regardless of the parent schema. That's why valid properties of the parent must be repeated here in order to be allowed.",
                                "properties": {
                                    "kind": {
                                        "enum": [
                                            "buildProject",
                                            "checkFile",
                                            "cleanProject"
                                        ]
                                    },
                                    "projectFile": true,
                                    "args": true
                                },
                                "additionalProperties": false
                            },
                            {
                                "required": [
                                    "main"
                                ],
                                "$comment": "Each oneOf is evaluated regardless of the parent schema. That's why valid properties of the parent must be repeated here in order to be allowed.",
                                "properties": {
                                    "kind": {
                                        "enum": [
                                            "buildMain"
                                        ]
                                    },
                                    "projectFile": true,
                                    "args": true,
                                    "main": {
                                        "type": "string",
                                        "description": "Path to main source file"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "required": [
                                    "main"
                                ],
                                "$comment": "Each oneOf is evaluated regardless of the parent schema. That's why valid properties of the parent must be repeated here in order to be allowed.",
                                "properties": {
                                    "kind": {
                                        "enum": [
                                            "runMain"
                                        ]
                                    },
                                    "projectFile": true,
                                    "main": {
                                        "type": "string",
                                        "description": "Path to main source file"
                                    },
                                    "mainArgs": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "Arguments passed to the main executable invocation"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "required": [
                                    "buildTask",
                                    "runTask"
                                ],
                                "$comment": "Each oneOf is evaluated regardless of the parent schema. That's why valid properties of the parent must be repeated here in order to be allowed.",
                                "properties": {
                                    "kind": {
                                        "enum": [
                                            "buildAndRunMain"
                                        ]
                                    },
                                    "buildTask": {
                                        "type": "string",
                                        "description": "Name of the task that builds the main executable"
                                    },
                                    "runTask": {
                                        "type": "string",
                                        "description": "Name of the task that runs the main executable"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                }
            },
            {
                "type": "spark",
                "when": "shellExecutionSupported",
                "properties": {
                    "command": {
                        "description": "The name of the command to call.",
                        "type": "string"
                    },
                    "args": {
                        "description": "The arguments to pass to the command.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "compound": {
                        "description": "List of task names to be executed sequentially.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "configuration": {
                        "type": "object",
                        "required": [
                            "kind",
                            "projectFile"
                        ],
                        "properties": {
                            "kind": {
                                "description": "Kind of SPARK task",
                                "enum": [
                                    "cleanProjectForProof",
                                    "examineProject",
                                    "examineFile",
                                    "examineSubprogram",
                                    "proveProject",
                                    "proveFile",
                                    "proveSubprogram",
                                    "proveRegion",
                                    "proveLine"
                                ]
                            },
                            "projectFile": {
                                "type": "string",
                                "description": "Path to GPR project file",
                                "default": "${config:ada.projectFile}"
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Extra command line arguments"
                            }
                        },
                        "additionalProperties": false
                    }
                }
            },
            {
                "type": "gnat",
                "required": [
                    "taskKind"
                ],
                "properties": {
                    "taskKind": {
                        "type": "string",
                        "description": "Tool and action kind",
                        "deprecationMessage": "The task type \"gnat\" is deprecated. Use task type \"ada\" or \"spark\" instead."
                    },
                    "args": {
                        "type": "array",
                        "description": "Extra command line arguments",
                        "deprecationMessage": "The task type \"gnat\" is deprecated. Use task type \"ada\" or \"spark\" instead."
                    }
                }
            },
            {
                "type": "gpr",
                "required": [
                    "main"
                ],
                "properties": {
                    "projectFile": {
                        "type": "string",
                        "description": "The project file",
                        "deprecationMessage": "The task type \"gpr\" is deprecated. Use task type \"ada\" instead."
                    },
                    "main": {
                        "type": "string",
                        "description": "The main file targeted",
                        "deprecationMessage": "The task type \"gpr\" is deprecated. Use task type \"ada\" instead."
                    },
                    "executable": {
                        "type": "string",
                        "description": "The related executable",
                        "deprecationMessage": "The task type \"gpr\" is deprecated. Use task type \"ada\" instead."
                    }
                }
            }
        ],
        "commands": [
            {
                "command": "ada.restartLanguageServers",
                "title": "Restart Language Servers",
                "category": "Ada",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.visualizeFiles",
                "category": "Ada",
                "title": "Show File Dependencies Graph",
                "enablement": "config.ada.enableExperimentalFeatures"
            },
            {
                "command": "ada.visualizeGPR",
                "category": "Ada",
                "title": "Show GPR Dependencies Graph",
                "enablement": "config.ada.enableExperimentalFeatures"
            },
            {
                "command": "ada.visualizeTypes",
                "category": "Types",
                "title": "Show Type Hierarchy Graph",
                "enablement": "config.ada.enableExperimentalFeatures"
            },
            {
                "command": "ada.visualizeCalls",
                "category": "Calls",
                "title": "Show Call Hierarchy Graph",
                "enablement": "config.ada.enableExperimentalFeatures"
            },
            {
                "command": "ada.createNewAdaMainUnit",
                "title": "Create Main Unit",
                "category": "Ada",
                "shortTitle": "Ada Main Unit"
            },
            {
                "command": "ada.createNewAdaPackage",
                "title": "Create Package",
                "category": "Ada",
                "shortTitle": "Ada Package"
            },
            {
                "command": "ada.createNewGPRProjectFile",
                "title": "Create GPR Project File",
                "category": "Ada",
                "shortTitle": "GPR Project File"
            },
            {
                "command": "ada.otherFile",
                "title": "Go to other file",
                "category": "Ada"
            },
            {
                "command": "als-reload-project",
                "title": "Reload project",
                "category": "Ada",
                "icon": "$(refresh)"
            },
            {
                "command": "als-open-project-file",
                "title": "Edit current project file",
                "category": "Ada"
            },
            {
                "command": "als-open-log-file",
                "title": "Open Ada Language Server log file",
                "category": "Ada"
            },
            {
                "command": "ada.subprogramBox",
                "title": "Add subprogram box",
                "category": "Ada"
            },
            {
                "command": "ada.openUsersGuide",
                "title": "Open User's Guide",
                "category": "Ada"
            },
            {
                "command": "ada.showExtensionOutput",
                "title": "Show extension output",
                "category": "Ada",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.showAdaLSOutput",
                "title": "Show Ada Language Server output",
                "category": "Ada",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.showGprLSOutput",
                "title": "Show GPR Language Server output",
                "category": "Ada",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.addMissingDirsToWorkspace",
                "title": "Add Missing Source Directories To Workspace",
                "category": "Ada",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.buildAndRunMainAsk",
                "title": "Build and run project main...",
                "category": "Ada",
                "icon": "$(run-all)",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.buildAndRunMainLast",
                "title": "Build and run last used main",
                "category": "Ada",
                "icon": "$(run)",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.spark.tasks.cleanProject",
                "title": "Clean project for proof",
                "category": "SPARK",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.spark.tasks.examineProject",
                "title": "Examine project",
                "category": "SPARK",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.spark.tasks.examineFile",
                "title": "Examine file",
                "category": "SPARK",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.tasks.examineSubprogram",
                "title": "Examine subprogram",
                "category": "SPARK",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.tasks.proveProject",
                "title": "Prove project",
                "category": "SPARK",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.spark.tasks.proveFile",
                "title": "Prove file",
                "category": "SPARK",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.tasks.proveSubprogram",
                "title": "Prove subprogram",
                "category": "SPARK",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.tasks.proveSelectedRegion",
                "title": "Prove selected region",
                "category": "SPARK",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.tasks.proveLine",
                "title": "Prove line",
                "category": "SPARK",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.askGNATproveOptions",
                "title": "Select GNATprove options...",
                "category": "SPARK",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.loadGnatCovXMLReport",
                "category": "Ada",
                "title": "GNATcoverage - Load an existing XML coverage report"
            },
            {
                "command": "ada.issueReporter",
                "category": "Ada",
                "title": "Report Issue"
            }
        ],
        "keybindings": [
            {
                "command": "ada.otherFile",
                "key": "alt+O",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.subprogramBox",
                "key": "alt+shift+B",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.tasks.proveFile",
                "key": "meta+y meta+f",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.tasks.proveSubprogram",
                "key": "meta+y meta+s",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.tasks.proveSelectedRegion",
                "key": "meta+y meta+r",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.spark.tasks.proveLine",
                "key": "meta+y meta+l",
                "when": "editorLangId == ada && editorTextFocus"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "ada.otherFile",
                    "when": "editorLangId == ada"
                },
                {
                    "command": "ada.subprogramBox",
                    "when": "editorLangId == ada"
                }
            ],
            "issue/reporter": [
                {
                    "command": "ada.issueReporter"
                }
            ],
            "editor/context": [
                {
                    "command": "ada.otherFile",
                    "group": "ada",
                    "when": "editorLangId == ada"
                },
                {
                    "command": "ada.subprogramBox",
                    "group": "ada",
                    "when": "editorLangId == ada"
                },
                {
                    "command": "ada.visualizeCalls",
                    "group": "0_navigation@4",
                    "title": "Show Call Hierarchy Graph",
                    "when": "activeEditor && editorLangId && editorHasCallHierarchyProvider && config.ada.enableExperimentalFeatures"
                },
                {
                    "command": "ada.visualizeTypes",
                    "group": "0_navigation@5",
                    "title": "Show Type Hierarchy Graph",
                    "when": "activeEditor && editorLangId && editorHasTypeHierarchyProvider && config.ada.enableExperimentalFeatures"
                },
                {
                    "command": "ada.visualizeFiles",
                    "group": "0_navigation@6",
                    "title": "Show File Dependencies Graph",
                    "when": "activeEditor && editorLangId == ada && config.ada.enableExperimentalFeatures"
                },
                {
                    "command": "ada.visualizeGPR",
                    "group": "0_navigation@7",
                    "title": "Show GPR Dependencies Graph",
                    "when": "activeEditor && editorLangId == gpr && config.ada.enableExperimentalFeatures"
                }
            ],
            "editor/title/run": [
                {
                    "command": "ada.buildAndRunMainLast",
                    "when": "editorLangId == ada",
                    "group": "navigation@0"
                },
                {
                    "command": "ada.buildAndRunMainAsk",
                    "when": "editorLangId == ada",
                    "group": "navigation@1"
                }
            ],
            "file/newFile": [
                {
                    "command": "ada.createNewAdaMainUnit",
                    "group": "ada"
                },
                {
                    "command": "ada.createNewAdaPackage",
                    "group": "ada"
                },
                {
                    "command": "ada.createNewGPRProjectFile",
                    "group": "ada"
                }
            ]
        },
        "configurationDefaults": {
            "[ada]": {
                "editor.tabSize": 3,
                "editor.detectIndentation": false
            },
            "[gpr]": {
                "editor.tabSize": 3,
                "editor.detectIndentation": false
            },
            "files.associations": {
                ".als.json": "jsonc"
            }
        },
        "walkthroughs": [
            {
                "id": "als-get-started",
                "title": "Get Started with Ada & SPARK",
                "description": "A brief introduction of Ada & SPARK support in VS Code",
                "steps": [
                    {
                        "id": "als-get-started-install-toolchain",
                        "title": "Install development tools",
                        "description": "Install an Ada compiler to execute your source code.\n[Install a Compiler](https://github.com/AdaCore/ada_language_server/tree/master/integration/vscode/ada#getting-additional-tools)",
                        "media": {
                            "markdown": "media/toolchain.md"
                        }
                    },
                    {
                        "id": "als-get-started-open-workspace",
                        "title": "Open a VS Code workspace",
                        "description": "Create a new folder or use an existing one, and open it with VS Code.\n[Open Folder](command:vscode.openFolder)",
                        "media": {
                            "markdown": "media/empty.md"
                        },
                        "when": "workspaceFolderCount == 0"
                    },
                    {
                        "id": "als-get-started-create-project",
                        "title": "Setup a project",
                        "description": "If you don't already have a GPR project, create one!\n[Create a Hello World Project](command:toSide:ada.createHelloWorldProject)",
                        "media": {
                            "markdown": "media/project.md"
                        }
                    },
                    {
                        "id": "als-get-started-edit",
                        "title": "Navigate and edit your code",
                        "description": "Open an Ada source file to explore features.\n[Open an Ada Source File](command:workbench.action.quickOpen?%22.ad%22)",
                        "media": {
                            "markdown": "media/edit.md"
                        }
                    },
                    {
                        "id": "als-get-started-build",
                        "title": "Build your project",
                        "description": "Use automatically provided `ada` tasks to build your project.\n[Run Build Task](command:workbench.action.tasks.build)",
                        "media": {
                            "markdown": "media/build.md"
                        },
                        "completionEvents": [
                            "onCommand:workbench.action.tasks.runTask",
                            "onCommand:workbench.action.tasks.build"
                        ]
                    },
                    {
                        "id": "als-get-started-debug",
                        "title": "Launch and debug your application",
                        "description": "Use automatically provided debug configurations.\n[Start Debugging](command:toSide:ada.walkthroughStartDebugging)",
                        "media": {
                            "markdown": "media/launch-debug.md"
                        },
                        "completionEvents": [
                            "onCommand:workbench.action.debug.start"
                        ]
                    },
                    {
                        "id": "als-get-started-settings",
                        "title": "Configure settings",
                        "description": "Configure your Ada development environment.\n[Open Ada & SPARK Settings](command:toSide:workbench.action.openWorkspaceSettings?%22%40ext%3Aadacore.ada%22)\n[Open Ada & SPARK Keyboard Shortcuts](command:toSide:workbench.action.openGlobalKeybindings?%22%40source%3Aextension%20Ada%20%26%20SPARK%22)",
                        "media": {
                            "markdown": "media/settings.md"
                        }
                    },
                    {
                        "id": "als-get-started-more-resources",
                        "title": "Tutorials and Demos",
                        "description": "",
                        "media": {
                            "markdown": "media/more-resources.md"
                        }
                    },
                    {
                        "id": "als-get-started-github",
                        "title": "Report issues or make contributions",
                        "description": "This extension is open source software. Feel free to [open an issue](https://github.com/AdaCore/ada_language_server/issues) or [contribute on GitHub](https://github.com/AdaCore/ada_language_server/pulls)!",
                        "media": {
                            "image": "media/github.jpg",
                            "altText": "Github snapshot"
                        }
                    }
                ]
            }
        ],
        "debuggers": [
            {
                "type": "ada",
                "label": "Ada",
                "languages": [
                    "ada",
                    "gpr",
                    "GNAT Project"
                ],
                "when": "ADA_PROJECT_CONTEXT",
                "configurationSnippets": [
                    {
                        "label": "Ada: Debugger Launch",
                        "description": "Launch configuration for Ada debugging.",
                        "body": {
                            "type": "cppdbg",
                            "request": "launch",
                            "name": "Ada: Debugger Launch",
                            "program": "^\"\\${workspaceFolder}/\\${command:ada.getOrAskForProgram}\"",
                            "args": [],
                            "cwd": "^\"\\${workspaceFolder}\"",
                            "stopAtEntry": false,
                            "externalConsole": false,
                            "preLaunchTask": "ada: Build current project",
                            "setupCommands": [
                                {
                                    "description": "Enable pretty-printing for gdb",
                                    "text": "-enable-pretty-printing",
                                    "ignoreFailures": true
                                },
                                {
                                    "description": "Disable questions on multiple matches",
                                    "text": "set multiple-symbols cancel",
                                    "ignoreFailures": false
                                }
                            ]
                        }
                    }
                ],
                "variables": {
                    "AskForProgram": "ada.getOrAskForProgram"
                }
            }
        ]
    },
    "devDependencies": {
        "@eslint/eslintrc": "^3.1.0",
        "@eslint/js": "^9.10.0",
        "@testing-library/webdriverio": "^3.2.1",
        "@types/command-exists": "1.2.3",
        "@types/mocha": "10.0.7",
        "@types/node": "^18.0.0",
        "@types/react": "^19.0.10",
        "@types/react-dom": "^19.0.4",
        "@types/split2": "^4.2.3",
        "@types/tmp": "^0.2.6",
        "@types/vscode": "~1.88.0",
        "@types/vscode-webview": "^1.57.5",
        "@types/ws": "^8.0.0",
        "@typescript-eslint/eslint-plugin": "8.3.0",
        "@typescript-eslint/parser": "8.3.0",
        "@vscode/test-cli": "^0.0.10",
        "@vscode/test-electron": "^2.4.1",
        "@vscode/vsce": "3.0.0",
        "@wdio/cli": "^8.45.0",
        "@wdio/local-runner": "^8.45.0",
        "@wdio/mocha-framework": "^8.45.0",
        "@wdio/spec-reporter": "^8.43.0",
        "css-loader": "^7.1.2",
        "dotenv": "^16.4.5",
        "esbuild-wasm": "0.23.1",
        "eslint": "9.9.1",
        "eslint-config-prettier": "9.1.0",
        "eslint-plugin-prettier": "5.2.1",
        "eslint-plugin-tsdoc": "0.3.0",
        "glob": "11.0.0",
        "globals": "^15.9.0",
        "mocha": "10.7.3",
        "mocha-junit-reporter": "^2.2.1",
        "npm-check-updates": "^17.1.0",
        "ovsx": "^0.9.2",
        "prettier": "3.3.3",
        "style-loader": "^4.0.0",
        "ts-mockito": "^2.6.1",
        "typescript": "5.5.4",
        "vscode-tmgrammar-test": "0.1.3",
        "wdio-vscode-service": "^6.1.3",
        "wdio-wait-for": "^3.1.0",
        "webdriverio": "^8.45.0",
        "webpack": "^5.98.0",
        "webpack-cli": "^6.0.1"
    },
    "overrides": {
        "tar-fs": ">3.0.8",
        "ws": "$ws"
    },
    "scripts": {
        "check-licenses": "npx license-checker-rseidelsohn --production --summary --onlyAllow \"MIT;ISC;CC-BY-4.0;GPL-3.0;BSD-3-Clause;EPL-2.0\"",
        "vscode:prepublish": "npm run compile && npm run esbuild-base -- --minify --sourcemap",
        "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/src/extension.js --external:vscode --format=cjs --platform=node",
        "compile": "node ./node_modules/typescript/bin/tsc && npm run compile-webview",
        "compile-webview": "npm run copy && node ./node_modules/webpack/bin/webpack.js",
        "watch": "npm run copy && node ./node_modules/typescript/bin/tsc -watch",
        "copy": "node -e \"fs.mkdirSync('out/src/visualizing', {recursive: true}); fs.copyFileSync('src/visualizing/visualizerStyleSheet.css','out/src/visualizing/visualizerStyleSheet.css')\"",
        "pretest": "npm run compile",
        "lint": "npm run cilint -- --quiet --fix",
        "cilint": "node ./node_modules/eslint/bin/eslint.js \"./src/**/*.{js,ts,tsx}\" \"./test/**/*.{js,ts,tsx}\"",
        "test": "vscode-test",
        "resolve-backtrace": "npx stacktracify",
        "clean": "node -e \"fs.rmSync('out',{force:true,recursive:true})\"",
        "unresolve": "node unresolve.js",
        "wdio": "node ./node_modules/bin/wdio run ./test/visualizer_test/wdio.conf.ts"
    },
    "dependencies": {
        "@vscode/codicons": "^0.0.36",
        "@xyflow/react": "^12.5.6",
        "command-exists": "1.2.9",
        "elkjs": "^0.9.3",
        "fast-xml-parser": "^4.4.1",
        "fp-ts": "2.16.9",
        "process": "0.11.10",
        "react": "^19.0.0",
        "react-dom": "^19.0.0",
        "split2": "^4.2.0",
        "tmp": "^0.2.3",
        "vscode-languageclient": "9.0.1",
        "winston": "3.14.2",
        "ws": "^8.18.0",
        "yaml": "^2.8.0"
    }
}
