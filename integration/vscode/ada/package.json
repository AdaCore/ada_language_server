{
    "name": "ada",
    "displayName": "Language Support for Ada",
    "description": "A Language Server providing Ada and SPARK support in Visual Studio Code",
    "version": "23.0.999",
    "publisher": "AdaCore",
    "license": "GPL-3.0",
    "engines": {
        "vscode": "^1.71.2"
    },
    "categories": [
        "Programming Languages",
        "Extension Packs"
    ],
    "extensionPack": [
        "ms-vscode.cpptools"
    ],
    "activationEvents": [
        "onLanguage:ada",
        "onLanguage:gpr",
        "workspaceContains:*.gpr",
        "workspaceContains:*/*.gpr",
        "workspaceContains:*.ad[bs]",
        "workspaceContains:*/*.ad[bs]",
        "workspaceContains:alire.toml",
        "onCommand:workbench.action.tasks.runTask"
    ],
    "main": "./out/src/extension",
    "icon": "icons/ada.png",
    "bugs": "https://github.com/AdaCore/ada_language_server/issues",
    "repository": {
        "type": "git",
        "url": "https://github.com/AdaCore/ada_language_server.git"
    },
    "os": [
        "linux",
        "win32",
        "darwin"
    ],
    "cpu": [
        "x64"
    ],
    "keywords": [
        "Ada",
        "ada",
        "adb",
        "adc",
        "ads",
        "gpr"
    ],
    "contributes": {
        "languages": [
            {
                "id": "ada",
                "aliases": [
                    "Ada",
                    "ada"
                ],
                "extensions": [
                    ".ada",
                    ".adb",
                    ".adc",
                    ".ads"
                ],
                "configuration": "./language-configuration.json"
            },
            {
                "id": "ali",
                "aliases": [
                    "ALI",
                    "Ali",
                    "ali",
                    "Ada Library Information"
                ],
                "extensions": [
                    ".ali"
                ]
            },
            {
                "id": "gpr",
                "aliases": [
                    "GNAT Project",
                    "gpr"
                ],
                "extensions": [
                    ".gpr"
                ],
                "configuration": "./gpr-language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "ada",
                "scopeName": "source.ada",
                "path": "./syntaxes/ada.tmLanguage.json"
            },
            {
                "language": "ali",
                "scopeName": "source.ali",
                "path": "./syntaxes/ali.tmLanguage.json"
            },
            {
                "language": "gpr",
                "scopeName": "source.gpr",
                "path": "./syntaxes/gpr.tmLanguage.json"
            }
        ],
        "semanticTokenScopes": [
            {
                "language": "ada",
                "scopes": {
                    "namespace": [
                        "entity.name.label.ada"
                    ],
                    "type": [
                        "entity.name.type.ada"
                    ],
                    "class": [
                        "entity.name.type.class.ada"
                    ],
                    "enum": [
                        "entity.name.type.enum.ada"
                    ],
                    "interface": [
                        "entity.name.type.interface.ada"
                    ],
                    "struct": [
                        "entity.name.type.struct.ada"
                    ],
                    "typeParameter": [
                        "variable.other.constant.parameter.ada"
                    ],
                    "parameter": [
                        "entity.name.variable.parameter.ada"
                    ],
                    "variable": [
                        "entity.name.variable.ada"
                    ],
                    "property": [
                        "entity.name.variable.property.ada"
                    ],
                    "enumMember": [
                        "variable.other.enummember.ada"
                    ],
                    "function": [
                        "entity.name.function.ada"
                    ],
                    "keyword": [
                        "keyword.other.ada"
                    ],
                    "modifier": [
                        "storage.modifier.ada"
                    ],
                    "comment": [
                        "comment.line.ada"
                    ],
                    "string": [
                        "string.quoted.double.ada"
                    ],
                    "number": [
                        "constant.numeric.ada"
                    ],
                    "operator": [
                        "entity.name.operator.ada"
                    ],
                    "parameter.readonly": [
                        "variable.other.constant.parameter.ada"
                    ],
                    "variable.readonly": [
                        "variable.other.constant.ada"
                    ],
                    "property.readonly": [
                        "variable.other.constant.property.ada"
                    ],
                    "namespace.deprecated": [
                        "markup.strikethrough.namespace.ada"
                    ],
                    "type.deprecated": [
                        "markup.strikethrough.type.ada"
                    ],
                    "class.deprecated": [
                        "markup.strikethrough.class.ada"
                    ],
                    "enum.deprecated": [
                        "markup.strikethrough.enum.ada"
                    ],
                    "interface.deprecated": [
                        "markup.strikethrough.interface.ada"
                    ],
                    "struct.deprecated": [
                        "markup.strikethrough.struct.ada"
                    ],
                    "variable.deprecated": [
                        "markup.strikethrough.variable.ada"
                    ],
                    "property.deprecated": [
                        "markup.strikethrough.property.ada"
                    ],
                    "function.deprecated": [
                        "markup.strikethrough.function.ada"
                    ],
                    "type.abstract": [
                        "entity.name.type.abstract.ada"
                    ],
                    "class.abstract": [
                        "entity.name.type.class.abstract.ada"
                    ],
                    "function.abstract": [
                        "entity.name.function.abstract.ada"
                    ],
                    "operator.abstract": [
                        "entity.name.operator.abstract.ada"
                    ],
                    "parameter.modification": [
                        "variable.write.parameter.ada"
                    ],
                    "variable.modification": [
                        "variable.write.ada"
                    ],
                    "property.modification": [
                        "variable.write.property.ada"
                    ],
                    "namespace.defaultLibrary": [
                        "support.namespace.ada"
                    ],
                    "type.defaultLibrary": [
                        "support.type.ada"
                    ],
                    "class.defaultLibrary": [
                        "support.class.ada"
                    ],
                    "enum.defaultLibrary": [
                        "support.type.enum.ada"
                    ],
                    "interface.defaultLibrary": [
                        "support.type.interface.ada"
                    ],
                    "struct.defaultLibrary": [
                        "support.type.struct.ada"
                    ],
                    "typeParameter.defaultLibrary": [
                        "support.variable.discriminant.ada"
                    ],
                    "parameter.defaultLibrary": [
                        "support.variable.parameter.ada"
                    ],
                    "variable.defaultLibrary": [
                        "support.variable.ada"
                    ],
                    "property.defaultLibrary": [
                        "support.variable.property.ada"
                    ],
                    "enumMember.defaultLibrary": [
                        "support.constant.enummember.ada"
                    ],
                    "function.defaultLibrary": [
                        "support.function.ada"
                    ],
                    "operator.defaultLibrary": [
                        "support.function.operator.ada"
                    ]
                }
            }
        ],
        "snippets": [
            {
                "language": "ada",
                "path": "./ada-snippets.json"
            },
            {
                "language": "gpr",
                "path": "./gpr-snippets.json"
            }
        ],
        "configuration": [
            {
                "type": "object",
                "title": "Ada",
                "properties": {
                    "ada.trace.server": {
                        "scope": "window",
                        "type": "string",
                        "enum": [
                            "off",
                            "messages",
                            "verbose"
                        ],
                        "default": "off",
                        "description": "Traces the communication between VSCode and the Ada language server."
                    },
                    "gpr.trace.server": {
                        "scope": "window",
                        "type": "string",
                        "enum": [
                            "off",
                            "messages",
                            "verbose"
                        ],
                        "default": "off",
                        "description": "Traces the communication between VSCode and the GPR language server."
                    },
                    "ada.projectFile": {
                        "scope": "resource",
                        "type": "string",
                        "default": "",
                        "description": "Project file (*.gpr) for given workspace."
                    },
                    "ada.scenarioVariables": {
                        "scope": "resource",
                        "type": "object",
                        "default": {},
                        "description": "Scenario variables."
                    },
                    "ada.defaultCharset": {
                        "scope": "resource",
                        "type": "string",
                        "default": "iso-8859-1",
                        "description": "The character set to use while reading files from disk."
                    },
                    "ada.documentationStyle": {
                        "scope": "resource",
                        "type": "string",
                        "enum": [
                            "gnat",
                            "leading"
                        ],
                        "enumDescriptions": [
                            "Default style, based on GNAT coding standard with some enhancements.",
                            "Documentation for the entities extracted from the comments before the entity declaration."
                        ],
                        "default": "gnat",
                        "description": "Controls primary documentation style of entities."
                    },
                    "ada.displayMethodAncestryOnNavigation": {
                        "scope": "resource",
                        "type": "string",
                        "enum": [
                            "never",
                            "usage_and_abstract_only",
                            "definition_only",
                            "always"
                        ],
                        "enumDescriptions": [
                            "Never list overridding and/or overridden suprograms.",
                            "List overridding and/or overridden suprograms on dispatching calls and on abstract subprogram declarations.",
                            "List overridding and/or overridden suprograms on declarations only.",
                            "Always list overridding and/or overridden suprograms when possible."
                        ],
                        "default": "usage_and_abstract_only",
                        "description": "Controls the policy for displaying overriding and overridden subprograms on navigation requests such as 'Go To Definition' or 'Go To Implementations'."
                    },
                    "ada.enableDiagnostics": {
                        "scope": "resource",
                        "type": "boolean",
                        "default": true,
                        "description": "The emission of diagnostics."
                    },
                    "ada.enableIndexing": {
                        "scope": "resource",
                        "type": "boolean",
                        "default": true,
                        "description": "Controls indexing the source files after loading a project."
                    },
                    "ada.foldComments": {
                        "scope": "resource",
                        "type": "boolean",
                        "default": true,
                        "description": "Controls the inclusion of comments in folding blocks."
                    },
                    "ada.followSymlinks": {
                        "scope": "resource",
                        "type": "boolean",
                        "default": true,
                        "description": "Controls the file names normalization sent by a client."
                    },
                    "ada.namedNotationThreshold": {
                        "scope": "resource",
                        "type": "integer",
                        "default": 3,
                        "description": "Defines the number of parameters/components at which point named notation is used for completion snippets."
                    },
                    "ada.relocateBuildTree": {
                        "scope": "resource",
                        "type": "string",
                        "default": "",
                        "description": "The folder for out-of-tree build."
                    },
                    "ada.rootDir": {
                        "scope": "resource",
                        "type": "string",
                        "default": "",
                        "description": "The root directory for artifacts for proper relocation. Used with relocateBuildTree."
                    },
                    "ada.useCompletionSnippets": {
                        "scope": "resource",
                        "type": "boolean",
                        "default": false,
                        "description": "Enable snippets in completion results (e.g: subprogram calls)."
                    },
                    "ada.renameInComments": {
                        "scope": "resource",
                        "type": "boolean",
                        "default": false,
                        "description": "Enable editing Ada comments while executing `textDocument/rename` reques."
                    }
                }
            }
        ],
        "problemMatchers": [
            {
                "name": "ada",
                "label": "Gnat Ada Problem Matcher",
                "fileLocation": [
                    "autoDetect",
                    "${workspaceRoot}"
                ],
                "pattern": [
                    {
                        "regexp": "^([^:]:?[^:]*):(\\d+):(\\d+):\\s+(?:([a-z]+):\\s+)?(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    }
                ]
            }
        ],
        "taskDefinitions": [
            {
                "type": "gnat",
                "required": [
                    "taskKind"
                ],
                "properties": {
                    "taskKind": {
                        "type": "string",
                        "description": "Tool and action kind"
                    },
                    "args": {
                        "type": "array",
                        "description": "Extra command arguments"
                    }
                }
            },
            {
                "type": "GPR Tasks",
                "required": [
                    "projectFile",
                    "mainFile"
                ],
                "properties": {
                    "projectFile": {
                        "type": "string",
                        "description": "The project file"
                    },
                    "executable": {
                        "type": "string",
                        "description": "The main file"
                    }
                }
            }
        ],
        "commands": [
            {
                "command": "ada.otherFile",
                "title": "Ada: Go to other file"
            },
            {
                "command": "als-reload-project",
                "title": "Ada: Reload project"
            },
            {
                "command": "ada.subprogramBox",
                "title": "Ada: Add subprogram box"
            }
        ],
        "keybindings": [
            {
                "command": "ada.otherFile",
                "key": "alt+O",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.subprogramBox",
                "key": "alt+shift+B",
                "when": "editorLangId == ada && editorTextFocus"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "ada.otherFile",
                    "when": "editorLangId == ada"
                },
                {
                    "command": "ada.subprogramBox",
                    "when": "editorLangId == ada"
                }
            ]
        },
        "walkthroughs": [
            {
                "id": "als-get-stated",
                "title": "Ada in VS Code",
                "description": "Introduction to Ada in VS Code support",
                "steps": [
                    {
                        "id": "als-get-stated-welcome",
                        "title": "Welcome to Ada extension!",
                        "description": "This short walkthrough introduces the Ada extension.",
                        "media": {
                            "markdown": "media/welcome.md"
                        }
                    },
                    {
                        "id": "als-get-stated-setting",
                        "title": "Set a project file",
                        "description": "Set the active project file in the `ada.projectFile` setting.\n [Open Settings](command:workbench.action.openSettings)",
                        "media": {
                            "markdown": "media/settings.md"
                        },
                        "completionEvents": [
                            "onSettingChanged:ada.projectFile"
                        ]
                    },
                    {
                        "id": "als-get-stated-debug",
                        "title": "Launch and debug",
                        "description": "Use the pre-installed **C/C++** extension to debug Ada code.",
                        "media": {
                            "markdown": "media/launch-debug.md"
                        },
                        "completionEvents": [
                            "onCommand:workbench.action.debug.start"
                        ]
                    },
                    {
                        "id": "als-get-stated-github",
                        "title": "Report issues or contribute to the extension",
                        "description": "This extension is an open source software. Feel free to [open an issue](https://github.com/AdaCore/ada_language_server/issues) or [contribute on GitHub](https://github.com/AdaCore/ada_language_server/pulls)!",
                        "media": {
                            "image": "media/github.jpg",
                            "altText": "Github snapshot"
                        }
                    }
                ]
            }
        ]
    },
    "devDependencies": {
        "@types/mocha": "10.0.1",
        "@types/node": "16.18.16",
        "@types/vscode": "1.71.0",
        "@types/ws": "8.5.4",
        "@typescript-eslint/eslint-plugin": "5.54.0",
        "@typescript-eslint/parser": "5.55.0",
        "@vscode/test-electron": "2.3.0",
        "esbuild": "0.17.11",
        "eslint": "8.36.0",
        "eslint-config-prettier": "8.7.0",
        "eslint-plugin-prettier": "4.2.1",
        "eslint-plugin-tsdoc": "0.2.17",
        "glob": "9.3.0",
        "mocha": "10.2.0",
        "prettier": "2.8.4",
        "typescript": "4.9.5",
        "vscode-tmgrammar-test": "0.1.1"
    },
    "scripts": {
        "vscode:prepublish": "npm run esbuild-base -- --minify",
        "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
        "compile": "node ./node_modules/typescript/bin/tsc",
        "watch": "node ./node_modules/typescript/bin/tsc -watch",
        "pretest": "npm run compile",
        "lint": "eslint './src/**/*.{js,ts,tsx}' --quiet --fix",
        "test": "node ./out/test/runTest.js"
    },
    "dependencies": {
        "@types/command-exists": "1.2.0",
        "command-exists": "1.2.9",
        "fp-ts": "2.12.0",
        "process": "0.11.10",
        "vscode-languageclient": "7.0.0",
        "ws": "8.13.0"
    }
}