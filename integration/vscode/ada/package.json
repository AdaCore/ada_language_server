{
    "name": "ada",
    "displayName": "Ada & SPARK",
    "description": "Ada & SPARK IntelliSense, code browsing, debugging and more.",
    "version": "24.0.999",
    "publisher": "AdaCore",
    "license": "GPL-3.0",
    "engines": {
        "vscode": "^1.71.2"
    },
    "categories": [
        "Programming Languages",
        "Extension Packs"
    ],
    "extensionPack": [
        "ms-vscode.cpptools"
    ],
    "activationEvents": [
        "onLanguage:ada",
        "onLanguage:gpr",
        "workspaceContains:*.gpr",
        "workspaceContains:*/*.gpr",
        "workspaceContains:*.ad[bs]",
        "workspaceContains:*/*.ad[bs]",
        "workspaceContains:alire.toml",
        "onDebugDynamicConfigurations:ada"
    ],
    "main": "./out/src/extension",
    "icon": "icons/ada.png",
    "bugs": "https://github.com/AdaCore/ada_language_server/issues",
    "repository": {
        "type": "git",
        "url": "https://github.com/AdaCore/ada_language_server.git"
    },
    "os": [
        "linux",
        "win32",
        "darwin"
    ],
    "cpu": [
        "arm64",
        "x64"
    ],
    "keywords": [
        "Ada",
        "ada",
        "adb",
        "adc",
        "ads",
        "gpr"
    ],
    "contributes": {
        "languages": [
            {
                "id": "ada",
                "aliases": [
                    "Ada",
                    "ada"
                ],
                "extensions": [
                    ".ada",
                    ".adb",
                    ".adc",
                    ".ads"
                ],
                "configuration": "./language-configuration.json"
            },
            {
                "id": "ali",
                "aliases": [
                    "ALI",
                    "Ali",
                    "ali",
                    "Ada Library Information"
                ],
                "extensions": [
                    ".ali"
                ]
            },
            {
                "id": "gpr",
                "aliases": [
                    "GNAT Project",
                    "gpr"
                ],
                "extensions": [
                    ".gpr"
                ],
                "configuration": "./gpr-language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "ada",
                "scopeName": "source.ada",
                "path": "./syntaxes/ada.tmLanguage.json"
            },
            {
                "language": "ali",
                "scopeName": "source.ali",
                "path": "./syntaxes/ali.tmLanguage.json"
            },
            {
                "language": "gpr",
                "scopeName": "source.gpr",
                "path": "./syntaxes/gpr.tmLanguage.json"
            }
        ],
        "semanticTokenScopes": [
            {
                "language": "ada",
                "scopes": {
                    "namespace": [
                        "entity.name.label.ada"
                    ],
                    "type": [
                        "entity.name.type.ada"
                    ],
                    "class": [
                        "entity.name.type.class.ada"
                    ],
                    "enum": [
                        "entity.name.type.enum.ada"
                    ],
                    "interface": [
                        "entity.name.type.interface.ada"
                    ],
                    "struct": [
                        "entity.name.type.struct.ada"
                    ],
                    "typeParameter": [
                        "variable.other.constant.parameter.ada"
                    ],
                    "parameter": [
                        "entity.name.variable.parameter.ada"
                    ],
                    "variable": [
                        "entity.name.variable.ada"
                    ],
                    "property": [
                        "entity.name.variable.property.ada"
                    ],
                    "enumMember": [
                        "variable.other.enummember.ada"
                    ],
                    "function": [
                        "entity.name.function.ada"
                    ],
                    "keyword": [
                        "keyword.other.ada"
                    ],
                    "modifier": [
                        "storage.modifier.ada"
                    ],
                    "comment": [
                        "comment.line.ada"
                    ],
                    "string": [
                        "string.quoted.double.ada"
                    ],
                    "number": [
                        "constant.numeric.ada"
                    ],
                    "operator": [
                        "entity.name.operator.ada"
                    ],
                    "parameter.readonly": [
                        "variable.other.constant.parameter.ada"
                    ],
                    "variable.readonly": [
                        "variable.other.constant.ada"
                    ],
                    "property.readonly": [
                        "variable.other.constant.property.ada"
                    ],
                    "namespace.deprecated": [
                        "markup.strikethrough.namespace.ada"
                    ],
                    "type.deprecated": [
                        "markup.strikethrough.type.ada"
                    ],
                    "class.deprecated": [
                        "markup.strikethrough.class.ada"
                    ],
                    "enum.deprecated": [
                        "markup.strikethrough.enum.ada"
                    ],
                    "interface.deprecated": [
                        "markup.strikethrough.interface.ada"
                    ],
                    "struct.deprecated": [
                        "markup.strikethrough.struct.ada"
                    ],
                    "variable.deprecated": [
                        "markup.strikethrough.variable.ada"
                    ],
                    "property.deprecated": [
                        "markup.strikethrough.property.ada"
                    ],
                    "function.deprecated": [
                        "markup.strikethrough.function.ada"
                    ],
                    "type.abstract": [
                        "entity.name.type.abstract.ada"
                    ],
                    "class.abstract": [
                        "entity.name.type.class.abstract.ada"
                    ],
                    "function.abstract": [
                        "entity.name.function.abstract.ada"
                    ],
                    "operator.abstract": [
                        "entity.name.operator.abstract.ada"
                    ],
                    "parameter.modification": [
                        "variable.write.parameter.ada"
                    ],
                    "variable.modification": [
                        "variable.write.ada"
                    ],
                    "property.modification": [
                        "variable.write.property.ada"
                    ],
                    "namespace.defaultLibrary": [
                        "support.namespace.ada"
                    ],
                    "type.defaultLibrary": [
                        "support.type.ada"
                    ],
                    "class.defaultLibrary": [
                        "support.class.ada"
                    ],
                    "enum.defaultLibrary": [
                        "support.type.enum.ada"
                    ],
                    "interface.defaultLibrary": [
                        "support.type.interface.ada"
                    ],
                    "struct.defaultLibrary": [
                        "support.type.struct.ada"
                    ],
                    "typeParameter.defaultLibrary": [
                        "support.variable.discriminant.ada"
                    ],
                    "parameter.defaultLibrary": [
                        "support.variable.parameter.ada"
                    ],
                    "variable.defaultLibrary": [
                        "support.variable.ada"
                    ],
                    "property.defaultLibrary": [
                        "support.variable.property.ada"
                    ],
                    "enumMember.defaultLibrary": [
                        "support.constant.enummember.ada"
                    ],
                    "function.defaultLibrary": [
                        "support.function.ada"
                    ],
                    "operator.defaultLibrary": [
                        "support.function.operator.ada"
                    ]
                }
            }
        ],
        "snippets": [
            {
                "language": "ada",
                "path": "./ada-snippets.json"
            },
            {
                "language": "gpr",
                "path": "./gpr-snippets.json"
            }
        ],
        "configuration": [
            {
                "type": "object",
                "title": "Project",
                "order": 0,
                "properties": {
                    "ada.projectFile": {
                        "scope": "window",
                        "type": "string",
                        "default": "",
                        "description": "GPR project file (*.gpr) for this workspace.\n\nIt is recommended to set this to a relative path starting at the root of the workspace.",
                        "order": 0
                    },
                    "ada.scenarioVariables": {
                        "scope": "window",
                        "type": "object",
                        "default": {},
                        "description": "Scenario variables to apply to the GPR project file.\n\nThis value should be provided as an object where the property names are GPR scenario variables and the values are strings.",
                        "patternProperties": {
                            ".*": {
                                "type": "string"
                            }
                        },
                        "order": 1
                    },
                    "ada.defaultCharset": {
                        "scope": "window",
                        "type": "string",
                        "default": "iso-8859-1",
                        "description": "The character set that the Ada Language Server should use when reading files from disk."
                    },
                    "ada.relocateBuildTree": {
                        "scope": "window",
                        "type": "string",
                        "default": "",
                        "description": "The folder for out-of-tree build.",
                        "markdownDescription": "The path to a directory used for out-of-tree builds. This feature is related to the [--relocate-build-tree GPRbuild command line switch](https://docs.adacore.com/gprbuild-docs/html/gprbuild_ug/building_with_gprbuild.html#switches)."
                    },
                    "ada.rootDir": {
                        "scope": "window",
                        "type": "string",
                        "default": "",
                        "markdownDescription": "This setting must be used in conjunction with the `relocateBuildTree` setting.\n\nIt specifies the root directory for artifact relocation. It corresponds to the [--root-dir GPRbuild command line switch](https://docs.adacore.com/gprbuild-docs/html/gprbuild_ug/building_with_gprbuild.html#switches)."
                    }
                }
            },
            {
                "type": "object",
                "title": "Formatting",
                "order": 1,
                "properties": {
                    "ada.onTypeFormatting.indentOnly": {
                        "scope": "window",
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "If the VS Code `editor.formatOnType` setting is enabled, the Ada Language Server will format Ada code while it is being typed in the editor, in particular when a new line is typed.\n\nThis setting controls whether formatting should only perform the indentation of the new line (true) or also format the previous line (false)."
                    }
                }
            },
            {
                "type": "object",
                "title": "UI",
                "order": 2,
                "properties": {
                    "ada.documentationStyle": {
                        "scope": "window",
                        "type": "string",
                        "enum": [
                            "gnat",
                            "leading"
                        ],
                        "enumDescriptions": [
                            "Default style, based on GNAT coding standard with some enhancements.",
                            "Documentation for the entities extracted from the comments before the entity declaration."
                        ],
                        "default": "gnat",
                        "description": "Controls the primary documentation style of entities."
                    },
                    "ada.displayMethodAncestryOnNavigation": {
                        "scope": "window",
                        "type": "string",
                        "enum": [
                            "never",
                            "usage_and_abstract_only",
                            "definition_only",
                            "always"
                        ],
                        "enumDescriptions": [
                            "Never list overridding and/or overridden suprograms.",
                            "List overridding and/or overridden suprograms on dispatching calls and on abstract subprogram declarations.",
                            "List overridding and/or overridden suprograms on declarations only.",
                            "Always list overridding and/or overridden suprograms when possible."
                        ],
                        "default": "usage_and_abstract_only",
                        "description": "Controls the policy for displaying overriding and overridden subprograms on navigation requests such as 'Go To Definition' or 'Go To Implementations'."
                    },
                    "ada.enableDiagnostics": {
                        "scope": "window",
                        "type": "boolean",
                        "default": true,
                        "description": "Controls whether or not the Ada Language Server should emit diagnostics into the VS Code Problems view."
                    },
                    "ada.foldComments": {
                        "scope": "window",
                        "type": "boolean",
                        "default": true,
                        "description": "Controls whether comments should be folded like code blocks."
                    },
                    "ada.namedNotationThreshold": {
                        "scope": "window",
                        "type": "integer",
                        "default": 3,
                        "description": "Defines the number of parameters/components beyond which named notation is used for completion snippets."
                    },
                    "ada.useCompletionSnippets": {
                        "scope": "window",
                        "type": "boolean",
                        "default": false,
                        "description": "Enable snippets in completion results (e.g. subprogram calls)."
                    },
                    "ada.renameInComments": {
                        "scope": "window",
                        "type": "boolean",
                        "default": false,
                        "description": "Enable editing Ada comments to update references to an entity when it is being renamed."
                    }
                }
            },
            {
                "type": "object",
                "title": "Miscelaneous",
                "properties": {
                    "ada.enableIndexing": {
                        "scope": "window",
                        "type": "boolean",
                        "default": true,
                        "description": "Controls whether the Ada Language Server should index the source files immediately after loading a project.\n\nIf set to false, indexing will be deferred to the time when an action requiring the index is first performed, e.g. hovering over a referenced entity to get its documentation."
                    },
                    "ada.followSymlinks": {
                        "scope": "window",
                        "type": "boolean",
                        "default": true,
                        "description": "Controls the Ada Language Server normalizes the file paths received from the client."
                    },
                    "ada.trace.server": {
                        "scope": "window",
                        "type": "string",
                        "enum": [
                            "off",
                            "messages",
                            "verbose"
                        ],
                        "enumDescriptions": [
                            "No traces are emitted.",
                            "Brief traces are emitted for each request sent and each response received.",
                            "Verbose traces are emitted for each request sent and each response received, including the message content."
                        ],
                        "default": "off",
                        "description": "Traces the communication between VS Code and the Ada language server in the 'Ada Language Server' Output view."
                    },
                    "gpr.trace.server": {
                        "scope": "window",
                        "type": "string",
                        "enum": [
                            "off",
                            "messages",
                            "verbose"
                        ],
                        "enumDescriptions": [
                            "No traces are emitted.",
                            "Brief traces are emitted for each request sent and each response received.",
                            "Verbose traces are emitted for each request sent and each response received, including the message content."
                        ],
                        "default": "off",
                        "description": "Traces the communication between VS Code and the GPR language server in the 'GPR Language Server' Output view."
                    }
                }
            }
        ],
        "problemMatchers": [
            {
                "name": "ada",
                "label": "Gnat Ada Problem Matcher",
                "fileLocation": [
                    "autoDetect",
                    "${workspaceRoot}"
                ],
                "pattern": [
                    {
                        "regexp": "^([^:]:?[^:]*):(\\d+):(\\d+):\\s+(?:([a-z]+):\\s+)?(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    }
                ]
            }
        ],
        "taskDefinitions": [
            {
                "type": "ada",
                "required": [
                    "configuration"
                ],
                "properties": {
                    "configuration": {
                        "type": "object",
                        "required": [
                            "kind",
                            "projectFile"
                        ],
                        "properties": {
                            "kind": {
                                "type": "string",
                                "description": "Kind of Ada task",
                                "enum": [
                                    "buildProject",
                                    "checkFile",
                                    "cleanProject",
                                    "buildMain",
                                    "buildAndRunMain"
                                ]
                            },
                            "projectFile": {
                                "type": "string",
                                "description": "Path to GPR project file",
                                "default": "${config:ada.projectFile}"
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Extra build command line arguments"
                            }
                        },
                        "oneOf": [
                            {
                                "$comment": "Each oneOf is evaluated regardless of the parent schema. That's why valid properties of the parent must be repeated here in order to be allowed.",
                                "properties": {
                                    "kind": {
                                        "enum": [
                                            "buildProject",
                                            "checkFile",
                                            "cleanProject"
                                        ]
                                    },
                                    "projectFile": true,
                                    "args": true
                                },
                                "additionalProperties": false
                            },
                            {
                                "required": [
                                    "main"
                                ],
                                "$comment": "Each oneOf is evaluated regardless of the parent schema. That's why valid properties of the parent must be repeated here in order to be allowed.",
                                "properties": {
                                    "kind": {
                                        "enum": [
                                            "buildMain"
                                        ]
                                    },
                                    "projectFile": true,
                                    "args": true,
                                    "main": {
                                        "type": "string",
                                        "description": "Path to main source file"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "required": [
                                    "main"
                                ],
                                "$comment": "Each oneOf is evaluated regardless of the parent schema. That's why valid properties of the parent must be repeated here in order to be allowed.",
                                "properties": {
                                    "kind": {
                                        "enum": [
                                            "buildAndRunMain"
                                        ]
                                    },
                                    "projectFile": true,
                                    "args": true,
                                    "main": {
                                        "type": "string",
                                        "description": "Path to main source file"
                                    },
                                    "executable": {
                                        "type": "string",
                                        "description": "Path to main executable file (if it cannot be computed automatically)"
                                    },
                                    "mainArgs": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "Arguments passed to the main executable invocation"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                }
            },
            {
                "type": "spark",
                "properties": {
                    "configuration": {
                        "type": "object",
                        "required": [
                            "kind",
                            "projectFile"
                        ],
                        "properties": {
                            "kind": {
                                "description": "Kind of SPARK task",
                                "enum": [
                                    "cleanProjectForProof",
                                    "examineProject",
                                    "examineFile",
                                    "examineSubprogram",
                                    "proveProject",
                                    "proveFile",
                                    "proveSubprogram",
                                    "proveRegion",
                                    "proveLine"
                                ]
                            },
                            "projectFile": {
                                "type": "string",
                                "description": "Path to GPR project file",
                                "default": "${config:ada.projectFile}"
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Extra command line arguments"
                            }
                        },
                        "additionalProperties": false
                    }
                }
            },
            {
                "type": "gnat",
                "required": [
                    "taskKind"
                ],
                "properties": {
                    "taskKind": {
                        "type": "string",
                        "description": "Tool and action kind",
                        "deprecationMessage": "The task type \"gnat\" is deprecated. Use task type \"ada\" or \"spark\" instead."
                    },
                    "args": {
                        "type": "array",
                        "description": "Extra command line arguments",
                        "deprecationMessage": "The task type \"gnat\" is deprecated. Use task type \"ada\" or \"spark\" instead."
                    }
                }
            },
            {
                "type": "gpr",
                "required": [
                    "main"
                ],
                "properties": {
                    "projectFile": {
                        "type": "string",
                        "description": "The project file",
                        "deprecationMessage": "The task type \"gpr\" is deprecated. Use task type \"ada\" instead."
                    },
                    "main": {
                        "type": "string",
                        "description": "The main file targeted",
                        "deprecationMessage": "The task type \"gpr\" is deprecated. Use task type \"ada\" instead."
                    },
                    "executable": {
                        "type": "string",
                        "description": "The related executable",
                        "deprecationMessage": "The task type \"gpr\" is deprecated. Use task type \"ada\" instead."
                    }
                }
            }
        ],
        "commands": [
            {
                "command": "ada.otherFile",
                "title": "Ada: Go to other file"
            },
            {
                "command": "als-reload-project",
                "title": "Ada: Reload project",
                "icon": "$(refresh)"
            },
            {
                "command": "ada.subprogramBox",
                "title": "Ada: Add subprogram box"
            },
            {
                "command": "ada.showExtensionOutput",
                "title": "Ada: Show extension output",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.showAdaLSOutput",
                "title": "Ada: Show Ada Language Server output",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.showGprLSOutput",
                "title": "Ada: Show GPR Language Server output",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.addMissingDirsToWorkspace",
                "title": "Ada: Add Missing Source Directories To Workspace",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.runMainAsk",
                "title": "Ada: Build and run project main...",
                "icon": "$(run-all)",
                "when": "ADA_PROJECT_CONTEXT"
            },
            {
                "command": "ada.runMainLast",
                "title": "Ada: Build and run last used main",
                "icon": "$(run)",
                "when": "ADA_PROJECT_CONTEXT"
            }
        ],
        "keybindings": [
            {
                "command": "ada.otherFile",
                "key": "alt+O",
                "when": "editorLangId == ada && editorTextFocus"
            },
            {
                "command": "ada.subprogramBox",
                "key": "alt+shift+B",
                "when": "editorLangId == ada && editorTextFocus"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "ada.otherFile",
                    "when": "editorLangId == ada"
                },
                {
                    "command": "ada.subprogramBox",
                    "when": "ADA_PROJECT_CONTEXT"
                }
            ],
            "editor/title/run": [
                {
                    "command": "ada.runMainLast",
                    "when": "editorLangId == ada",
                    "group": "navigation@0"
                },
                {
                    "command": "ada.runMainAsk",
                    "when": "editorLangId == ada",
                    "group": "navigation@1"
                }
            ]
        },
        "walkthroughs": [
            {
                "id": "als-get-stated",
                "title": "Ada in VS Code",
                "description": "Introduction to Ada in VS Code support",
                "steps": [
                    {
                        "id": "als-get-stated-welcome",
                        "title": "Welcome to Ada extension!",
                        "description": "This short walkthrough introduces the Ada extension.",
                        "media": {
                            "markdown": "media/welcome.md"
                        }
                    },
                    {
                        "id": "als-get-stated-setting",
                        "title": "Set a project file",
                        "description": "Set the active project file in the `ada.projectFile` setting.\n [Open Settings](command:workbench.action.openSettings)",
                        "media": {
                            "markdown": "media/settings.md"
                        },
                        "completionEvents": [
                            "onSettingChanged:ada.projectFile"
                        ]
                    },
                    {
                        "id": "als-get-stated-debug",
                        "title": "Launch and debug",
                        "description": "Use the pre-installed **C/C++** extension to debug Ada code.",
                        "media": {
                            "markdown": "media/launch-debug.md"
                        },
                        "completionEvents": [
                            "onCommand:workbench.action.debug.start"
                        ]
                    },
                    {
                        "id": "als-get-stated-github",
                        "title": "Report issues or contribute to the extension",
                        "description": "This extension is an open source software. Feel free to [open an issue](https://github.com/AdaCore/ada_language_server/issues) or [contribute on GitHub](https://github.com/AdaCore/ada_language_server/pulls)!",
                        "media": {
                            "image": "media/github.jpg",
                            "altText": "Github snapshot"
                        }
                    }
                ]
            }
        ],
        "debuggers": [
            {
                "type": "ada",
                "label": "Ada",
                "languages": [
                    "ada",
                    "gpr",
                    "GNAT Project"
                ],
                "when": "ADA_PROJECT_CONTEXT",
                "configurationSnippets": [
                    {
                        "label": "Ada: Debugger Launch",
                        "description": "Launch configuration for Ada debugging.",
                        "body": {
                            "type": "cppdbg",
                            "request": "launch",
                            "name": "Ada: Debugger Launch",
                            "program": "^\"\\${workspaceFolder}/\\${command:ada.getOrAskForProgram}\"",
                            "args": [],
                            "cwd": "^\"\\${workspaceFolder}\"",
                            "stopAtEntry": false,
                            "preLaunchTask": "ada: Build current project"
                        }
                    }
                ],
                "variables": {
                    "AskForProgram": "ada.getOrAskForProgram"
                }
            }
        ]
    },
    "devDependencies": {
        "@types/mocha": "10.0.1",
        "@types/node": "16.18.16",
        "@types/vscode": "1.71.0",
        "@types/ws": "8.5.4",
        "@typescript-eslint/eslint-plugin": "5.54.0",
        "@typescript-eslint/parser": "5.55.0",
        "@vscode/test-electron": "2.3.0",
        "esbuild": "0.17.11",
        "eslint": "8.36.0",
        "eslint-config-prettier": "8.7.0",
        "eslint-plugin-prettier": "4.2.1",
        "eslint-plugin-tsdoc": "0.2.17",
        "glob": "9.3.0",
        "mocha": "10.2.0",
        "mocha-junit-reporter": "^2.2.0",
        "prettier": "2.8.4",
        "typescript": "4.9.5",
        "vscode-tmgrammar-test": "0.1.1"
    },
    "scripts": {
        "check-licenses": "npx license-checker-rseidelsohn --summary --onlyAllow \"0BSD;Apache-2.0;BSD-2-Clause;BSD-3-Clause;BlueOak-1.0.0;CC0-1.0;GPL-3.0;GPL-3.0-or-later;ISC;MIT;Python-2.0;Zlib\"",
        "vscode:prepublish": "npm run esbuild-base -- --minify",
        "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/src/extension.js --external:vscode --format=cjs --platform=node",
        "compile": "node ./node_modules/typescript/bin/tsc",
        "watch": "node ./node_modules/typescript/bin/tsc -watch",
        "pretest": "npm run compile",
        "lint": "eslint \"./src/**/*.{js,ts,tsx}\" --quiet --fix",
        "cilint": "eslint \"./src/**/*.{js,ts,tsx}\"",
        "test": "node ./out/test/runTest.js"
    },
    "dependencies": {
        "@types/command-exists": "1.2.0",
        "command-exists": "1.2.9",
        "fast-xml-parser": "4.2.5",
        "fp-ts": "2.12.0",
        "process": "0.11.10",
        "vscode-languageclient": "7.0.0",
        "winston": "3.10.0",
        "ws": "8.13.0"
    }
}
