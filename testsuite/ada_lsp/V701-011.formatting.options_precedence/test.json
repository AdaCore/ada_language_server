[
   {
      "comment": [
         "This test checks that pretty printer options set in the .gpr file ",
         "take precedence over LSP formatting settings set by the client."
      ]
   },
   {
      "start": {
         "cmd": [
            "${ALS}"
         ]
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
               "processId": 153434,
               "rootUri": "$URI{.}",
               "capabilities": {
                  "workspace": {
                     "applyEdit": true,
                     "workspaceEdit": {
                        "documentChanges": true,
                        "resourceOperations": [
                           "rename"
                        ]
                     }
                  },
                  "textDocument": {
                     "synchronization": {},
                     "completion": {
                        "dynamicRegistration": true,
                        "completionItem": {
                           "snippetSupport": false,
                           "documentationFormat": [
                              "plaintext",
                              "markdown"
                           ],
                           "resolveSupport": {
                              "properties": [
                                 "detail",
                                 "documentation"
                              ]
                           }
                        }
                     },
                     "hover": {},
                     "signatureHelp": {},
                     "declaration": {},
                     "definition": {},
                     "typeDefinition": {},
                     "implementation": {},
                     "documentSymbol": {
                        "hierarchicalDocumentSymbolSupport": true
                     },
                     "formatting": {
                        "dynamicRegistration": false
                     },
                     "rangeFormatting": {
                        "dynamicRegistration": false
                     },
                     "onTypeFormatting": {
                        "dynamicRegistration": false
                     },
                     "foldingRange": {
                        "lineFoldingOnly": true
                     }
                  }
               }
            }
         },
         "wait": [
            {
               "id": 1,
               "result": {
                  "capabilities": {
                     "textDocumentSync": 2,
                     "completionProvider": {
                        "triggerCharacters": [
                           ".",
                           ",",
                           "'",
                           "("
                        ],
                        "resolveProvider": true
                     },
                     "hoverProvider": true,
                     "signatureHelpProvider": {
                        "triggerCharacters": [
                           ",",
                           "("
                        ],
                        "retriggerCharacters": [
                           "\b"
                        ]
                     },
                     "declarationProvider": true,
                     "definitionProvider": true,
                     "typeDefinitionProvider": true,
                     "implementationProvider": true,
                     "referencesProvider": true,
                     "documentHighlightProvider": true,
                     "documentSymbolProvider": true,
                     "codeActionProvider": {},
                     "documentFormattingProvider": true,
                     "documentRangeFormattingProvider": true,
                     "renameProvider": {},
                     "foldingRangeProvider": true,
                     "executeCommandProvider": {
                        "commands": [
                           "<HAS>",
                           "als-named-parameters"]
                     },
                     "workspaceSymbolProvider": true,
                     "callHierarchyProvider": {},
                     "alsShowDepsProvider": true,
                     "alsReferenceKinds": [
                        "<HAS>",
                        "reference"],
                     "alsCheckSyntaxProvider": true
                  }
               }
            }
         ]
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "initialized"
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "workspace/didChangeConfiguration",
            "params": {
               "settings": {
                  "ada": {
                     "scenarioVariables": {},
                     "defaultCharset": "ISO-8859-1",
                     "enableDiagnostics": false,
                     "followSymlinks": false,
                     "documentationStyle": "gnat",
                     "foldComments": false
                  }
               }
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "id": 2,
            "result": null
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "textDocument/didOpen",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}",
                  "languageId": "Ada",
                  "version": 0,
                  "text": "with Ada.Unchecked_Deallocation;\n\nprocedure Main is\n\n    type My_Type is new Integer;\n    type My_Type_Access is access all My_Type;\n\n    procedure Free is new Ada.Unchecked_Deallocation (My_Type, My_Type_Access);\n\n    A : My_Type_Access := new My_Type'(3);\nbegin\n    Free (A);\nend Main;\n"
               }
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "id": 4,
            "method": "textDocument/formatting",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}"
               },
               "options": {
                  "tabSize": 3,
                  "insertSpaces": true,
                  "trimTrailingWhitespace": true,
                  "insertFinalNewline": false,
                  "trimFinalNewlines": true
               }
            }
         },
         "wait": [
            {
               "id": 4,
               "result": [
                  {
                     "range": {
                        "start": {
                           "line": 4,
                           "character": 0
                        },
                        "end": {
                           "line": 6,
                           "character": 0
                        }
                     },
                     "newText": "          type My_Type is new Integer;\n          type My_Type_Access is access all My_Type;\n"
                  },
                  {
                     "range": {
                        "start": {
                           "line": 7,
                           "character": 0
                        },
                        "end": {
                           "line": 8,
                           "character": 0
                        }
                     },
                     "newText": "          procedure Free is new Ada.Unchecked_Deallocation\n                   (My_Type, My_Type_Access);\n"
                  },
                  {
                     "range": {
                        "start": {
                           "line": 9,
                           "character": 0
                        },
                        "end": {
                           "line": 10,
                           "character": 0
                        }
                     },
                     "newText": "          A : My_Type_Access := new My_Type'(3);\n"
                  },
                  {
                     "range": {
                        "start": {
                           "line": 11,
                           "character": 0
                        },
                        "end": {
                           "line": 12,
                           "character": 0
                        }
                     },
                     "newText": "          Free (A);\n"
                  }
               ]
            }
         ]
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "textDocument/didChange",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}",
                  "version": 1
               },
               "contentChanges": [
                  {
                     "range": {
                        "start": {
                           "line": 11,
                           "character": 0
                        },
                        "end": {
                           "line": 12,
                           "character": 0
                        }
                     },
                     "text": ""
                  }
               ]
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "textDocument/didChange",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}",
                  "version": 2
               },
               "contentChanges": [
                  {
                     "range": {
                        "start": {
                           "line": 11,
                           "character": 0
                        },
                        "end": {
                           "line": 11,
                           "character": 0
                        }
                     },
                     "text": "          Free (A);\n"
                  }
               ]
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "textDocument/didChange",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}",
                  "version": 3
               },
               "contentChanges": [
                  {
                     "range": {
                        "start": {
                           "line": 9,
                           "character": 0
                        },
                        "end": {
                           "line": 10,
                           "character": 0
                        }
                     },
                     "text": ""
                  }
               ]
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "textDocument/didChange",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}",
                  "version": 4
               },
               "contentChanges": [
                  {
                     "range": {
                        "start": {
                           "line": 9,
                           "character": 0
                        },
                        "end": {
                           "line": 9,
                           "character": 0
                        }
                     },
                     "text": "          A : My_Type_Access := new My_Type'(3);\n"
                  }
               ]
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "textDocument/didChange",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}",
                  "version": 5
               },
               "contentChanges": [
                  {
                     "range": {
                        "start": {
                           "line": 7,
                           "character": 0
                        },
                        "end": {
                           "line": 8,
                           "character": 0
                        }
                     },
                     "text": ""
                  }
               ]
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "textDocument/didChange",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}",
                  "version": 6
               },
               "contentChanges": [
                  {
                     "range": {
                        "start": {
                           "line": 7,
                           "character": 0
                        },
                        "end": {
                           "line": 7,
                           "character": 0
                        }
                     },
                     "text": "          procedure Free is new Ada.Unchecked_Deallocation\n                   (My_Type, My_Type_Access);\n"
                  }
               ]
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "textDocument/didChange",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}",
                  "version": 7
               },
               "contentChanges": [
                  {
                     "range": {
                        "start": {
                           "line": 4,
                           "character": 0
                        },
                        "end": {
                           "line": 6,
                           "character": 0
                        }
                     },
                     "text": ""
                  }
               ]
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "method": "textDocument/didChange",
            "params": {
               "textDocument": {
                  "uri": "$URI{main.adb}",
                  "version": 8
               },
               "contentChanges": [
                  {
                     "range": {
                        "start": {
                           "line": 4,
                           "character": 0
                        },
                        "end": {
                           "line": 4,
                           "character": 0
                        }
                     },
                     "text": "          type My_Type is new Integer;\n          type My_Type_Access is access all My_Type;\n"
                  }
               ]
            }
         },
         "wait": []
      }
   },
   {
      "send": {
         "request": {
            "jsonrpc": "2.0",
            "id": 7,
            "method": "shutdown"
         },
         "wait": [
            {
               "id": 7,
               "result": null
            }
         ]
      }
   },
   {
      "stop": {
         "exit_code": 0
      }
   }
]