{
   Leaks when GPR initializes errors
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:__gnat_malloc
   fun:gpr__erroutc__output_msg_text
   fun:gpr__err__finalize
   fun:gnatcoll__projects__recompute_view
   fun:gnatcoll__projects__internal_load
   fun:gnatcoll__projects__load
}

{
   GPR
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:__gnat_malloc
   fun:gpr__err__error_msg__2
   fun:gpr__err__error_msg__2
   fun:gpr__err__error_msg
}

### T114-020 leaks with extending project and custom renaming
{
   GPR leak
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:gnatcoll__memory__alloc
   fun:system__pool_global__allocate
   fun:gpr__nmsc__add_source
   fun:gpr__nmsc__check_file
   fun:gpr__nmsc__search_directories
   fun:gpr__nmsc__find_sources
   fun:gpr__nmsc__look_for_sources
   fun:gpr__nmsc__process_naming_scheme__check
   fun:gpr__nmsc__process_naming_scheme__recursive_check.71.isra.0
   fun:gpr__nmsc__process_naming_scheme__check_all_projects__recursive_check_context__recursive_check.68
   fun:gpr__nmsc__process_naming_scheme__check_all_projects__recursive_check_context__recursive_check.68
   fun:gpr__nmsc__process_naming_scheme__check_all_projects__recursive_check_context__recursive_check.68
   fun:gpr__nmsc__process_naming_scheme__check_all_projects__recursive_check_context.67.constprop.0
   fun:gpr__nmsc__process_naming_scheme__check_all_projects
   fun:gpr__nmsc__process_naming_scheme
   fun:gpr__proc__check
   fun:gpr__proc__process_project_tree_phase_2
}

### SC20-039 leaks when loading library aggregate projects
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:__gnat_malloc
   fun:gpr__env__copy
   fun:gpr__proc__recursive_process
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:__gnat_malloc
   fun:gpr__env__projects_paths__tab__set
   fun:gpr__env__find_project
   fun:gpr__part__parse
   fun:gpr__proc__recursive_process__process_aggregated_projects
}

# Valgrind limitation: GNATâ€™s superaligned secondary stack chunk
# appears to be leaked, but we actually have a pointer to the
# middle of the allocated memory block.
{
   Libadalang_Elaborations
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:gnatcoll__memory__alloc
   fun:system__secondary_stack__ss_allocate
   fun:langkit_support__text__to_text
   fun:libadalang__implementation__c___elabb
   fun:adalanginit
}
