on:
  push:
    branches:
      - edge
    tags:
      - 2*.*.*
  pull_request:
name: Build binaries
env:
  DEFAULT_TAG: 23.0.999
  AWS_DEFAULT_REGION: eu-west-1
jobs:
  build:
    name: Build and deploy
    strategy:
      fail-fast: false
      matrix: # Build debug and production
        debug: ['', 'debug']      # '' if production, 'debug' for debug
        os: [macos-10.15, ubuntu-18.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Initialize TAG and git autocrlf
        shell: bash
        run: |
          git config --global core.autocrlf input
          if [[ ${GITHUB_REF##*/} = 2*.[0-9]*.[0-9]* ]]; then
              echo "TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
          else
              echo "TAG=$DEFAULT_TAG" >> $GITHUB_ENV
          fi
      - name: Install iconv and gmp (Windows only)
        if: ${{ runner.os == 'Windows' }}
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          update: true
          install: >-
            mingw64/mingw-w64-x86_64-libiconv
            mingw64/mingw-w64-x86_64-gmp
      - name: Get als
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get VSS
        uses: actions/checkout@v2
        with:
          repository: AdaCore/VSS
          path: subprojects/VSS
      - name: Get Spawn
        uses: actions/checkout@v2
        with:
          repository: AdaCore/spawn
          path: subprojects/spawn
      - name: Get LAL_Tools
        uses: actions/checkout@v2
        with:
          repository: AdaCore/libadalang-tools
          path: subprojects/libadalang-tools
      - name: Get Templates Parser
        uses: actions/checkout@v2
        with:
          repository: AdaCore/templates-parser
          path: subprojects/templates-parser
      - name: Get Langkit
        uses: actions/checkout@v2
        with:
          repository: AdaCore/langkit
          path: subprojects/langkit
      - name: Get gpr
        uses: actions/checkout@v2
        with:
          repository: AdaCore/gpr
          path: subprojects/gpr
          ref: edge
      - name: Get gprconfig_kb
        uses: actions/checkout@v2
        with:
          repository: AdaCore/gprconfig_kb
          path: subprojects/gpr/gprconfig_kb
      - name: Get GNATdoc
        uses: actions/checkout@v2
        with:
          repository: AdaCore/gnatdoc
          path: subprojects/gnatdoc
          ref: edge
      - uses: actions/cache@v2
        with:
          path: ./cached_gnat
          key: ${{ runner.os }}-alire-2022
          restore-keys: ${{ runner.os }}-alire-2022
      - name: Get GNAT toolchain with alire
        uses: alire-project/setup-alire@v1
        with:
          toolchain: gnat_native^12 gprbuild^22
          toolchain_dir: ./cached_gnat
      - name: Build (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: msys2 {0}
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.GHA_CACHE_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.GHA_CACHE_SECRET}}
        run: |
          # This is to avoid locking .sh on win that prevents its updating
          cp .github/workflows/build-binaries.sh .github/workflows/build-binaries.sh_
          .github/workflows/build-binaries.sh_ "${{ matrix.debug }}" ${{ runner.os }} ${{ env.TAG }}
      - name: Build (non-Windows)
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.GHA_CACHE_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.GHA_CACHE_SECRET}}
        if: ${{ runner.os != 'Windows' }}
        run: .github/workflows/build-binaries.sh "${{ matrix.debug }}" ${{ runner.os }} ${{ env.TAG }}
      - name: Archive ALS binary
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          name: als-${{ runner.os }}-${{ matrix.debug }}
          path: integration/vscode/ada/[ldw]*/*
  package:
    if: ${{ github.event_name == 'push' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get als
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - name: Pack vscode extension
        run: |
          if [[ ${GITHUB_REF##*/} = 2*.[0-9]*.[0-9]* ]]; then
              TAG="${GITHUB_REF##*/}"
              .github/workflows/release.sh ""      "${{ secrets.GITHUB_TOKEN }}" $TAG
              .github/workflows/release.sh "debug" "${{ secrets.GITHUB_TOKEN }}" $TAG
          else
              TAG="$DEFAULT_TAG"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
          .github/workflows/pack-binaries.sh ""      "${{secrets.VSCE_TOKEN}}" "${{secrets.OPENVSX_TOKEN}}" $TAG
          .github/workflows/pack-binaries.sh "debug" "${{secrets.VSCE_TOKEN}}" "${{secrets.OPENVSX_TOKEN}}" $TAG
      - name: Archive ALS vsix
        uses: actions/upload-artifact@v2
        with:
          name: als-vsix-${{ matrix.debug }}${{ env.TAG }}
          path: '*.vsix'
